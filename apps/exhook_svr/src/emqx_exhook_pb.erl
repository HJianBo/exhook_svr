%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.11.2
-module(emqx_exhook_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_client_check_acl_request.AclReqType'/1, 'enum_value_by_symbol_client_check_acl_request.AclReqType'/1]).
-export(['enum_symbol_by_value_valued_response.ResponsedType'/1, 'enum_value_by_symbol_valued_response.ResponsedType'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types
-type 'client_check_acl_request.AclReqType'() :: 'PUBLISH' | 'SUBSCRIBE'.
-type 'valued_response.ResponsedType'() :: 'IGNORE' | 'CONTINUE' | 'STOP_AND_RETURN'.
-export_type(['client_check_acl_request.AclReqType'/0, 'valued_response.ResponsedType'/0]).

%% message types
-type provider_loaded_request() ::
      #{broker                  => broker_info()    % = 1
       }.

-type loaded_response() ::
      #{hooks                   => [hook_spec()]    % = 1
       }.

-type provider_unloaded_request() ::
      #{
       }.

-type client_connect_request() ::
      #{conninfo                => conn_info(),     % = 1
        props                   => [property()]     % = 2
       }.

-type client_connack_request() ::
      #{conninfo                => conn_info(),     % = 1
        result_code             => iodata(),        % = 2
        props                   => [property()]     % = 3
       }.

-type client_connected_request() ::
      #{clientinfo              => client_info()    % = 1
       }.

-type client_disconnected_request() ::
      #{clientinfo              => client_info(),   % = 1
        reason                  => iodata()         % = 2
       }.

-type client_authenticate_request() ::
      #{clientinfo              => client_info(),   % = 1
        result                  => boolean() | 0 | 1 % = 2
       }.

-type client_check_acl_request() ::
      #{clientinfo              => client_info(),   % = 1
        type                    => 'PUBLISH' | 'SUBSCRIBE' | integer(), % = 2, enum client_check_acl_request.AclReqType
        topic                   => iodata(),        % = 3
        result                  => boolean() | 0 | 1 % = 4
       }.

-type client_subscribe_request() ::
      #{clientinfo              => client_info(),   % = 1
        props                   => [property()],    % = 2
        topic_filters           => [topic_filter()] % = 3
       }.

-type client_unsubscribe_request() ::
      #{clientinfo              => client_info(),   % = 1
        props                   => [property()],    % = 2
        topic_filters           => [topic_filter()] % = 3
       }.

-type session_created_request() ::
      #{clientinfo              => client_info()    % = 1
       }.

-type session_subscribed_request() ::
      #{clientinfo              => client_info(),   % = 1
        topic                   => iodata(),        % = 2
        subopts                 => sub_opts()       % = 3
       }.

-type session_unsubscribed_request() ::
      #{clientinfo              => client_info(),   % = 1
        topic                   => iodata()         % = 2
       }.

-type session_resumed_request() ::
      #{clientinfo              => client_info()    % = 1
       }.

-type session_discarded_request() ::
      #{clientinfo              => client_info()    % = 1
       }.

-type session_takeovered_request() ::
      #{clientinfo              => client_info()    % = 1
       }.

-type session_terminated_request() ::
      #{clientinfo              => client_info(),   % = 1
        reason                  => iodata()         % = 2
       }.

-type message_publish_request() ::
      #{message                 => message()        % = 1
       }.

-type message_delivered_request() ::
      #{clientinfo              => client_info(),   % = 1
        message                 => message()        % = 2
       }.

-type message_dropped_request() ::
      #{message                 => message(),       % = 1
        reason                  => iodata()         % = 2
       }.

-type message_acked_request() ::
      #{clientinfo              => client_info(),   % = 1
        message                 => message()        % = 2
       }.

-type empty_success() ::
      #{
       }.

-type valued_response() ::
      #{type                    => 'IGNORE' | 'CONTINUE' | 'STOP_AND_RETURN' | integer(), % = 1, enum valued_response.ResponsedType
        value                   => {bool_result, boolean() | 0 | 1} | {message, message()} % oneof
       }.

-type broker_info() ::
      #{version                 => iodata(),        % = 1
        sysdescr                => iodata(),        % = 2
        uptime                  => iodata(),        % = 3
        datetime                => iodata()         % = 4
       }.

-type hook_spec() ::
      #{name                    => iodata(),        % = 1
        topics                  => [iodata()]       % = 2
       }.

-type conn_info() ::
      #{node                    => iodata(),        % = 1
        clientid                => iodata(),        % = 2
        username                => iodata(),        % = 3
        peerhost                => iodata(),        % = 4
        sockport                => non_neg_integer(), % = 5, 32 bits
        proto_name              => iodata(),        % = 6
        proto_ver               => iodata(),        % = 7
        keepalive               => non_neg_integer() % = 8, 32 bits
       }.

-type client_info() ::
      #{node                    => iodata(),        % = 1
        clientid                => iodata(),        % = 2
        username                => iodata(),        % = 3
        password                => iodata(),        % = 4
        peerhost                => iodata(),        % = 5
        sockport                => non_neg_integer(), % = 6, 32 bits
        protocol                => iodata(),        % = 7
        mountpoint              => iodata(),        % = 8
        is_superuser            => boolean() | 0 | 1, % = 9
        anonymous               => boolean() | 0 | 1 % = 10
       }.

-type message() ::
      #{node                    => iodata(),        % = 1
        id                      => iodata(),        % = 2
        qos                     => non_neg_integer(), % = 3, 32 bits
        from                    => iodata(),        % = 4
        topic                   => iodata(),        % = 5
        payload                 => iodata(),        % = 6
        timestamp               => non_neg_integer() % = 7, 64 bits
       }.

-type property() ::
      #{name                    => iodata(),        % = 1
        value                   => iodata()         % = 2
       }.

-type topic_filter() ::
      #{name                    => iodata(),        % = 1
        qos                     => non_neg_integer() % = 2, 32 bits
       }.

-type sub_opts() ::
      #{qos                     => non_neg_integer(), % = 1, 32 bits
        share                   => iodata(),        % = 2
        rh                      => non_neg_integer(), % = 3, 32 bits
        rap                     => non_neg_integer(), % = 4, 32 bits
        nl                      => non_neg_integer() % = 5, 32 bits
       }.

-export_type(['provider_loaded_request'/0, 'loaded_response'/0, 'provider_unloaded_request'/0, 'client_connect_request'/0, 'client_connack_request'/0, 'client_connected_request'/0, 'client_disconnected_request'/0, 'client_authenticate_request'/0, 'client_check_acl_request'/0, 'client_subscribe_request'/0, 'client_unsubscribe_request'/0, 'session_created_request'/0, 'session_subscribed_request'/0, 'session_unsubscribed_request'/0, 'session_resumed_request'/0, 'session_discarded_request'/0, 'session_takeovered_request'/0, 'session_terminated_request'/0, 'message_publish_request'/0, 'message_delivered_request'/0, 'message_dropped_request'/0, 'message_acked_request'/0, 'empty_success'/0, 'valued_response'/0, 'broker_info'/0, 'hook_spec'/0, 'conn_info'/0, 'client_info'/0, 'message'/0, 'property'/0, 'topic_filter'/0, 'sub_opts'/0]).

-spec encode_msg(provider_loaded_request() | loaded_response() | provider_unloaded_request() | client_connect_request() | client_connack_request() | client_connected_request() | client_disconnected_request() | client_authenticate_request() | client_check_acl_request() | client_subscribe_request() | client_unsubscribe_request() | session_created_request() | session_subscribed_request() | session_unsubscribed_request() | session_resumed_request() | session_discarded_request() | session_takeovered_request() | session_terminated_request() | message_publish_request() | message_delivered_request() | message_dropped_request() | message_acked_request() | empty_success() | valued_response() | broker_info() | hook_spec() | conn_info() | client_info() | message() | property() | topic_filter() | sub_opts(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg(provider_loaded_request() | loaded_response() | provider_unloaded_request() | client_connect_request() | client_connack_request() | client_connected_request() | client_disconnected_request() | client_authenticate_request() | client_check_acl_request() | client_subscribe_request() | client_unsubscribe_request() | session_created_request() | session_subscribed_request() | session_unsubscribed_request() | session_resumed_request() | session_discarded_request() | session_takeovered_request() | session_terminated_request() | message_publish_request() | message_delivered_request() | message_dropped_request() | message_acked_request() | empty_success() | valued_response() | broker_info() | hook_spec() | conn_info() | client_info() | message() | property() | topic_filter() | sub_opts(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        provider_loaded_request ->
            encode_msg_provider_loaded_request(id(Msg, TrUserData),
                                               TrUserData);
        loaded_response ->
            encode_msg_loaded_response(id(Msg, TrUserData),
                                       TrUserData);
        provider_unloaded_request ->
            encode_msg_provider_unloaded_request(id(Msg,
                                                    TrUserData),
                                                 TrUserData);
        client_connect_request ->
            encode_msg_client_connect_request(id(Msg, TrUserData),
                                              TrUserData);
        client_connack_request ->
            encode_msg_client_connack_request(id(Msg, TrUserData),
                                              TrUserData);
        client_connected_request ->
            encode_msg_client_connected_request(id(Msg, TrUserData),
                                                TrUserData);
        client_disconnected_request ->
            encode_msg_client_disconnected_request(id(Msg,
                                                      TrUserData),
                                                   TrUserData);
        client_authenticate_request ->
            encode_msg_client_authenticate_request(id(Msg,
                                                      TrUserData),
                                                   TrUserData);
        client_check_acl_request ->
            encode_msg_client_check_acl_request(id(Msg, TrUserData),
                                                TrUserData);
        client_subscribe_request ->
            encode_msg_client_subscribe_request(id(Msg, TrUserData),
                                                TrUserData);
        client_unsubscribe_request ->
            encode_msg_client_unsubscribe_request(id(Msg,
                                                     TrUserData),
                                                  TrUserData);
        session_created_request ->
            encode_msg_session_created_request(id(Msg, TrUserData),
                                               TrUserData);
        session_subscribed_request ->
            encode_msg_session_subscribed_request(id(Msg,
                                                     TrUserData),
                                                  TrUserData);
        session_unsubscribed_request ->
            encode_msg_session_unsubscribed_request(id(Msg,
                                                       TrUserData),
                                                    TrUserData);
        session_resumed_request ->
            encode_msg_session_resumed_request(id(Msg, TrUserData),
                                               TrUserData);
        session_discarded_request ->
            encode_msg_session_discarded_request(id(Msg,
                                                    TrUserData),
                                                 TrUserData);
        session_takeovered_request ->
            encode_msg_session_takeovered_request(id(Msg,
                                                     TrUserData),
                                                  TrUserData);
        session_terminated_request ->
            encode_msg_session_terminated_request(id(Msg,
                                                     TrUserData),
                                                  TrUserData);
        message_publish_request ->
            encode_msg_message_publish_request(id(Msg, TrUserData),
                                               TrUserData);
        message_delivered_request ->
            encode_msg_message_delivered_request(id(Msg,
                                                    TrUserData),
                                                 TrUserData);
        message_dropped_request ->
            encode_msg_message_dropped_request(id(Msg, TrUserData),
                                               TrUserData);
        message_acked_request ->
            encode_msg_message_acked_request(id(Msg, TrUserData),
                                             TrUserData);
        empty_success ->
            encode_msg_empty_success(id(Msg, TrUserData),
                                     TrUserData);
        valued_response ->
            encode_msg_valued_response(id(Msg, TrUserData),
                                       TrUserData);
        broker_info ->
            encode_msg_broker_info(id(Msg, TrUserData), TrUserData);
        hook_spec ->
            encode_msg_hook_spec(id(Msg, TrUserData), TrUserData);
        conn_info ->
            encode_msg_conn_info(id(Msg, TrUserData), TrUserData);
        client_info ->
            encode_msg_client_info(id(Msg, TrUserData), TrUserData);
        message ->
            encode_msg_message(id(Msg, TrUserData), TrUserData);
        property ->
            encode_msg_property(id(Msg, TrUserData), TrUserData);
        topic_filter ->
            encode_msg_topic_filter(id(Msg, TrUserData),
                                    TrUserData);
        sub_opts ->
            encode_msg_sub_opts(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_provider_loaded_request(Msg, TrUserData) ->
    encode_msg_provider_loaded_request(Msg,
                                       <<>>,
                                       TrUserData).


encode_msg_provider_loaded_request(#{} = M, Bin,
                                   TrUserData) ->
    case M of
        #{broker := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= undefined -> Bin;
                   true ->
                       e_mfield_provider_loaded_request_broker(TrF1,
                                                               <<Bin/binary,
                                                                 10>>,
                                                               TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_loaded_response(Msg, TrUserData) ->
    encode_msg_loaded_response(Msg, <<>>, TrUserData).


encode_msg_loaded_response(#{} = M, Bin, TrUserData) ->
    case M of
        #{hooks := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true ->
                   e_field_loaded_response_hooks(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_provider_unloaded_request(_Msg,
                                     _TrUserData) ->
    <<>>.

encode_msg_client_connect_request(Msg, TrUserData) ->
    encode_msg_client_connect_request(Msg,
                                      <<>>,
                                      TrUserData).


encode_msg_client_connect_request(#{} = M, Bin,
                                  TrUserData) ->
    B1 = case M of
             #{conninfo := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= undefined -> Bin;
                        true ->
                            e_mfield_client_connect_request_conninfo(TrF1,
                                                                     <<Bin/binary,
                                                                       10>>,
                                                                     TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{props := F2} ->
            TrF2 = id(F2, TrUserData),
            if TrF2 == [] -> B1;
               true ->
                   e_field_client_connect_request_props(TrF2,
                                                        B1,
                                                        TrUserData)
            end;
        _ -> B1
    end.

encode_msg_client_connack_request(Msg, TrUserData) ->
    encode_msg_client_connack_request(Msg,
                                      <<>>,
                                      TrUserData).


encode_msg_client_connack_request(#{} = M, Bin,
                                  TrUserData) ->
    B1 = case M of
             #{conninfo := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= undefined -> Bin;
                        true ->
                            e_mfield_client_connack_request_conninfo(TrF1,
                                                                     <<Bin/binary,
                                                                       10>>,
                                                                     TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{result_code := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false ->
                             e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{props := F3} ->
            TrF3 = id(F3, TrUserData),
            if TrF3 == [] -> B2;
               true ->
                   e_field_client_connack_request_props(TrF3,
                                                        B2,
                                                        TrUserData)
            end;
        _ -> B2
    end.

encode_msg_client_connected_request(Msg, TrUserData) ->
    encode_msg_client_connected_request(Msg,
                                        <<>>,
                                        TrUserData).


encode_msg_client_connected_request(#{} = M, Bin,
                                    TrUserData) ->
    case M of
        #{clientinfo := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= undefined -> Bin;
                   true ->
                       e_mfield_client_connected_request_clientinfo(TrF1,
                                                                    <<Bin/binary,
                                                                      10>>,
                                                                    TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_client_disconnected_request(Msg,
                                       TrUserData) ->
    encode_msg_client_disconnected_request(Msg,
                                           <<>>,
                                           TrUserData).


encode_msg_client_disconnected_request(#{} = M, Bin,
                                       TrUserData) ->
    B1 = case M of
             #{clientinfo := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= undefined -> Bin;
                        true ->
                            e_mfield_client_disconnected_request_clientinfo(TrF1,
                                                                            <<Bin/binary,
                                                                              10>>,
                                                                            TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{reason := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false ->
                        e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_client_authenticate_request(Msg,
                                       TrUserData) ->
    encode_msg_client_authenticate_request(Msg,
                                           <<>>,
                                           TrUserData).


encode_msg_client_authenticate_request(#{} = M, Bin,
                                       TrUserData) ->
    B1 = case M of
             #{clientinfo := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= undefined -> Bin;
                        true ->
                            e_mfield_client_authenticate_request_clientinfo(TrF1,
                                                                            <<Bin/binary,
                                                                              10>>,
                                                                            TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{result := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= false -> B1;
                   true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_client_check_acl_request(Msg, TrUserData) ->
    encode_msg_client_check_acl_request(Msg,
                                        <<>>,
                                        TrUserData).


encode_msg_client_check_acl_request(#{} = M, Bin,
                                    TrUserData) ->
    B1 = case M of
             #{clientinfo := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= undefined -> Bin;
                        true ->
                            e_mfield_client_check_acl_request_clientinfo(TrF1,
                                                                         <<Bin/binary,
                                                                           10>>,
                                                                         TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{type := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 'PUBLISH'; TrF2 =:= 0 -> B1;
                        true ->
                            'e_enum_client_check_acl_request.AclReqType'(TrF2,
                                                                         <<B1/binary,
                                                                           16>>,
                                                                         TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{topic := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case is_empty_string(TrF3) of
                         true -> B2;
                         false ->
                             e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{result := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                if TrF4 =:= false -> B3;
                   true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
                end
            end;
        _ -> B3
    end.

encode_msg_client_subscribe_request(Msg, TrUserData) ->
    encode_msg_client_subscribe_request(Msg,
                                        <<>>,
                                        TrUserData).


encode_msg_client_subscribe_request(#{} = M, Bin,
                                    TrUserData) ->
    B1 = case M of
             #{clientinfo := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= undefined -> Bin;
                        true ->
                            e_mfield_client_subscribe_request_clientinfo(TrF1,
                                                                         <<Bin/binary,
                                                                           10>>,
                                                                         TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{props := F2} ->
                 TrF2 = id(F2, TrUserData),
                 if TrF2 == [] -> B1;
                    true ->
                        e_field_client_subscribe_request_props(TrF2,
                                                               B1,
                                                               TrUserData)
                 end;
             _ -> B1
         end,
    case M of
        #{topic_filters := F3} ->
            TrF3 = id(F3, TrUserData),
            if TrF3 == [] -> B2;
               true ->
                   e_field_client_subscribe_request_topic_filters(TrF3,
                                                                  B2,
                                                                  TrUserData)
            end;
        _ -> B2
    end.

encode_msg_client_unsubscribe_request(Msg,
                                      TrUserData) ->
    encode_msg_client_unsubscribe_request(Msg,
                                          <<>>,
                                          TrUserData).


encode_msg_client_unsubscribe_request(#{} = M, Bin,
                                      TrUserData) ->
    B1 = case M of
             #{clientinfo := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= undefined -> Bin;
                        true ->
                            e_mfield_client_unsubscribe_request_clientinfo(TrF1,
                                                                           <<Bin/binary,
                                                                             10>>,
                                                                           TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{props := F2} ->
                 TrF2 = id(F2, TrUserData),
                 if TrF2 == [] -> B1;
                    true ->
                        e_field_client_unsubscribe_request_props(TrF2,
                                                                 B1,
                                                                 TrUserData)
                 end;
             _ -> B1
         end,
    case M of
        #{topic_filters := F3} ->
            TrF3 = id(F3, TrUserData),
            if TrF3 == [] -> B2;
               true ->
                   e_field_client_unsubscribe_request_topic_filters(TrF3,
                                                                    B2,
                                                                    TrUserData)
            end;
        _ -> B2
    end.

encode_msg_session_created_request(Msg, TrUserData) ->
    encode_msg_session_created_request(Msg,
                                       <<>>,
                                       TrUserData).


encode_msg_session_created_request(#{} = M, Bin,
                                   TrUserData) ->
    case M of
        #{clientinfo := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= undefined -> Bin;
                   true ->
                       e_mfield_session_created_request_clientinfo(TrF1,
                                                                   <<Bin/binary,
                                                                     10>>,
                                                                   TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_session_subscribed_request(Msg,
                                      TrUserData) ->
    encode_msg_session_subscribed_request(Msg,
                                          <<>>,
                                          TrUserData).


encode_msg_session_subscribed_request(#{} = M, Bin,
                                      TrUserData) ->
    B1 = case M of
             #{clientinfo := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= undefined -> Bin;
                        true ->
                            e_mfield_session_subscribed_request_clientinfo(TrF1,
                                                                           <<Bin/binary,
                                                                             10>>,
                                                                           TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{topic := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false ->
                             e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{subopts := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                if TrF3 =:= undefined -> B2;
                   true ->
                       e_mfield_session_subscribed_request_subopts(TrF3,
                                                                   <<B2/binary,
                                                                     26>>,
                                                                   TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_session_unsubscribed_request(Msg,
                                        TrUserData) ->
    encode_msg_session_unsubscribed_request(Msg,
                                            <<>>,
                                            TrUserData).


encode_msg_session_unsubscribed_request(#{} = M, Bin,
                                        TrUserData) ->
    B1 = case M of
             #{clientinfo := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= undefined -> Bin;
                        true ->
                            e_mfield_session_unsubscribed_request_clientinfo(TrF1,
                                                                             <<Bin/binary,
                                                                               10>>,
                                                                             TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{topic := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false ->
                        e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_session_resumed_request(Msg, TrUserData) ->
    encode_msg_session_resumed_request(Msg,
                                       <<>>,
                                       TrUserData).


encode_msg_session_resumed_request(#{} = M, Bin,
                                   TrUserData) ->
    case M of
        #{clientinfo := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= undefined -> Bin;
                   true ->
                       e_mfield_session_resumed_request_clientinfo(TrF1,
                                                                   <<Bin/binary,
                                                                     10>>,
                                                                   TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_session_discarded_request(Msg, TrUserData) ->
    encode_msg_session_discarded_request(Msg,
                                         <<>>,
                                         TrUserData).


encode_msg_session_discarded_request(#{} = M, Bin,
                                     TrUserData) ->
    case M of
        #{clientinfo := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= undefined -> Bin;
                   true ->
                       e_mfield_session_discarded_request_clientinfo(TrF1,
                                                                     <<Bin/binary,
                                                                       10>>,
                                                                     TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_session_takeovered_request(Msg,
                                      TrUserData) ->
    encode_msg_session_takeovered_request(Msg,
                                          <<>>,
                                          TrUserData).


encode_msg_session_takeovered_request(#{} = M, Bin,
                                      TrUserData) ->
    case M of
        #{clientinfo := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= undefined -> Bin;
                   true ->
                       e_mfield_session_takeovered_request_clientinfo(TrF1,
                                                                      <<Bin/binary,
                                                                        10>>,
                                                                      TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_session_terminated_request(Msg,
                                      TrUserData) ->
    encode_msg_session_terminated_request(Msg,
                                          <<>>,
                                          TrUserData).


encode_msg_session_terminated_request(#{} = M, Bin,
                                      TrUserData) ->
    B1 = case M of
             #{clientinfo := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= undefined -> Bin;
                        true ->
                            e_mfield_session_terminated_request_clientinfo(TrF1,
                                                                           <<Bin/binary,
                                                                             10>>,
                                                                           TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{reason := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false ->
                        e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_message_publish_request(Msg, TrUserData) ->
    encode_msg_message_publish_request(Msg,
                                       <<>>,
                                       TrUserData).


encode_msg_message_publish_request(#{} = M, Bin,
                                   TrUserData) ->
    case M of
        #{message := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= undefined -> Bin;
                   true ->
                       e_mfield_message_publish_request_message(TrF1,
                                                                <<Bin/binary,
                                                                  10>>,
                                                                TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_message_delivered_request(Msg, TrUserData) ->
    encode_msg_message_delivered_request(Msg,
                                         <<>>,
                                         TrUserData).


encode_msg_message_delivered_request(#{} = M, Bin,
                                     TrUserData) ->
    B1 = case M of
             #{clientinfo := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= undefined -> Bin;
                        true ->
                            e_mfield_message_delivered_request_clientinfo(TrF1,
                                                                          <<Bin/binary,
                                                                            10>>,
                                                                          TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{message := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= undefined -> B1;
                   true ->
                       e_mfield_message_delivered_request_message(TrF2,
                                                                  <<B1/binary,
                                                                    18>>,
                                                                  TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_message_dropped_request(Msg, TrUserData) ->
    encode_msg_message_dropped_request(Msg,
                                       <<>>,
                                       TrUserData).


encode_msg_message_dropped_request(#{} = M, Bin,
                                   TrUserData) ->
    B1 = case M of
             #{message := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= undefined -> Bin;
                        true ->
                            e_mfield_message_dropped_request_message(TrF1,
                                                                     <<Bin/binary,
                                                                       10>>,
                                                                     TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{reason := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false ->
                        e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_message_acked_request(Msg, TrUserData) ->
    encode_msg_message_acked_request(Msg, <<>>, TrUserData).


encode_msg_message_acked_request(#{} = M, Bin,
                                 TrUserData) ->
    B1 = case M of
             #{clientinfo := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= undefined -> Bin;
                        true ->
                            e_mfield_message_acked_request_clientinfo(TrF1,
                                                                      <<Bin/binary,
                                                                        10>>,
                                                                      TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{message := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= undefined -> B1;
                   true ->
                       e_mfield_message_acked_request_message(TrF2,
                                                              <<B1/binary, 18>>,
                                                              TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_empty_success(_Msg, _TrUserData) -> <<>>.

encode_msg_valued_response(Msg, TrUserData) ->
    encode_msg_valued_response(Msg, <<>>, TrUserData).


encode_msg_valued_response(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{type := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 'IGNORE'; TrF1 =:= 0 -> Bin;
                        true ->
                            'e_enum_valued_response.ResponsedType'(TrF1,
                                                                   <<Bin/binary,
                                                                     8>>,
                                                                   TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{value := F2} ->
            case id(F2, TrUserData) of
                {bool_result, TF2} ->
                    begin
                        TrTF2 = id(TF2, TrUserData),
                        e_type_bool(TrTF2, <<B1/binary, 24>>, TrUserData)
                    end;
                {message, TF2} ->
                    begin
                        TrTF2 = id(TF2, TrUserData),
                        e_mfield_valued_response_message(TrTF2,
                                                         <<B1/binary, 34>>,
                                                         TrUserData)
                    end
            end;
        _ -> B1
    end.

encode_msg_broker_info(Msg, TrUserData) ->
    encode_msg_broker_info(Msg, <<>>, TrUserData).


encode_msg_broker_info(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{version := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{sysdescr := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false ->
                             e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{uptime := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case is_empty_string(TrF3) of
                         true -> B2;
                         false ->
                             e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{datetime := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                case is_empty_string(TrF4) of
                    true -> B3;
                    false ->
                        e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                end
            end;
        _ -> B3
    end.

encode_msg_hook_spec(Msg, TrUserData) ->
    encode_msg_hook_spec(Msg, <<>>, TrUserData).


encode_msg_hook_spec(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{name := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{topics := F2} ->
            TrF2 = id(F2, TrUserData),
            if TrF2 == [] -> B1;
               true -> e_field_hook_spec_topics(TrF2, B1, TrUserData)
            end;
        _ -> B1
    end.

encode_msg_conn_info(Msg, TrUserData) ->
    encode_msg_conn_info(Msg, <<>>, TrUserData).


encode_msg_conn_info(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{node := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{clientid := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false ->
                             e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{username := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case is_empty_string(TrF3) of
                         true -> B2;
                         false ->
                             e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{peerhost := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     case is_empty_string(TrF4) of
                         true -> B3;
                         false ->
                             e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    B5 = case M of
             #{sockport := F5} ->
                 begin
                     TrF5 = id(F5, TrUserData),
                     if TrF5 =:= 0 -> B4;
                        true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
                     end
                 end;
             _ -> B4
         end,
    B6 = case M of
             #{proto_name := F6} ->
                 begin
                     TrF6 = id(F6, TrUserData),
                     case is_empty_string(TrF6) of
                         true -> B5;
                         false ->
                             e_type_string(TrF6, <<B5/binary, 50>>, TrUserData)
                     end
                 end;
             _ -> B5
         end,
    B7 = case M of
             #{proto_ver := F7} ->
                 begin
                     TrF7 = id(F7, TrUserData),
                     case is_empty_string(TrF7) of
                         true -> B6;
                         false ->
                             e_type_string(TrF7, <<B6/binary, 58>>, TrUserData)
                     end
                 end;
             _ -> B6
         end,
    case M of
        #{keepalive := F8} ->
            begin
                TrF8 = id(F8, TrUserData),
                if TrF8 =:= 0 -> B7;
                   true -> e_varint(TrF8, <<B7/binary, 64>>, TrUserData)
                end
            end;
        _ -> B7
    end.

encode_msg_client_info(Msg, TrUserData) ->
    encode_msg_client_info(Msg, <<>>, TrUserData).


encode_msg_client_info(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{node := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{clientid := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false ->
                             e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{username := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case is_empty_string(TrF3) of
                         true -> B2;
                         false ->
                             e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{password := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     case is_empty_string(TrF4) of
                         true -> B3;
                         false ->
                             e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    B5 = case M of
             #{peerhost := F5} ->
                 begin
                     TrF5 = id(F5, TrUserData),
                     case is_empty_string(TrF5) of
                         true -> B4;
                         false ->
                             e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
                     end
                 end;
             _ -> B4
         end,
    B6 = case M of
             #{sockport := F6} ->
                 begin
                     TrF6 = id(F6, TrUserData),
                     if TrF6 =:= 0 -> B5;
                        true -> e_varint(TrF6, <<B5/binary, 48>>, TrUserData)
                     end
                 end;
             _ -> B5
         end,
    B7 = case M of
             #{protocol := F7} ->
                 begin
                     TrF7 = id(F7, TrUserData),
                     case is_empty_string(TrF7) of
                         true -> B6;
                         false ->
                             e_type_string(TrF7, <<B6/binary, 58>>, TrUserData)
                     end
                 end;
             _ -> B6
         end,
    B8 = case M of
             #{mountpoint := F8} ->
                 begin
                     TrF8 = id(F8, TrUserData),
                     case is_empty_string(TrF8) of
                         true -> B7;
                         false ->
                             e_type_string(TrF8, <<B7/binary, 66>>, TrUserData)
                     end
                 end;
             _ -> B7
         end,
    B9 = case M of
             #{is_superuser := F9} ->
                 begin
                     TrF9 = id(F9, TrUserData),
                     if TrF9 =:= false -> B8;
                        true -> e_type_bool(TrF9, <<B8/binary, 72>>, TrUserData)
                     end
                 end;
             _ -> B8
         end,
    case M of
        #{anonymous := F10} ->
            begin
                TrF10 = id(F10, TrUserData),
                if TrF10 =:= false -> B9;
                   true ->
                       e_type_bool(TrF10, <<B9/binary, 80>>, TrUserData)
                end
            end;
        _ -> B9
    end.

encode_msg_message(Msg, TrUserData) ->
    encode_msg_message(Msg, <<>>, TrUserData).


encode_msg_message(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{node := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{id := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false ->
                             e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{qos := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{from := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     case is_empty_string(TrF4) of
                         true -> B3;
                         false ->
                             e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    B5 = case M of
             #{topic := F5} ->
                 begin
                     TrF5 = id(F5, TrUserData),
                     case is_empty_string(TrF5) of
                         true -> B4;
                         false ->
                             e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
                     end
                 end;
             _ -> B4
         end,
    B6 = case M of
             #{payload := F6} ->
                 begin
                     TrF6 = id(F6, TrUserData),
                     case iolist_size(TrF6) of
                         0 -> B5;
                         _ -> e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData)
                     end
                 end;
             _ -> B5
         end,
    case M of
        #{timestamp := F7} ->
            begin
                TrF7 = id(F7, TrUserData),
                if TrF7 =:= 0 -> B6;
                   true -> e_varint(TrF7, <<B6/binary, 56>>, TrUserData)
                end
            end;
        _ -> B6
    end.

encode_msg_property(Msg, TrUserData) ->
    encode_msg_property(Msg, <<>>, TrUserData).


encode_msg_property(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{name := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{value := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false ->
                        e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_topic_filter(Msg, TrUserData) ->
    encode_msg_topic_filter(Msg, <<>>, TrUserData).


encode_msg_topic_filter(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{name := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false ->
                             e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{qos := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= 0 -> B1;
                   true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_sub_opts(Msg, TrUserData) ->
    encode_msg_sub_opts(Msg, <<>>, TrUserData).


encode_msg_sub_opts(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{qos := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{share := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false ->
                             e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{rh := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{rap := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     if TrF4 =:= 0 -> B3;
                        true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    case M of
        #{nl := F5} ->
            begin
                TrF5 = id(F5, TrUserData),
                if TrF5 =:= 0 -> B4;
                   true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
                end
            end;
        _ -> B4
    end.

e_mfield_provider_loaded_request_broker(Msg, Bin,
                                        TrUserData) ->
    SubBin = encode_msg_broker_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_loaded_response_hooks(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_hook_spec(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_loaded_response_hooks([Elem | Rest], Bin,
                              TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_loaded_response_hooks(id(Elem,
                                             TrUserData),
                                          Bin2,
                                          TrUserData),
    e_field_loaded_response_hooks(Rest, Bin3, TrUserData);
e_field_loaded_response_hooks([], Bin, _TrUserData) ->
    Bin.

e_mfield_client_connect_request_conninfo(Msg, Bin,
                                         TrUserData) ->
    SubBin = encode_msg_conn_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_client_connect_request_props(Msg, Bin,
                                      TrUserData) ->
    SubBin = encode_msg_property(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_client_connect_request_props([Elem | Rest], Bin,
                                     TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_client_connect_request_props(id(Elem,
                                                    TrUserData),
                                                 Bin2,
                                                 TrUserData),
    e_field_client_connect_request_props(Rest,
                                         Bin3,
                                         TrUserData);
e_field_client_connect_request_props([], Bin,
                                     _TrUserData) ->
    Bin.

e_mfield_client_connack_request_conninfo(Msg, Bin,
                                         TrUserData) ->
    SubBin = encode_msg_conn_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_client_connack_request_props(Msg, Bin,
                                      TrUserData) ->
    SubBin = encode_msg_property(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_client_connack_request_props([Elem | Rest], Bin,
                                     TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_client_connack_request_props(id(Elem,
                                                    TrUserData),
                                                 Bin2,
                                                 TrUserData),
    e_field_client_connack_request_props(Rest,
                                         Bin3,
                                         TrUserData);
e_field_client_connack_request_props([], Bin,
                                     _TrUserData) ->
    Bin.

e_mfield_client_connected_request_clientinfo(Msg, Bin,
                                             TrUserData) ->
    SubBin = encode_msg_client_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_client_disconnected_request_clientinfo(Msg,
                                                Bin, TrUserData) ->
    SubBin = encode_msg_client_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_client_authenticate_request_clientinfo(Msg,
                                                Bin, TrUserData) ->
    SubBin = encode_msg_client_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_client_check_acl_request_clientinfo(Msg, Bin,
                                             TrUserData) ->
    SubBin = encode_msg_client_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_client_subscribe_request_clientinfo(Msg, Bin,
                                             TrUserData) ->
    SubBin = encode_msg_client_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_client_subscribe_request_props(Msg, Bin,
                                        TrUserData) ->
    SubBin = encode_msg_property(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_client_subscribe_request_props([Elem | Rest],
                                       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_client_subscribe_request_props(id(Elem,
                                                      TrUserData),
                                                   Bin2,
                                                   TrUserData),
    e_field_client_subscribe_request_props(Rest,
                                           Bin3,
                                           TrUserData);
e_field_client_subscribe_request_props([], Bin,
                                       _TrUserData) ->
    Bin.

e_mfield_client_subscribe_request_topic_filters(Msg,
                                                Bin, TrUserData) ->
    SubBin = encode_msg_topic_filter(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_client_subscribe_request_topic_filters([Elem
                                                | Rest],
                                               Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 =
        e_mfield_client_subscribe_request_topic_filters(id(Elem,
                                                           TrUserData),
                                                        Bin2,
                                                        TrUserData),
    e_field_client_subscribe_request_topic_filters(Rest,
                                                   Bin3,
                                                   TrUserData);
e_field_client_subscribe_request_topic_filters([], Bin,
                                               _TrUserData) ->
    Bin.

e_mfield_client_unsubscribe_request_clientinfo(Msg, Bin,
                                               TrUserData) ->
    SubBin = encode_msg_client_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_client_unsubscribe_request_props(Msg, Bin,
                                          TrUserData) ->
    SubBin = encode_msg_property(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_client_unsubscribe_request_props([Elem | Rest],
                                         Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
        e_mfield_client_unsubscribe_request_props(id(Elem,
                                                     TrUserData),
                                                  Bin2,
                                                  TrUserData),
    e_field_client_unsubscribe_request_props(Rest,
                                             Bin3,
                                             TrUserData);
e_field_client_unsubscribe_request_props([], Bin,
                                         _TrUserData) ->
    Bin.

e_mfield_client_unsubscribe_request_topic_filters(Msg,
                                                  Bin, TrUserData) ->
    SubBin = encode_msg_topic_filter(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_client_unsubscribe_request_topic_filters([Elem
                                                  | Rest],
                                                 Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 =
        e_mfield_client_unsubscribe_request_topic_filters(id(Elem,
                                                             TrUserData),
                                                          Bin2,
                                                          TrUserData),
    e_field_client_unsubscribe_request_topic_filters(Rest,
                                                     Bin3,
                                                     TrUserData);
e_field_client_unsubscribe_request_topic_filters([],
                                                 Bin, _TrUserData) ->
    Bin.

e_mfield_session_created_request_clientinfo(Msg, Bin,
                                            TrUserData) ->
    SubBin = encode_msg_client_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_session_subscribed_request_clientinfo(Msg, Bin,
                                               TrUserData) ->
    SubBin = encode_msg_client_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_session_subscribed_request_subopts(Msg, Bin,
                                            TrUserData) ->
    SubBin = encode_msg_sub_opts(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_session_unsubscribed_request_clientinfo(Msg,
                                                 Bin, TrUserData) ->
    SubBin = encode_msg_client_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_session_resumed_request_clientinfo(Msg, Bin,
                                            TrUserData) ->
    SubBin = encode_msg_client_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_session_discarded_request_clientinfo(Msg, Bin,
                                              TrUserData) ->
    SubBin = encode_msg_client_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_session_takeovered_request_clientinfo(Msg, Bin,
                                               TrUserData) ->
    SubBin = encode_msg_client_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_session_terminated_request_clientinfo(Msg, Bin,
                                               TrUserData) ->
    SubBin = encode_msg_client_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_message_publish_request_message(Msg, Bin,
                                         TrUserData) ->
    SubBin = encode_msg_message(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_message_delivered_request_clientinfo(Msg, Bin,
                                              TrUserData) ->
    SubBin = encode_msg_client_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_message_delivered_request_message(Msg, Bin,
                                           TrUserData) ->
    SubBin = encode_msg_message(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_message_dropped_request_message(Msg, Bin,
                                         TrUserData) ->
    SubBin = encode_msg_message(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_message_acked_request_clientinfo(Msg, Bin,
                                          TrUserData) ->
    SubBin = encode_msg_client_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_message_acked_request_message(Msg, Bin,
                                       TrUserData) ->
    SubBin = encode_msg_message(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_valued_response_message(Msg, Bin,
                                 TrUserData) ->
    SubBin = encode_msg_message(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_hook_spec_topics([Elem | Rest], Bin,
                         TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData),
                         Bin2,
                         TrUserData),
    e_field_hook_spec_topics(Rest, Bin3, TrUserData);
e_field_hook_spec_topics([], Bin, _TrUserData) -> Bin.

'e_enum_client_check_acl_request.AclReqType'('PUBLISH',
                                             Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_client_check_acl_request.AclReqType'('SUBSCRIBE',
                                             Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_client_check_acl_request.AclReqType'(V, Bin,
                                             _TrUserData) ->
    e_varint(V, Bin).

'e_enum_valued_response.ResponsedType'('IGNORE', Bin,
                                       _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_valued_response.ResponsedType'('CONTINUE', Bin,
                                       _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_valued_response.ResponsedType'('STOP_AND_RETURN',
                                       Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_valued_response.ResponsedType'(V, Bin,
                                       _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(provider_loaded_request, Bin,
                  TrUserData) ->
    id(decode_msg_provider_loaded_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(loaded_response, Bin, TrUserData) ->
    id(decode_msg_loaded_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(provider_unloaded_request, Bin,
                  TrUserData) ->
    id(decode_msg_provider_unloaded_request(Bin,
                                            TrUserData),
       TrUserData);
decode_msg_2_doit(client_connect_request, Bin,
                  TrUserData) ->
    id(decode_msg_client_connect_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(client_connack_request, Bin,
                  TrUserData) ->
    id(decode_msg_client_connack_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(client_connected_request, Bin,
                  TrUserData) ->
    id(decode_msg_client_connected_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(client_disconnected_request, Bin,
                  TrUserData) ->
    id(decode_msg_client_disconnected_request(Bin,
                                              TrUserData),
       TrUserData);
decode_msg_2_doit(client_authenticate_request, Bin,
                  TrUserData) ->
    id(decode_msg_client_authenticate_request(Bin,
                                              TrUserData),
       TrUserData);
decode_msg_2_doit(client_check_acl_request, Bin,
                  TrUserData) ->
    id(decode_msg_client_check_acl_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(client_subscribe_request, Bin,
                  TrUserData) ->
    id(decode_msg_client_subscribe_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(client_unsubscribe_request, Bin,
                  TrUserData) ->
    id(decode_msg_client_unsubscribe_request(Bin,
                                             TrUserData),
       TrUserData);
decode_msg_2_doit(session_created_request, Bin,
                  TrUserData) ->
    id(decode_msg_session_created_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(session_subscribed_request, Bin,
                  TrUserData) ->
    id(decode_msg_session_subscribed_request(Bin,
                                             TrUserData),
       TrUserData);
decode_msg_2_doit(session_unsubscribed_request, Bin,
                  TrUserData) ->
    id(decode_msg_session_unsubscribed_request(Bin,
                                               TrUserData),
       TrUserData);
decode_msg_2_doit(session_resumed_request, Bin,
                  TrUserData) ->
    id(decode_msg_session_resumed_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(session_discarded_request, Bin,
                  TrUserData) ->
    id(decode_msg_session_discarded_request(Bin,
                                            TrUserData),
       TrUserData);
decode_msg_2_doit(session_takeovered_request, Bin,
                  TrUserData) ->
    id(decode_msg_session_takeovered_request(Bin,
                                             TrUserData),
       TrUserData);
decode_msg_2_doit(session_terminated_request, Bin,
                  TrUserData) ->
    id(decode_msg_session_terminated_request(Bin,
                                             TrUserData),
       TrUserData);
decode_msg_2_doit(message_publish_request, Bin,
                  TrUserData) ->
    id(decode_msg_message_publish_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(message_delivered_request, Bin,
                  TrUserData) ->
    id(decode_msg_message_delivered_request(Bin,
                                            TrUserData),
       TrUserData);
decode_msg_2_doit(message_dropped_request, Bin,
                  TrUserData) ->
    id(decode_msg_message_dropped_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(message_acked_request, Bin,
                  TrUserData) ->
    id(decode_msg_message_acked_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(empty_success, Bin, TrUserData) ->
    id(decode_msg_empty_success(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(valued_response, Bin, TrUserData) ->
    id(decode_msg_valued_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(broker_info, Bin, TrUserData) ->
    id(decode_msg_broker_info(Bin, TrUserData), TrUserData);
decode_msg_2_doit(hook_spec, Bin, TrUserData) ->
    id(decode_msg_hook_spec(Bin, TrUserData), TrUserData);
decode_msg_2_doit(conn_info, Bin, TrUserData) ->
    id(decode_msg_conn_info(Bin, TrUserData), TrUserData);
decode_msg_2_doit(client_info, Bin, TrUserData) ->
    id(decode_msg_client_info(Bin, TrUserData), TrUserData);
decode_msg_2_doit(message, Bin, TrUserData) ->
    id(decode_msg_message(Bin, TrUserData), TrUserData);
decode_msg_2_doit(property, Bin, TrUserData) ->
    id(decode_msg_property(Bin, TrUserData), TrUserData);
decode_msg_2_doit(topic_filter, Bin, TrUserData) ->
    id(decode_msg_topic_filter(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(sub_opts, Bin, TrUserData) ->
    id(decode_msg_sub_opts(Bin, TrUserData), TrUserData).



decode_msg_provider_loaded_request(Bin, TrUserData) ->
    dfp_read_field_def_provider_loaded_request(Bin,
                                               0,
                                               0,
                                               id('$undef', TrUserData),
                                               TrUserData).

dfp_read_field_def_provider_loaded_request(<<10,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, TrUserData) ->
    d_field_provider_loaded_request_broker(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData);
dfp_read_field_def_provider_loaded_request(<<>>, 0, 0,
                                           F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{broker => F@_1}
    end;
dfp_read_field_def_provider_loaded_request(Other, Z1,
                                           Z2, F@_1, TrUserData) ->
    dg_read_field_def_provider_loaded_request(Other,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              TrUserData).

dg_read_field_def_provider_loaded_request(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_provider_loaded_request(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              TrUserData);
dg_read_field_def_provider_loaded_request(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_provider_loaded_request_broker(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_provider_loaded_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                1 ->
                    skip_64_provider_loaded_request(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData);
                2 ->
                    skip_length_delimited_provider_loaded_request(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  TrUserData);
                3 ->
                    skip_group_provider_loaded_request(Rest,
                                                       Key bsr 3,
                                                       0,
                                                       F@_1,
                                                       TrUserData);
                5 ->
                    skip_32_provider_loaded_request(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData)
            end
    end;
dg_read_field_def_provider_loaded_request(<<>>, 0, 0,
                                          F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{broker => F@_1}
    end.

d_field_provider_loaded_request_broker(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_provider_loaded_request_broker(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           TrUserData);
d_field_provider_loaded_request_broker(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_broker_info(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_provider_loaded_request(RestF,
                                               0,
                                               0,
                                               if Prev == '$undef' -> NewFValue;
                                                  true ->
                                                      merge_msg_broker_info(Prev,
                                                                            NewFValue,
                                                                            TrUserData)
                                               end,
                                               TrUserData).

skip_varint_provider_loaded_request(<<1:1, _:7,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_provider_loaded_request(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        TrUserData);
skip_varint_provider_loaded_request(<<0:1, _:7,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_provider_loaded_request(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

skip_length_delimited_provider_loaded_request(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_provider_loaded_request(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  TrUserData);
skip_length_delimited_provider_loaded_request(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_provider_loaded_request(Rest2,
                                               0,
                                               0,
                                               F@_1,
                                               TrUserData).

skip_group_provider_loaded_request(Bin, FNum, Z2, F@_1,
                                   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_provider_loaded_request(Rest,
                                               0,
                                               Z2,
                                               F@_1,
                                               TrUserData).

skip_32_provider_loaded_request(<<_:32, Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_provider_loaded_request(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

skip_64_provider_loaded_request(<<_:64, Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_provider_loaded_request(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

decode_msg_loaded_response(Bin, TrUserData) ->
    dfp_read_field_def_loaded_response(Bin,
                                       0,
                                       0,
                                       id([], TrUserData),
                                       TrUserData).

dfp_read_field_def_loaded_response(<<10, Rest/binary>>,
                                   Z1, Z2, F@_1, TrUserData) ->
    d_field_loaded_response_hooks(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  TrUserData);
dfp_read_field_def_loaded_response(<<>>, 0, 0, R1,
                                   TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{hooks => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_loaded_response(Other, Z1, Z2, F@_1,
                                   TrUserData) ->
    dg_read_field_def_loaded_response(Other,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      TrUserData).

dg_read_field_def_loaded_response(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_loaded_response(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      TrUserData);
dg_read_field_def_loaded_response(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_loaded_response_hooks(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_loaded_response(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData);
                1 ->
                    skip_64_loaded_response(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_loaded_response(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          TrUserData);
                3 ->
                    skip_group_loaded_response(Rest,
                                               Key bsr 3,
                                               0,
                                               F@_1,
                                               TrUserData);
                5 ->
                    skip_32_loaded_response(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_loaded_response(<<>>, 0, 0, R1,
                                  TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{hooks => lists_reverse(R1, TrUserData)}
    end.

d_field_loaded_response_hooks(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_loaded_response_hooks(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  TrUserData);
d_field_loaded_response_hooks(<<0:1, X:7, Rest/binary>>,
                              N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_hook_spec(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_loaded_response(RestF,
                                       0,
                                       0,
                                       cons(NewFValue, Prev, TrUserData),
                                       TrUserData).

skip_varint_loaded_response(<<1:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, TrUserData) ->
    skip_varint_loaded_response(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                TrUserData);
skip_varint_loaded_response(<<0:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_loaded_response(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData).

skip_length_delimited_loaded_response(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_loaded_response(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          TrUserData);
skip_length_delimited_loaded_response(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_loaded_response(Rest2,
                                       0,
                                       0,
                                       F@_1,
                                       TrUserData).

skip_group_loaded_response(Bin, FNum, Z2, F@_1,
                           TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_loaded_response(Rest,
                                       0,
                                       Z2,
                                       F@_1,
                                       TrUserData).

skip_32_loaded_response(<<_:32, Rest/binary>>, Z1, Z2,
                        F@_1, TrUserData) ->
    dfp_read_field_def_loaded_response(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData).

skip_64_loaded_response(<<_:64, Rest/binary>>, Z1, Z2,
                        F@_1, TrUserData) ->
    dfp_read_field_def_loaded_response(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData).

decode_msg_provider_unloaded_request(Bin, TrUserData) ->
    dfp_read_field_def_provider_unloaded_request(Bin,
                                                 0,
                                                 0,
                                                 TrUserData).

dfp_read_field_def_provider_unloaded_request(<<>>, 0, 0,
                                             _) ->
    #{};
dfp_read_field_def_provider_unloaded_request(Other, Z1,
                                             Z2, TrUserData) ->
    dg_read_field_def_provider_unloaded_request(Other,
                                                Z1,
                                                Z2,
                                                TrUserData).

dg_read_field_def_provider_unloaded_request(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_provider_unloaded_request(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                TrUserData);
dg_read_field_def_provider_unloaded_request(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 ->
            skip_varint_provider_unloaded_request(Rest,
                                                  0,
                                                  0,
                                                  TrUserData);
        1 ->
            skip_64_provider_unloaded_request(Rest,
                                              0,
                                              0,
                                              TrUserData);
        2 ->
            skip_length_delimited_provider_unloaded_request(Rest,
                                                            0,
                                                            0,
                                                            TrUserData);
        3 ->
            skip_group_provider_unloaded_request(Rest,
                                                 Key bsr 3,
                                                 0,
                                                 TrUserData);
        5 ->
            skip_32_provider_unloaded_request(Rest,
                                              0,
                                              0,
                                              TrUserData)
    end;
dg_read_field_def_provider_unloaded_request(<<>>, 0, 0,
                                            _) ->
    #{}.

skip_varint_provider_unloaded_request(<<1:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, TrUserData) ->
    skip_varint_provider_unloaded_request(Rest,
                                          Z1,
                                          Z2,
                                          TrUserData);
skip_varint_provider_unloaded_request(<<0:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, TrUserData) ->
    dfp_read_field_def_provider_unloaded_request(Rest,
                                                 Z1,
                                                 Z2,
                                                 TrUserData).

skip_length_delimited_provider_unloaded_request(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_provider_unloaded_request(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    TrUserData);
skip_length_delimited_provider_unloaded_request(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_provider_unloaded_request(Rest2,
                                                 0,
                                                 0,
                                                 TrUserData).

skip_group_provider_unloaded_request(Bin, FNum, Z2,
                                     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_provider_unloaded_request(Rest,
                                                 0,
                                                 Z2,
                                                 TrUserData).

skip_32_provider_unloaded_request(<<_:32, Rest/binary>>,
                                  Z1, Z2, TrUserData) ->
    dfp_read_field_def_provider_unloaded_request(Rest,
                                                 Z1,
                                                 Z2,
                                                 TrUserData).

skip_64_provider_unloaded_request(<<_:64, Rest/binary>>,
                                  Z1, Z2, TrUserData) ->
    dfp_read_field_def_provider_unloaded_request(Rest,
                                                 Z1,
                                                 Z2,
                                                 TrUserData).

decode_msg_client_connect_request(Bin, TrUserData) ->
    dfp_read_field_def_client_connect_request(Bin,
                                              0,
                                              0,
                                              id('$undef', TrUserData),
                                              id([], TrUserData),
                                              TrUserData).

dfp_read_field_def_client_connect_request(<<10,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_client_connect_request_conninfo(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
dfp_read_field_def_client_connect_request(<<18,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_client_connect_request_props(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
dfp_read_field_def_client_connect_request(<<>>, 0, 0,
                                          F@_1, R1, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{conninfo => F@_1}
         end,
    if R1 == '$undef' -> S2;
       true -> S2#{props => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_client_connect_request(Other, Z1, Z2,
                                          F@_1, F@_2, TrUserData) ->
    dg_read_field_def_client_connect_request(Other,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData).

dg_read_field_def_client_connect_request(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_client_connect_request(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
dg_read_field_def_client_connect_request(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_client_connect_request_conninfo(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
        18 ->
            d_field_client_connect_request_props(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_client_connect_request(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData);
                1 ->
                    skip_64_client_connect_request(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData);
                2 ->
                    skip_length_delimited_client_connect_request(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 TrUserData);
                3 ->
                    skip_group_client_connect_request(Rest,
                                                      Key bsr 3,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData);
                5 ->
                    skip_32_client_connect_request(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData)
            end
    end;
dg_read_field_def_client_connect_request(<<>>, 0, 0,
                                         F@_1, R1, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{conninfo => F@_1}
         end,
    if R1 == '$undef' -> S2;
       true -> S2#{props => lists_reverse(R1, TrUserData)}
    end.

d_field_client_connect_request_conninfo(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_client_connect_request_conninfo(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
d_field_client_connect_request_conninfo(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_conn_info(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_client_connect_request(RestF,
                                              0,
                                              0,
                                              if Prev == '$undef' -> NewFValue;
                                                 true ->
                                                     merge_msg_conn_info(Prev,
                                                                         NewFValue,
                                                                         TrUserData)
                                              end,
                                              F@_2,
                                              TrUserData).

d_field_client_connect_request_props(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_client_connect_request_props(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
d_field_client_connect_request_props(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_property(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_client_connect_request(RestF,
                                              0,
                                              0,
                                              F@_1,
                                              cons(NewFValue, Prev, TrUserData),
                                              TrUserData).

skip_varint_client_connect_request(<<1:1, _:7,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_client_connect_request(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData);
skip_varint_client_connect_request(<<0:1, _:7,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_client_connect_request(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              TrUserData).

skip_length_delimited_client_connect_request(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_client_connect_request(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
skip_length_delimited_client_connect_request(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_client_connect_request(Rest2,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              TrUserData).

skip_group_client_connect_request(Bin, FNum, Z2, F@_1,
                                  F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_client_connect_request(Rest,
                                              0,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              TrUserData).

skip_32_client_connect_request(<<_:32, Rest/binary>>,
                               Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_client_connect_request(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              TrUserData).

skip_64_client_connect_request(<<_:64, Rest/binary>>,
                               Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_client_connect_request(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              TrUserData).

decode_msg_client_connack_request(Bin, TrUserData) ->
    dfp_read_field_def_client_connack_request(Bin,
                                              0,
                                              0,
                                              id('$undef', TrUserData),
                                              id(<<>>, TrUserData),
                                              id([], TrUserData),
                                              TrUserData).

dfp_read_field_def_client_connack_request(<<10,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, F@_3,
                                          TrUserData) ->
    d_field_client_connack_request_conninfo(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            TrUserData);
dfp_read_field_def_client_connack_request(<<18,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, F@_3,
                                          TrUserData) ->
    d_field_client_connack_request_result_code(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData);
dfp_read_field_def_client_connack_request(<<26,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, F@_3,
                                          TrUserData) ->
    d_field_client_connack_request_props(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         TrUserData);
dfp_read_field_def_client_connack_request(<<>>, 0, 0,
                                          F@_1, F@_2, R1, TrUserData) ->
    S1 = #{result_code => F@_2},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{conninfo => F@_1}
         end,
    if R1 == '$undef' -> S2;
       true -> S2#{props => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_client_connack_request(Other, Z1, Z2,
                                          F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_client_connack_request(Other,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             TrUserData).

dg_read_field_def_client_connack_request(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_client_connack_request(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             TrUserData);
dg_read_field_def_client_connack_request(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, F@_3,
                                         TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_client_connack_request_conninfo(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    TrUserData);
        18 ->
            d_field_client_connack_request_result_code(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       TrUserData);
        26 ->
            d_field_client_connack_request_props(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_client_connack_request(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       TrUserData);
                1 ->
                    skip_64_client_connack_request(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   TrUserData);
                2 ->
                    skip_length_delimited_client_connack_request(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 TrUserData);
                3 ->
                    skip_group_client_connack_request(Rest,
                                                      Key bsr 3,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      TrUserData);
                5 ->
                    skip_32_client_connack_request(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   TrUserData)
            end
    end;
dg_read_field_def_client_connack_request(<<>>, 0, 0,
                                         F@_1, F@_2, R1, TrUserData) ->
    S1 = #{result_code => F@_2},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{conninfo => F@_1}
         end,
    if R1 == '$undef' -> S2;
       true -> S2#{props => lists_reverse(R1, TrUserData)}
    end.

d_field_client_connack_request_conninfo(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_client_connack_request_conninfo(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            TrUserData);
d_field_client_connack_request_conninfo(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_conn_info(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_client_connack_request(RestF,
                                              0,
                                              0,
                                              if Prev == '$undef' -> NewFValue;
                                                 true ->
                                                     merge_msg_conn_info(Prev,
                                                                         NewFValue,
                                                                         TrUserData)
                                              end,
                                              F@_2,
                                              F@_3,
                                              TrUserData).

d_field_client_connack_request_result_code(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_client_connack_request_result_code(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData);
d_field_client_connack_request_result_code(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_client_connack_request(RestF,
                                              0,
                                              0,
                                              F@_1,
                                              NewFValue,
                                              F@_3,
                                              TrUserData).

d_field_client_connack_request_props(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_client_connack_request_props(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         TrUserData);
d_field_client_connack_request_props(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_property(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_client_connack_request(RestF,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              cons(NewFValue, Prev, TrUserData),
                                              TrUserData).

skip_varint_client_connack_request(<<1:1, _:7,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_client_connack_request(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData);
skip_varint_client_connack_request(<<0:1, _:7,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_client_connack_request(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              TrUserData).

skip_length_delimited_client_connack_request(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3,
                                             TrUserData)
    when N < 57 ->
    skip_length_delimited_client_connack_request(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 TrUserData);
skip_length_delimited_client_connack_request(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3,
                                             TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_client_connack_request(Rest2,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              TrUserData).

skip_group_client_connack_request(Bin, FNum, Z2, F@_1,
                                  F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_client_connack_request(Rest,
                                              0,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              TrUserData).

skip_32_client_connack_request(<<_:32, Rest/binary>>,
                               Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_client_connack_request(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              TrUserData).

skip_64_client_connack_request(<<_:64, Rest/binary>>,
                               Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_client_connack_request(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              TrUserData).

decode_msg_client_connected_request(Bin, TrUserData) ->
    dfp_read_field_def_client_connected_request(Bin,
                                                0,
                                                0,
                                                id('$undef', TrUserData),
                                                TrUserData).

dfp_read_field_def_client_connected_request(<<10,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, TrUserData) ->
    d_field_client_connected_request_clientinfo(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData);
dfp_read_field_def_client_connected_request(<<>>, 0, 0,
                                            F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_1}
    end;
dfp_read_field_def_client_connected_request(Other, Z1,
                                            Z2, F@_1, TrUserData) ->
    dg_read_field_def_client_connected_request(Other,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

dg_read_field_def_client_connected_request(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_client_connected_request(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               TrUserData);
dg_read_field_def_client_connected_request(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_client_connected_request_clientinfo(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_client_connected_request(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         TrUserData);
                1 ->
                    skip_64_client_connected_request(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
                2 ->
                    skip_length_delimited_client_connected_request(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   TrUserData);
                3 ->
                    skip_group_client_connected_request(Rest,
                                                        Key bsr 3,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                5 ->
                    skip_32_client_connected_request(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData)
            end
    end;
dg_read_field_def_client_connected_request(<<>>, 0, 0,
                                           F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_1}
    end.

d_field_client_connected_request_clientinfo(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_client_connected_request_clientinfo(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                TrUserData);
d_field_client_connected_request_clientinfo(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_client_info(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_client_connected_request(RestF,
                                                0,
                                                0,
                                                if Prev == '$undef' ->
                                                       NewFValue;
                                                   true ->
                                                       merge_msg_client_info(Prev,
                                                                             NewFValue,
                                                                             TrUserData)
                                                end,
                                                TrUserData).

skip_varint_client_connected_request(<<1:1, _:7,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_client_connected_request(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         TrUserData);
skip_varint_client_connected_request(<<0:1, _:7,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_client_connected_request(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_length_delimited_client_connected_request(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_client_connected_request(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   TrUserData);
skip_length_delimited_client_connected_request(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_client_connected_request(Rest2,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData).

skip_group_client_connected_request(Bin, FNum, Z2, F@_1,
                                    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_client_connected_request(Rest,
                                                0,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_32_client_connected_request(<<_:32, Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_client_connected_request(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_64_client_connected_request(<<_:64, Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_client_connected_request(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

decode_msg_client_disconnected_request(Bin,
                                       TrUserData) ->
    dfp_read_field_def_client_disconnected_request(Bin,
                                                   0,
                                                   0,
                                                   id('$undef', TrUserData),
                                                   id(<<>>, TrUserData),
                                                   TrUserData).

dfp_read_field_def_client_disconnected_request(<<10,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2,
                                               TrUserData) ->
    d_field_client_disconnected_request_clientinfo(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData);
dfp_read_field_def_client_disconnected_request(<<18,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2,
                                               TrUserData) ->
    d_field_client_disconnected_request_reason(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
dfp_read_field_def_client_disconnected_request(<<>>, 0,
                                               0, F@_1, F@_2, _) ->
    S1 = #{reason => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_1}
    end;
dfp_read_field_def_client_disconnected_request(Other,
                                               Z1, Z2, F@_1, F@_2,
                                               TrUserData) ->
    dg_read_field_def_client_disconnected_request(Other,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData).

dg_read_field_def_client_disconnected_request(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_client_disconnected_request(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
dg_read_field_def_client_disconnected_request(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_client_disconnected_request_clientinfo(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           TrUserData);
        18 ->
            d_field_client_disconnected_request_reason(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_client_disconnected_request(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            TrUserData);
                1 ->
                    skip_64_client_disconnected_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
                2 ->
                    skip_length_delimited_client_disconnected_request(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      F@_2,
                                                                      TrUserData);
                3 ->
                    skip_group_client_disconnected_request(Rest,
                                                           Key bsr 3,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           TrUserData);
                5 ->
                    skip_32_client_disconnected_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData)
            end
    end;
dg_read_field_def_client_disconnected_request(<<>>, 0,
                                              0, F@_1, F@_2, _) ->
    S1 = #{reason => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_1}
    end.

d_field_client_disconnected_request_clientinfo(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_client_disconnected_request_clientinfo(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData);
d_field_client_disconnected_request_clientinfo(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, Prev, F@_2,
                                               TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_client_info(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_client_disconnected_request(RestF,
                                                   0,
                                                   0,
                                                   if Prev == '$undef' ->
                                                          NewFValue;
                                                      true ->
                                                          merge_msg_client_info(Prev,
                                                                                NewFValue,
                                                                                TrUserData)
                                                   end,
                                                   F@_2,
                                                   TrUserData).

d_field_client_disconnected_request_reason(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_client_disconnected_request_reason(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
d_field_client_disconnected_request_reason(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_client_disconnected_request(RestF,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   NewFValue,
                                                   TrUserData).

skip_varint_client_disconnected_request(<<1:1, _:7,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_client_disconnected_request(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
skip_varint_client_disconnected_request(<<0:1, _:7,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_client_disconnected_request(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

skip_length_delimited_client_disconnected_request(<<1:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2,
                                                  TrUserData)
    when N < 57 ->
    skip_length_delimited_client_disconnected_request(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData);
skip_length_delimited_client_disconnected_request(<<0:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2,
                                                  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_client_disconnected_request(Rest2,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

skip_group_client_disconnected_request(Bin, FNum, Z2,
                                       F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_client_disconnected_request(Rest,
                                                   0,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

skip_32_client_disconnected_request(<<_:32,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_client_disconnected_request(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

skip_64_client_disconnected_request(<<_:64,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_client_disconnected_request(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

decode_msg_client_authenticate_request(Bin,
                                       TrUserData) ->
    dfp_read_field_def_client_authenticate_request(Bin,
                                                   0,
                                                   0,
                                                   id('$undef', TrUserData),
                                                   id(false, TrUserData),
                                                   TrUserData).

dfp_read_field_def_client_authenticate_request(<<10,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2,
                                               TrUserData) ->
    d_field_client_authenticate_request_clientinfo(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData);
dfp_read_field_def_client_authenticate_request(<<16,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2,
                                               TrUserData) ->
    d_field_client_authenticate_request_result(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
dfp_read_field_def_client_authenticate_request(<<>>, 0,
                                               0, F@_1, F@_2, _) ->
    S1 = #{result => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_1}
    end;
dfp_read_field_def_client_authenticate_request(Other,
                                               Z1, Z2, F@_1, F@_2,
                                               TrUserData) ->
    dg_read_field_def_client_authenticate_request(Other,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData).

dg_read_field_def_client_authenticate_request(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_client_authenticate_request(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
dg_read_field_def_client_authenticate_request(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_client_authenticate_request_clientinfo(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           TrUserData);
        16 ->
            d_field_client_authenticate_request_result(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_client_authenticate_request(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            TrUserData);
                1 ->
                    skip_64_client_authenticate_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
                2 ->
                    skip_length_delimited_client_authenticate_request(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      F@_2,
                                                                      TrUserData);
                3 ->
                    skip_group_client_authenticate_request(Rest,
                                                           Key bsr 3,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           TrUserData);
                5 ->
                    skip_32_client_authenticate_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData)
            end
    end;
dg_read_field_def_client_authenticate_request(<<>>, 0,
                                              0, F@_1, F@_2, _) ->
    S1 = #{result => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_1}
    end.

d_field_client_authenticate_request_clientinfo(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_client_authenticate_request_clientinfo(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData);
d_field_client_authenticate_request_clientinfo(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, Prev, F@_2,
                                               TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_client_info(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_client_authenticate_request(RestF,
                                                   0,
                                                   0,
                                                   if Prev == '$undef' ->
                                                          NewFValue;
                                                      true ->
                                                          merge_msg_client_info(Prev,
                                                                                NewFValue,
                                                                                TrUserData)
                                                   end,
                                                   F@_2,
                                                   TrUserData).

d_field_client_authenticate_request_result(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_client_authenticate_request_result(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
d_field_client_authenticate_request_result(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_client_authenticate_request(RestF,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   NewFValue,
                                                   TrUserData).

skip_varint_client_authenticate_request(<<1:1, _:7,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_client_authenticate_request(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
skip_varint_client_authenticate_request(<<0:1, _:7,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_client_authenticate_request(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

skip_length_delimited_client_authenticate_request(<<1:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2,
                                                  TrUserData)
    when N < 57 ->
    skip_length_delimited_client_authenticate_request(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData);
skip_length_delimited_client_authenticate_request(<<0:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2,
                                                  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_client_authenticate_request(Rest2,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

skip_group_client_authenticate_request(Bin, FNum, Z2,
                                       F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_client_authenticate_request(Rest,
                                                   0,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

skip_32_client_authenticate_request(<<_:32,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_client_authenticate_request(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

skip_64_client_authenticate_request(<<_:64,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_client_authenticate_request(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

decode_msg_client_check_acl_request(Bin, TrUserData) ->
    dfp_read_field_def_client_check_acl_request(Bin,
                                                0,
                                                0,
                                                id('$undef', TrUserData),
                                                id('PUBLISH', TrUserData),
                                                id(<<>>, TrUserData),
                                                id(false, TrUserData),
                                                TrUserData).

dfp_read_field_def_client_check_acl_request(<<10,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                            TrUserData) ->
    d_field_client_check_acl_request_clientinfo(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData);
dfp_read_field_def_client_check_acl_request(<<16,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                            TrUserData) ->
    d_field_client_check_acl_request_type(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          TrUserData);
dfp_read_field_def_client_check_acl_request(<<26,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                            TrUserData) ->
    d_field_client_check_acl_request_topic(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           TrUserData);
dfp_read_field_def_client_check_acl_request(<<32,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                            TrUserData) ->
    d_field_client_check_acl_request_result(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            TrUserData);
dfp_read_field_def_client_check_acl_request(<<>>, 0, 0,
                                            F@_1, F@_2, F@_3, F@_4, _) ->
    S1 = #{type => F@_2, topic => F@_3, result => F@_4},
    if F@_1 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_1}
    end;
dfp_read_field_def_client_check_acl_request(Other, Z1,
                                            Z2, F@_1, F@_2, F@_3, F@_4,
                                            TrUserData) ->
    dg_read_field_def_client_check_acl_request(Other,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               TrUserData).

dg_read_field_def_client_check_acl_request(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, F@_2, F@_3, F@_4,
                                           TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_client_check_acl_request(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               TrUserData);
dg_read_field_def_client_check_acl_request(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, F@_2, F@_3, F@_4,
                                           TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_client_check_acl_request_clientinfo(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        TrUserData);
        16 ->
            d_field_client_check_acl_request_type(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  TrUserData);
        26 ->
            d_field_client_check_acl_request_topic(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   TrUserData);
        32 ->
            d_field_client_check_acl_request_result(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_client_check_acl_request(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         TrUserData);
                1 ->
                    skip_64_client_check_acl_request(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     TrUserData);
                2 ->
                    skip_length_delimited_client_check_acl_request(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   F@_2,
                                                                   F@_3,
                                                                   F@_4,
                                                                   TrUserData);
                3 ->
                    skip_group_client_check_acl_request(Rest,
                                                        Key bsr 3,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        TrUserData);
                5 ->
                    skip_32_client_check_acl_request(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     TrUserData)
            end
    end;
dg_read_field_def_client_check_acl_request(<<>>, 0, 0,
                                           F@_1, F@_2, F@_3, F@_4, _) ->
    S1 = #{type => F@_2, topic => F@_3, result => F@_4},
    if F@_1 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_1}
    end.

d_field_client_check_acl_request_clientinfo(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4,
                                            TrUserData)
    when N < 57 ->
    d_field_client_check_acl_request_clientinfo(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData);
d_field_client_check_acl_request_clientinfo(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, Prev, F@_2, F@_3, F@_4,
                                            TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_client_info(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_client_check_acl_request(RestF,
                                                0,
                                                0,
                                                if Prev == '$undef' ->
                                                       NewFValue;
                                                   true ->
                                                       merge_msg_client_info(Prev,
                                                                             NewFValue,
                                                                             TrUserData)
                                                end,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData).

d_field_client_check_acl_request_type(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, F@_3, F@_4,
                                      TrUserData)
    when N < 57 ->
    d_field_client_check_acl_request_type(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          TrUserData);
d_field_client_check_acl_request_type(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, _, F@_3, F@_4,
                                      TrUserData) ->
    {NewFValue, RestF} =
        {id('d_enum_client_check_acl_request.AclReqType'(begin
                                                             <<Res:32/signed-native>> =
                                                                 <<(X bsl N +
                                                                        Acc):32/unsigned-native>>,
                                                             id(Res, TrUserData)
                                                         end),
            TrUserData),
         Rest},
    dfp_read_field_def_client_check_acl_request(RestF,
                                                0,
                                                0,
                                                F@_1,
                                                NewFValue,
                                                F@_3,
                                                F@_4,
                                                TrUserData).

d_field_client_check_acl_request_topic(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, F@_3, F@_4,
                                       TrUserData)
    when N < 57 ->
    d_field_client_check_acl_request_topic(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           TrUserData);
d_field_client_check_acl_request_topic(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, _, F@_4,
                                       TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_client_check_acl_request(RestF,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                NewFValue,
                                                F@_4,
                                                TrUserData).

d_field_client_check_acl_request_result(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, F@_3, F@_4,
                                        TrUserData)
    when N < 57 ->
    d_field_client_check_acl_request_result(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            TrUserData);
d_field_client_check_acl_request_result(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, F@_3, _,
                                        TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_client_check_acl_request(RestF,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                NewFValue,
                                                TrUserData).

skip_varint_client_check_acl_request(<<1:1, _:7,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                     TrUserData) ->
    skip_varint_client_check_acl_request(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         TrUserData);
skip_varint_client_check_acl_request(<<0:1, _:7,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                     TrUserData) ->
    dfp_read_field_def_client_check_acl_request(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData).

skip_length_delimited_client_check_acl_request(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               TrUserData)
    when N < 57 ->
    skip_length_delimited_client_check_acl_request(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   TrUserData);
skip_length_delimited_client_check_acl_request(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_client_check_acl_request(Rest2,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData).

skip_group_client_check_acl_request(Bin, FNum, Z2, F@_1,
                                    F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_client_check_acl_request(Rest,
                                                0,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData).

skip_32_client_check_acl_request(<<_:32, Rest/binary>>,
                                 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_client_check_acl_request(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData).

skip_64_client_check_acl_request(<<_:64, Rest/binary>>,
                                 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_client_check_acl_request(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData).

decode_msg_client_subscribe_request(Bin, TrUserData) ->
    dfp_read_field_def_client_subscribe_request(Bin,
                                                0,
                                                0,
                                                id('$undef', TrUserData),
                                                id([], TrUserData),
                                                id([], TrUserData),
                                                TrUserData).

dfp_read_field_def_client_subscribe_request(<<10,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, F@_2, F@_3,
                                            TrUserData) ->
    d_field_client_subscribe_request_clientinfo(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                TrUserData);
dfp_read_field_def_client_subscribe_request(<<18,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, F@_2, F@_3,
                                            TrUserData) ->
    d_field_client_subscribe_request_props(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData);
dfp_read_field_def_client_subscribe_request(<<26,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, F@_2, F@_3,
                                            TrUserData) ->
    d_field_client_subscribe_request_topic_filters(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   TrUserData);
dfp_read_field_def_client_subscribe_request(<<>>, 0, 0,
                                            F@_1, R1, R2, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{clientinfo => F@_1}
         end,
    S3 = if R1 == '$undef' -> S2;
            true -> S2#{props => lists_reverse(R1, TrUserData)}
         end,
    if R2 == '$undef' -> S3;
       true ->
           S3#{topic_filters => lists_reverse(R2, TrUserData)}
    end;
dfp_read_field_def_client_subscribe_request(Other, Z1,
                                            Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_client_subscribe_request(Other,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData).

dg_read_field_def_client_subscribe_request(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_client_subscribe_request(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData);
dg_read_field_def_client_subscribe_request(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, F@_2, F@_3,
                                           TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_client_subscribe_request_clientinfo(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData);
        18 ->
            d_field_client_subscribe_request_props(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   TrUserData);
        26 ->
            d_field_client_subscribe_request_topic_filters(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_client_subscribe_request(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData);
                1 ->
                    skip_64_client_subscribe_request(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     TrUserData);
                2 ->
                    skip_length_delimited_client_subscribe_request(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   F@_2,
                                                                   F@_3,
                                                                   TrUserData);
                3 ->
                    skip_group_client_subscribe_request(Rest,
                                                        Key bsr 3,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData);
                5 ->
                    skip_32_client_subscribe_request(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     TrUserData)
            end
    end;
dg_read_field_def_client_subscribe_request(<<>>, 0, 0,
                                           F@_1, R1, R2, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{clientinfo => F@_1}
         end,
    S3 = if R1 == '$undef' -> S2;
            true -> S2#{props => lists_reverse(R1, TrUserData)}
         end,
    if R2 == '$undef' -> S3;
       true ->
           S3#{topic_filters => lists_reverse(R2, TrUserData)}
    end.

d_field_client_subscribe_request_clientinfo(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3,
                                            TrUserData)
    when N < 57 ->
    d_field_client_subscribe_request_clientinfo(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                TrUserData);
d_field_client_subscribe_request_clientinfo(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, Prev, F@_2, F@_3,
                                            TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_client_info(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_client_subscribe_request(RestF,
                                                0,
                                                0,
                                                if Prev == '$undef' ->
                                                       NewFValue;
                                                   true ->
                                                       merge_msg_client_info(Prev,
                                                                             NewFValue,
                                                                             TrUserData)
                                                end,
                                                F@_2,
                                                F@_3,
                                                TrUserData).

d_field_client_subscribe_request_props(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_client_subscribe_request_props(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData);
d_field_client_subscribe_request_props(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_property(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_client_subscribe_request(RestF,
                                                0,
                                                0,
                                                F@_1,
                                                cons(NewFValue,
                                                     Prev,
                                                     TrUserData),
                                                F@_3,
                                                TrUserData).

d_field_client_subscribe_request_topic_filters(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3,
                                               TrUserData)
    when N < 57 ->
    d_field_client_subscribe_request_topic_filters(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   TrUserData);
d_field_client_subscribe_request_topic_filters(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, Prev,
                                               TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_topic_filter(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_client_subscribe_request(RestF,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                cons(NewFValue,
                                                     Prev,
                                                     TrUserData),
                                                TrUserData).

skip_varint_client_subscribe_request(<<1:1, _:7,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_client_subscribe_request(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         TrUserData);
skip_varint_client_subscribe_request(<<0:1, _:7,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_client_subscribe_request(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                TrUserData).

skip_length_delimited_client_subscribe_request(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3,
                                               TrUserData)
    when N < 57 ->
    skip_length_delimited_client_subscribe_request(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   TrUserData);
skip_length_delimited_client_subscribe_request(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3,
                                               TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_client_subscribe_request(Rest2,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                TrUserData).

skip_group_client_subscribe_request(Bin, FNum, Z2, F@_1,
                                    F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_client_subscribe_request(Rest,
                                                0,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                TrUserData).

skip_32_client_subscribe_request(<<_:32, Rest/binary>>,
                                 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_client_subscribe_request(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                TrUserData).

skip_64_client_subscribe_request(<<_:64, Rest/binary>>,
                                 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_client_subscribe_request(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                TrUserData).

decode_msg_client_unsubscribe_request(Bin,
                                      TrUserData) ->
    dfp_read_field_def_client_unsubscribe_request(Bin,
                                                  0,
                                                  0,
                                                  id('$undef', TrUserData),
                                                  id([], TrUserData),
                                                  id([], TrUserData),
                                                  TrUserData).

dfp_read_field_def_client_unsubscribe_request(<<10,
                                                Rest/binary>>,
                                              Z1, Z2, F@_1, F@_2, F@_3,
                                              TrUserData) ->
    d_field_client_unsubscribe_request_clientinfo(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  TrUserData);
dfp_read_field_def_client_unsubscribe_request(<<18,
                                                Rest/binary>>,
                                              Z1, Z2, F@_1, F@_2, F@_3,
                                              TrUserData) ->
    d_field_client_unsubscribe_request_props(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             TrUserData);
dfp_read_field_def_client_unsubscribe_request(<<26,
                                                Rest/binary>>,
                                              Z1, Z2, F@_1, F@_2, F@_3,
                                              TrUserData) ->
    d_field_client_unsubscribe_request_topic_filters(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     TrUserData);
dfp_read_field_def_client_unsubscribe_request(<<>>, 0,
                                              0, F@_1, R1, R2, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{clientinfo => F@_1}
         end,
    S3 = if R1 == '$undef' -> S2;
            true -> S2#{props => lists_reverse(R1, TrUserData)}
         end,
    if R2 == '$undef' -> S3;
       true ->
           S3#{topic_filters => lists_reverse(R2, TrUserData)}
    end;
dfp_read_field_def_client_unsubscribe_request(Other, Z1,
                                              Z2, F@_1, F@_2, F@_3,
                                              TrUserData) ->
    dg_read_field_def_client_unsubscribe_request(Other,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 TrUserData).

dg_read_field_def_client_unsubscribe_request(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3,
                                             TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_client_unsubscribe_request(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 TrUserData);
dg_read_field_def_client_unsubscribe_request(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3,
                                             TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_client_unsubscribe_request_clientinfo(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          TrUserData);
        18 ->
            d_field_client_unsubscribe_request_props(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     TrUserData);
        26 ->
            d_field_client_unsubscribe_request_topic_filters(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_client_unsubscribe_request(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           TrUserData);
                1 ->
                    skip_64_client_unsubscribe_request(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       TrUserData);
                2 ->
                    skip_length_delimited_client_unsubscribe_request(Rest,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     F@_3,
                                                                     TrUserData);
                3 ->
                    skip_group_client_unsubscribe_request(Rest,
                                                          Key bsr 3,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          TrUserData);
                5 ->
                    skip_32_client_unsubscribe_request(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       TrUserData)
            end
    end;
dg_read_field_def_client_unsubscribe_request(<<>>, 0, 0,
                                             F@_1, R1, R2, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{clientinfo => F@_1}
         end,
    S3 = if R1 == '$undef' -> S2;
            true -> S2#{props => lists_reverse(R1, TrUserData)}
         end,
    if R2 == '$undef' -> S3;
       true ->
           S3#{topic_filters => lists_reverse(R2, TrUserData)}
    end.

d_field_client_unsubscribe_request_clientinfo(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3,
                                              TrUserData)
    when N < 57 ->
    d_field_client_unsubscribe_request_clientinfo(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  TrUserData);
d_field_client_unsubscribe_request_clientinfo(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, Prev, F@_2, F@_3,
                                              TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_client_info(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_client_unsubscribe_request(RestF,
                                                  0,
                                                  0,
                                                  if Prev == '$undef' ->
                                                         NewFValue;
                                                     true ->
                                                         merge_msg_client_info(Prev,
                                                                               NewFValue,
                                                                               TrUserData)
                                                  end,
                                                  F@_2,
                                                  F@_3,
                                                  TrUserData).

d_field_client_unsubscribe_request_props(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_client_unsubscribe_request_props(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             TrUserData);
d_field_client_unsubscribe_request_props(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, Prev, F@_3,
                                         TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_property(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_client_unsubscribe_request(RestF,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  cons(NewFValue,
                                                       Prev,
                                                       TrUserData),
                                                  F@_3,
                                                  TrUserData).

d_field_client_unsubscribe_request_topic_filters(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3,
                                                 TrUserData)
    when N < 57 ->
    d_field_client_unsubscribe_request_topic_filters(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     TrUserData);
d_field_client_unsubscribe_request_topic_filters(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, Prev,
                                                 TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_topic_filter(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_client_unsubscribe_request(RestF,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  cons(NewFValue,
                                                       Prev,
                                                       TrUserData),
                                                  TrUserData).

skip_varint_client_unsubscribe_request(<<1:1, _:7,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_client_unsubscribe_request(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData);
skip_varint_client_unsubscribe_request(<<0:1, _:7,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_client_unsubscribe_request(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  TrUserData).

skip_length_delimited_client_unsubscribe_request(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3,
                                                 TrUserData)
    when N < 57 ->
    skip_length_delimited_client_unsubscribe_request(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     TrUserData);
skip_length_delimited_client_unsubscribe_request(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3,
                                                 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_client_unsubscribe_request(Rest2,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  TrUserData).

skip_group_client_unsubscribe_request(Bin, FNum, Z2,
                                      F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_client_unsubscribe_request(Rest,
                                                  0,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  TrUserData).

skip_32_client_unsubscribe_request(<<_:32,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_client_unsubscribe_request(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  TrUserData).

skip_64_client_unsubscribe_request(<<_:64,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_client_unsubscribe_request(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  TrUserData).

decode_msg_session_created_request(Bin, TrUserData) ->
    dfp_read_field_def_session_created_request(Bin,
                                               0,
                                               0,
                                               id('$undef', TrUserData),
                                               TrUserData).

dfp_read_field_def_session_created_request(<<10,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, TrUserData) ->
    d_field_session_created_request_clientinfo(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData);
dfp_read_field_def_session_created_request(<<>>, 0, 0,
                                           F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_1}
    end;
dfp_read_field_def_session_created_request(Other, Z1,
                                           Z2, F@_1, TrUserData) ->
    dg_read_field_def_session_created_request(Other,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              TrUserData).

dg_read_field_def_session_created_request(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_session_created_request(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              TrUserData);
dg_read_field_def_session_created_request(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_session_created_request_clientinfo(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_session_created_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                1 ->
                    skip_64_session_created_request(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData);
                2 ->
                    skip_length_delimited_session_created_request(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  TrUserData);
                3 ->
                    skip_group_session_created_request(Rest,
                                                       Key bsr 3,
                                                       0,
                                                       F@_1,
                                                       TrUserData);
                5 ->
                    skip_32_session_created_request(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData)
            end
    end;
dg_read_field_def_session_created_request(<<>>, 0, 0,
                                          F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_1}
    end.

d_field_session_created_request_clientinfo(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_session_created_request_clientinfo(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               TrUserData);
d_field_session_created_request_clientinfo(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_client_info(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_session_created_request(RestF,
                                               0,
                                               0,
                                               if Prev == '$undef' -> NewFValue;
                                                  true ->
                                                      merge_msg_client_info(Prev,
                                                                            NewFValue,
                                                                            TrUserData)
                                               end,
                                               TrUserData).

skip_varint_session_created_request(<<1:1, _:7,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_session_created_request(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        TrUserData);
skip_varint_session_created_request(<<0:1, _:7,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_session_created_request(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

skip_length_delimited_session_created_request(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_session_created_request(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  TrUserData);
skip_length_delimited_session_created_request(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_session_created_request(Rest2,
                                               0,
                                               0,
                                               F@_1,
                                               TrUserData).

skip_group_session_created_request(Bin, FNum, Z2, F@_1,
                                   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_session_created_request(Rest,
                                               0,
                                               Z2,
                                               F@_1,
                                               TrUserData).

skip_32_session_created_request(<<_:32, Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_session_created_request(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

skip_64_session_created_request(<<_:64, Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_session_created_request(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

decode_msg_session_subscribed_request(Bin,
                                      TrUserData) ->
    dfp_read_field_def_session_subscribed_request(Bin,
                                                  0,
                                                  0,
                                                  id('$undef', TrUserData),
                                                  id(<<>>, TrUserData),
                                                  id('$undef', TrUserData),
                                                  TrUserData).

dfp_read_field_def_session_subscribed_request(<<10,
                                                Rest/binary>>,
                                              Z1, Z2, F@_1, F@_2, F@_3,
                                              TrUserData) ->
    d_field_session_subscribed_request_clientinfo(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  TrUserData);
dfp_read_field_def_session_subscribed_request(<<18,
                                                Rest/binary>>,
                                              Z1, Z2, F@_1, F@_2, F@_3,
                                              TrUserData) ->
    d_field_session_subscribed_request_topic(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             TrUserData);
dfp_read_field_def_session_subscribed_request(<<26,
                                                Rest/binary>>,
                                              Z1, Z2, F@_1, F@_2, F@_3,
                                              TrUserData) ->
    d_field_session_subscribed_request_subopts(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData);
dfp_read_field_def_session_subscribed_request(<<>>, 0,
                                              0, F@_1, F@_2, F@_3, _) ->
    S1 = #{topic => F@_2},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{clientinfo => F@_1}
         end,
    if F@_3 == '$undef' -> S2;
       true -> S2#{subopts => F@_3}
    end;
dfp_read_field_def_session_subscribed_request(Other, Z1,
                                              Z2, F@_1, F@_2, F@_3,
                                              TrUserData) ->
    dg_read_field_def_session_subscribed_request(Other,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 TrUserData).

dg_read_field_def_session_subscribed_request(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3,
                                             TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_session_subscribed_request(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 TrUserData);
dg_read_field_def_session_subscribed_request(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3,
                                             TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_session_subscribed_request_clientinfo(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          TrUserData);
        18 ->
            d_field_session_subscribed_request_topic(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     TrUserData);
        26 ->
            d_field_session_subscribed_request_subopts(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_session_subscribed_request(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           TrUserData);
                1 ->
                    skip_64_session_subscribed_request(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       TrUserData);
                2 ->
                    skip_length_delimited_session_subscribed_request(Rest,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     F@_3,
                                                                     TrUserData);
                3 ->
                    skip_group_session_subscribed_request(Rest,
                                                          Key bsr 3,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          TrUserData);
                5 ->
                    skip_32_session_subscribed_request(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       TrUserData)
            end
    end;
dg_read_field_def_session_subscribed_request(<<>>, 0, 0,
                                             F@_1, F@_2, F@_3, _) ->
    S1 = #{topic => F@_2},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{clientinfo => F@_1}
         end,
    if F@_3 == '$undef' -> S2;
       true -> S2#{subopts => F@_3}
    end.

d_field_session_subscribed_request_clientinfo(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3,
                                              TrUserData)
    when N < 57 ->
    d_field_session_subscribed_request_clientinfo(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  TrUserData);
d_field_session_subscribed_request_clientinfo(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, Prev, F@_2, F@_3,
                                              TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_client_info(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_session_subscribed_request(RestF,
                                                  0,
                                                  0,
                                                  if Prev == '$undef' ->
                                                         NewFValue;
                                                     true ->
                                                         merge_msg_client_info(Prev,
                                                                               NewFValue,
                                                                               TrUserData)
                                                  end,
                                                  F@_2,
                                                  F@_3,
                                                  TrUserData).

d_field_session_subscribed_request_topic(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_session_subscribed_request_topic(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             TrUserData);
d_field_session_subscribed_request_topic(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_session_subscribed_request(RestF,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  NewFValue,
                                                  F@_3,
                                                  TrUserData).

d_field_session_subscribed_request_subopts(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_session_subscribed_request_subopts(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData);
d_field_session_subscribed_request_subopts(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, F@_2, Prev,
                                           TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_sub_opts(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_session_subscribed_request(RestF,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  if Prev == '$undef' ->
                                                         NewFValue;
                                                     true ->
                                                         merge_msg_sub_opts(Prev,
                                                                            NewFValue,
                                                                            TrUserData)
                                                  end,
                                                  TrUserData).

skip_varint_session_subscribed_request(<<1:1, _:7,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_session_subscribed_request(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData);
skip_varint_session_subscribed_request(<<0:1, _:7,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_session_subscribed_request(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  TrUserData).

skip_length_delimited_session_subscribed_request(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3,
                                                 TrUserData)
    when N < 57 ->
    skip_length_delimited_session_subscribed_request(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     TrUserData);
skip_length_delimited_session_subscribed_request(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3,
                                                 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_session_subscribed_request(Rest2,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  TrUserData).

skip_group_session_subscribed_request(Bin, FNum, Z2,
                                      F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_session_subscribed_request(Rest,
                                                  0,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  TrUserData).

skip_32_session_subscribed_request(<<_:32,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_session_subscribed_request(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  TrUserData).

skip_64_session_subscribed_request(<<_:64,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_session_subscribed_request(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  TrUserData).

decode_msg_session_unsubscribed_request(Bin,
                                        TrUserData) ->
    dfp_read_field_def_session_unsubscribed_request(Bin,
                                                    0,
                                                    0,
                                                    id('$undef', TrUserData),
                                                    id(<<>>, TrUserData),
                                                    TrUserData).

dfp_read_field_def_session_unsubscribed_request(<<10,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2,
                                                TrUserData) ->
    d_field_session_unsubscribed_request_clientinfo(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
dfp_read_field_def_session_unsubscribed_request(<<18,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2,
                                                TrUserData) ->
    d_field_session_unsubscribed_request_topic(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
dfp_read_field_def_session_unsubscribed_request(<<>>, 0,
                                                0, F@_1, F@_2, _) ->
    S1 = #{topic => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_1}
    end;
dfp_read_field_def_session_unsubscribed_request(Other,
                                                Z1, Z2, F@_1, F@_2,
                                                TrUserData) ->
    dg_read_field_def_session_unsubscribed_request(Other,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

dg_read_field_def_session_unsubscribed_request(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_session_unsubscribed_request(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData);
dg_read_field_def_session_unsubscribed_request(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2,
                                               TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_session_unsubscribed_request_clientinfo(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            TrUserData);
        18 ->
            d_field_session_unsubscribed_request_topic(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_session_unsubscribed_request(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             TrUserData);
                1 ->
                    skip_64_session_unsubscribed_request(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData);
                2 ->
                    skip_length_delimited_session_unsubscribed_request(Rest,
                                                                       0,
                                                                       0,
                                                                       F@_1,
                                                                       F@_2,
                                                                       TrUserData);
                3 ->
                    skip_group_session_unsubscribed_request(Rest,
                                                            Key bsr 3,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            TrUserData);
                5 ->
                    skip_32_session_unsubscribed_request(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData)
            end
    end;
dg_read_field_def_session_unsubscribed_request(<<>>, 0,
                                               0, F@_1, F@_2, _) ->
    S1 = #{topic => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_1}
    end.

d_field_session_unsubscribed_request_clientinfo(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_session_unsubscribed_request_clientinfo(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
d_field_session_unsubscribed_request_clientinfo(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, Prev, F@_2,
                                                TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_client_info(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_session_unsubscribed_request(RestF,
                                                    0,
                                                    0,
                                                    if Prev == '$undef' ->
                                                           NewFValue;
                                                       true ->
                                                           merge_msg_client_info(Prev,
                                                                                 NewFValue,
                                                                                 TrUserData)
                                                    end,
                                                    F@_2,
                                                    TrUserData).

d_field_session_unsubscribed_request_topic(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_session_unsubscribed_request_topic(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
d_field_session_unsubscribed_request_topic(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_session_unsubscribed_request(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    NewFValue,
                                                    TrUserData).

skip_varint_session_unsubscribed_request(<<1:1, _:7,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_session_unsubscribed_request(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
skip_varint_session_unsubscribed_request(<<0:1, _:7,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_session_unsubscribed_request(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData).

skip_length_delimited_session_unsubscribed_request(<<1:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2,
                                                   TrUserData)
    when N < 57 ->
    skip_length_delimited_session_unsubscribed_request(Rest,
                                                       N + 7,
                                                       X bsl N + Acc,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData);
skip_length_delimited_session_unsubscribed_request(<<0:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2,
                                                   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_session_unsubscribed_request(Rest2,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData).

skip_group_session_unsubscribed_request(Bin, FNum, Z2,
                                        F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_session_unsubscribed_request(Rest,
                                                    0,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData).

skip_32_session_unsubscribed_request(<<_:32,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_session_unsubscribed_request(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData).

skip_64_session_unsubscribed_request(<<_:64,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_session_unsubscribed_request(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData).

decode_msg_session_resumed_request(Bin, TrUserData) ->
    dfp_read_field_def_session_resumed_request(Bin,
                                               0,
                                               0,
                                               id('$undef', TrUserData),
                                               TrUserData).

dfp_read_field_def_session_resumed_request(<<10,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, TrUserData) ->
    d_field_session_resumed_request_clientinfo(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData);
dfp_read_field_def_session_resumed_request(<<>>, 0, 0,
                                           F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_1}
    end;
dfp_read_field_def_session_resumed_request(Other, Z1,
                                           Z2, F@_1, TrUserData) ->
    dg_read_field_def_session_resumed_request(Other,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              TrUserData).

dg_read_field_def_session_resumed_request(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_session_resumed_request(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              TrUserData);
dg_read_field_def_session_resumed_request(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_session_resumed_request_clientinfo(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_session_resumed_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                1 ->
                    skip_64_session_resumed_request(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData);
                2 ->
                    skip_length_delimited_session_resumed_request(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  TrUserData);
                3 ->
                    skip_group_session_resumed_request(Rest,
                                                       Key bsr 3,
                                                       0,
                                                       F@_1,
                                                       TrUserData);
                5 ->
                    skip_32_session_resumed_request(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData)
            end
    end;
dg_read_field_def_session_resumed_request(<<>>, 0, 0,
                                          F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_1}
    end.

d_field_session_resumed_request_clientinfo(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_session_resumed_request_clientinfo(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               TrUserData);
d_field_session_resumed_request_clientinfo(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_client_info(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_session_resumed_request(RestF,
                                               0,
                                               0,
                                               if Prev == '$undef' -> NewFValue;
                                                  true ->
                                                      merge_msg_client_info(Prev,
                                                                            NewFValue,
                                                                            TrUserData)
                                               end,
                                               TrUserData).

skip_varint_session_resumed_request(<<1:1, _:7,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_session_resumed_request(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        TrUserData);
skip_varint_session_resumed_request(<<0:1, _:7,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_session_resumed_request(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

skip_length_delimited_session_resumed_request(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_session_resumed_request(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  TrUserData);
skip_length_delimited_session_resumed_request(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_session_resumed_request(Rest2,
                                               0,
                                               0,
                                               F@_1,
                                               TrUserData).

skip_group_session_resumed_request(Bin, FNum, Z2, F@_1,
                                   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_session_resumed_request(Rest,
                                               0,
                                               Z2,
                                               F@_1,
                                               TrUserData).

skip_32_session_resumed_request(<<_:32, Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_session_resumed_request(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

skip_64_session_resumed_request(<<_:64, Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_session_resumed_request(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

decode_msg_session_discarded_request(Bin, TrUserData) ->
    dfp_read_field_def_session_discarded_request(Bin,
                                                 0,
                                                 0,
                                                 id('$undef', TrUserData),
                                                 TrUserData).

dfp_read_field_def_session_discarded_request(<<10,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, TrUserData) ->
    d_field_session_discarded_request_clientinfo(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData);
dfp_read_field_def_session_discarded_request(<<>>, 0, 0,
                                             F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_1}
    end;
dfp_read_field_def_session_discarded_request(Other, Z1,
                                             Z2, F@_1, TrUserData) ->
    dg_read_field_def_session_discarded_request(Other,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

dg_read_field_def_session_discarded_request(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_session_discarded_request(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                TrUserData);
dg_read_field_def_session_discarded_request(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_session_discarded_request_clientinfo(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_session_discarded_request(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          TrUserData);
                1 ->
                    skip_64_session_discarded_request(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      TrUserData);
                2 ->
                    skip_length_delimited_session_discarded_request(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    TrUserData);
                3 ->
                    skip_group_session_discarded_request(Rest,
                                                         Key bsr 3,
                                                         0,
                                                         F@_1,
                                                         TrUserData);
                5 ->
                    skip_32_session_discarded_request(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      TrUserData)
            end
    end;
dg_read_field_def_session_discarded_request(<<>>, 0, 0,
                                            F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_1}
    end.

d_field_session_discarded_request_clientinfo(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_session_discarded_request_clientinfo(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 TrUserData);
d_field_session_discarded_request_clientinfo(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_client_info(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_session_discarded_request(RestF,
                                                 0,
                                                 0,
                                                 if Prev == '$undef' ->
                                                        NewFValue;
                                                    true ->
                                                        merge_msg_client_info(Prev,
                                                                              NewFValue,
                                                                              TrUserData)
                                                 end,
                                                 TrUserData).

skip_varint_session_discarded_request(<<1:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_session_discarded_request(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData);
skip_varint_session_discarded_request(<<0:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_session_discarded_request(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData).

skip_length_delimited_session_discarded_request(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_session_discarded_request(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    TrUserData);
skip_length_delimited_session_discarded_request(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_session_discarded_request(Rest2,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 TrUserData).

skip_group_session_discarded_request(Bin, FNum, Z2,
                                     F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_session_discarded_request(Rest,
                                                 0,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData).

skip_32_session_discarded_request(<<_:32, Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_session_discarded_request(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData).

skip_64_session_discarded_request(<<_:64, Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_session_discarded_request(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData).

decode_msg_session_takeovered_request(Bin,
                                      TrUserData) ->
    dfp_read_field_def_session_takeovered_request(Bin,
                                                  0,
                                                  0,
                                                  id('$undef', TrUserData),
                                                  TrUserData).

dfp_read_field_def_session_takeovered_request(<<10,
                                                Rest/binary>>,
                                              Z1, Z2, F@_1, TrUserData) ->
    d_field_session_takeovered_request_clientinfo(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData);
dfp_read_field_def_session_takeovered_request(<<>>, 0,
                                              0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_1}
    end;
dfp_read_field_def_session_takeovered_request(Other, Z1,
                                              Z2, F@_1, TrUserData) ->
    dg_read_field_def_session_takeovered_request(Other,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData).

dg_read_field_def_session_takeovered_request(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_session_takeovered_request(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 TrUserData);
dg_read_field_def_session_takeovered_request(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_session_takeovered_request_clientinfo(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_session_takeovered_request(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           TrUserData);
                1 ->
                    skip_64_session_takeovered_request(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       TrUserData);
                2 ->
                    skip_length_delimited_session_takeovered_request(Rest,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     TrUserData);
                3 ->
                    skip_group_session_takeovered_request(Rest,
                                                          Key bsr 3,
                                                          0,
                                                          F@_1,
                                                          TrUserData);
                5 ->
                    skip_32_session_takeovered_request(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       TrUserData)
            end
    end;
dg_read_field_def_session_takeovered_request(<<>>, 0, 0,
                                             F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_1}
    end.

d_field_session_takeovered_request_clientinfo(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_session_takeovered_request_clientinfo(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  TrUserData);
d_field_session_takeovered_request_clientinfo(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_client_info(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_session_takeovered_request(RestF,
                                                  0,
                                                  0,
                                                  if Prev == '$undef' ->
                                                         NewFValue;
                                                     true ->
                                                         merge_msg_client_info(Prev,
                                                                               NewFValue,
                                                                               TrUserData)
                                                  end,
                                                  TrUserData).

skip_varint_session_takeovered_request(<<1:1, _:7,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_session_takeovered_request(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData);
skip_varint_session_takeovered_request(<<0:1, _:7,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_session_takeovered_request(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData).

skip_length_delimited_session_takeovered_request(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_session_takeovered_request(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     TrUserData);
skip_length_delimited_session_takeovered_request(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_session_takeovered_request(Rest2,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData).

skip_group_session_takeovered_request(Bin, FNum, Z2,
                                      F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_session_takeovered_request(Rest,
                                                  0,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData).

skip_32_session_takeovered_request(<<_:32,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_session_takeovered_request(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData).

skip_64_session_takeovered_request(<<_:64,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_session_takeovered_request(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData).

decode_msg_session_terminated_request(Bin,
                                      TrUserData) ->
    dfp_read_field_def_session_terminated_request(Bin,
                                                  0,
                                                  0,
                                                  id('$undef', TrUserData),
                                                  id(<<>>, TrUserData),
                                                  TrUserData).

dfp_read_field_def_session_terminated_request(<<10,
                                                Rest/binary>>,
                                              Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_session_terminated_request_clientinfo(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
dfp_read_field_def_session_terminated_request(<<18,
                                                Rest/binary>>,
                                              Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_session_terminated_request_reason(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
dfp_read_field_def_session_terminated_request(<<>>, 0,
                                              0, F@_1, F@_2, _) ->
    S1 = #{reason => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_1}
    end;
dfp_read_field_def_session_terminated_request(Other, Z1,
                                              Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_session_terminated_request(Other,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData).

dg_read_field_def_session_terminated_request(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_session_terminated_request(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
dg_read_field_def_session_terminated_request(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_session_terminated_request_clientinfo(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          TrUserData);
        18 ->
            d_field_session_terminated_request_reason(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_session_terminated_request(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           TrUserData);
                1 ->
                    skip_64_session_terminated_request(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData);
                2 ->
                    skip_length_delimited_session_terminated_request(Rest,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     TrUserData);
                3 ->
                    skip_group_session_terminated_request(Rest,
                                                          Key bsr 3,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          TrUserData);
                5 ->
                    skip_32_session_terminated_request(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData)
            end
    end;
dg_read_field_def_session_terminated_request(<<>>, 0, 0,
                                             F@_1, F@_2, _) ->
    S1 = #{reason => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{clientinfo => F@_1}
    end.

d_field_session_terminated_request_clientinfo(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_session_terminated_request_clientinfo(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
d_field_session_terminated_request_clientinfo(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_client_info(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_session_terminated_request(RestF,
                                                  0,
                                                  0,
                                                  if Prev == '$undef' ->
                                                         NewFValue;
                                                     true ->
                                                         merge_msg_client_info(Prev,
                                                                               NewFValue,
                                                                               TrUserData)
                                                  end,
                                                  F@_2,
                                                  TrUserData).

d_field_session_terminated_request_reason(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_session_terminated_request_reason(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
d_field_session_terminated_request_reason(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_session_terminated_request(RestF,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  NewFValue,
                                                  TrUserData).

skip_varint_session_terminated_request(<<1:1, _:7,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_session_terminated_request(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           TrUserData);
skip_varint_session_terminated_request(<<0:1, _:7,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_session_terminated_request(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData).

skip_length_delimited_session_terminated_request(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_session_terminated_request(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     F@_2,
                                                     TrUserData);
skip_length_delimited_session_terminated_request(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2,
                                                 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_session_terminated_request(Rest2,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData).

skip_group_session_terminated_request(Bin, FNum, Z2,
                                      F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_session_terminated_request(Rest,
                                                  0,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData).

skip_32_session_terminated_request(<<_:32,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_session_terminated_request(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData).

skip_64_session_terminated_request(<<_:64,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_session_terminated_request(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData).

decode_msg_message_publish_request(Bin, TrUserData) ->
    dfp_read_field_def_message_publish_request(Bin,
                                               0,
                                               0,
                                               id('$undef', TrUserData),
                                               TrUserData).

dfp_read_field_def_message_publish_request(<<10,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, TrUserData) ->
    d_field_message_publish_request_message(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            TrUserData);
dfp_read_field_def_message_publish_request(<<>>, 0, 0,
                                           F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{message => F@_1}
    end;
dfp_read_field_def_message_publish_request(Other, Z1,
                                           Z2, F@_1, TrUserData) ->
    dg_read_field_def_message_publish_request(Other,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              TrUserData).

dg_read_field_def_message_publish_request(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_message_publish_request(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              TrUserData);
dg_read_field_def_message_publish_request(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_message_publish_request_message(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_message_publish_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                1 ->
                    skip_64_message_publish_request(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData);
                2 ->
                    skip_length_delimited_message_publish_request(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  TrUserData);
                3 ->
                    skip_group_message_publish_request(Rest,
                                                       Key bsr 3,
                                                       0,
                                                       F@_1,
                                                       TrUserData);
                5 ->
                    skip_32_message_publish_request(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData)
            end
    end;
dg_read_field_def_message_publish_request(<<>>, 0, 0,
                                          F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{message => F@_1}
    end.

d_field_message_publish_request_message(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_message_publish_request_message(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            TrUserData);
d_field_message_publish_request_message(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_message(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_message_publish_request(RestF,
                                               0,
                                               0,
                                               if Prev == '$undef' -> NewFValue;
                                                  true ->
                                                      merge_msg_message(Prev,
                                                                        NewFValue,
                                                                        TrUserData)
                                               end,
                                               TrUserData).

skip_varint_message_publish_request(<<1:1, _:7,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_message_publish_request(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        TrUserData);
skip_varint_message_publish_request(<<0:1, _:7,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_message_publish_request(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

skip_length_delimited_message_publish_request(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_message_publish_request(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  TrUserData);
skip_length_delimited_message_publish_request(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_message_publish_request(Rest2,
                                               0,
                                               0,
                                               F@_1,
                                               TrUserData).

skip_group_message_publish_request(Bin, FNum, Z2, F@_1,
                                   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_message_publish_request(Rest,
                                               0,
                                               Z2,
                                               F@_1,
                                               TrUserData).

skip_32_message_publish_request(<<_:32, Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_message_publish_request(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

skip_64_message_publish_request(<<_:64, Rest/binary>>,
                                Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_message_publish_request(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

decode_msg_message_delivered_request(Bin, TrUserData) ->
    dfp_read_field_def_message_delivered_request(Bin,
                                                 0,
                                                 0,
                                                 id('$undef', TrUserData),
                                                 id('$undef', TrUserData),
                                                 TrUserData).

dfp_read_field_def_message_delivered_request(<<10,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_message_delivered_request_clientinfo(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
dfp_read_field_def_message_delivered_request(<<18,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_message_delivered_request_message(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
dfp_read_field_def_message_delivered_request(<<>>, 0, 0,
                                             F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{clientinfo => F@_1}
         end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{message => F@_2}
    end;
dfp_read_field_def_message_delivered_request(Other, Z1,
                                             Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_message_delivered_request(Other,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                TrUserData).

dg_read_field_def_message_delivered_request(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_message_delivered_request(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
dg_read_field_def_message_delivered_request(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_message_delivered_request_clientinfo(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData);
        18 ->
            d_field_message_delivered_request_message(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_message_delivered_request(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          TrUserData);
                1 ->
                    skip_64_message_delivered_request(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData);
                2 ->
                    skip_length_delimited_message_delivered_request(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    TrUserData);
                3 ->
                    skip_group_message_delivered_request(Rest,
                                                         Key bsr 3,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData);
                5 ->
                    skip_32_message_delivered_request(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData)
            end
    end;
dg_read_field_def_message_delivered_request(<<>>, 0, 0,
                                            F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{clientinfo => F@_1}
         end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{message => F@_2}
    end.

d_field_message_delivered_request_clientinfo(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_message_delivered_request_clientinfo(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
d_field_message_delivered_request_clientinfo(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_client_info(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_message_delivered_request(RestF,
                                                 0,
                                                 0,
                                                 if Prev == '$undef' ->
                                                        NewFValue;
                                                    true ->
                                                        merge_msg_client_info(Prev,
                                                                              NewFValue,
                                                                              TrUserData)
                                                 end,
                                                 F@_2,
                                                 TrUserData).

d_field_message_delivered_request_message(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_message_delivered_request_message(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
d_field_message_delivered_request_message(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_message(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_message_delivered_request(RestF,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 if Prev == '$undef' ->
                                                        NewFValue;
                                                    true ->
                                                        merge_msg_message(Prev,
                                                                          NewFValue,
                                                                          TrUserData)
                                                 end,
                                                 TrUserData).

skip_varint_message_delivered_request(<<1:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_message_delivered_request(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
skip_varint_message_delivered_request(<<0:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_message_delivered_request(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData).

skip_length_delimited_message_delivered_request(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_message_delivered_request(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
skip_length_delimited_message_delivered_request(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2,
                                                TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_message_delivered_request(Rest2,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData).

skip_group_message_delivered_request(Bin, FNum, Z2,
                                     F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_message_delivered_request(Rest,
                                                 0,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData).

skip_32_message_delivered_request(<<_:32, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_message_delivered_request(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData).

skip_64_message_delivered_request(<<_:64, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_message_delivered_request(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData).

decode_msg_message_dropped_request(Bin, TrUserData) ->
    dfp_read_field_def_message_dropped_request(Bin,
                                               0,
                                               0,
                                               id('$undef', TrUserData),
                                               id(<<>>, TrUserData),
                                               TrUserData).

dfp_read_field_def_message_dropped_request(<<10,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_message_dropped_request_message(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
dfp_read_field_def_message_dropped_request(<<18,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_message_dropped_request_reason(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           TrUserData);
dfp_read_field_def_message_dropped_request(<<>>, 0, 0,
                                           F@_1, F@_2, _) ->
    S1 = #{reason => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{message => F@_1}
    end;
dfp_read_field_def_message_dropped_request(Other, Z1,
                                           Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_message_dropped_request(Other,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              TrUserData).

dg_read_field_def_message_dropped_request(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_message_dropped_request(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
dg_read_field_def_message_dropped_request(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_message_dropped_request_message(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
        18 ->
            d_field_message_dropped_request_reason(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_message_dropped_request(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
                1 ->
                    skip_64_message_dropped_request(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
                2 ->
                    skip_length_delimited_message_dropped_request(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  F@_2,
                                                                  TrUserData);
                3 ->
                    skip_group_message_dropped_request(Rest,
                                                       Key bsr 3,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData);
                5 ->
                    skip_32_message_dropped_request(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData)
            end
    end;
dg_read_field_def_message_dropped_request(<<>>, 0, 0,
                                          F@_1, F@_2, _) ->
    S1 = #{reason => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{message => F@_1}
    end.

d_field_message_dropped_request_message(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_message_dropped_request_message(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
d_field_message_dropped_request_message(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_message(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_message_dropped_request(RestF,
                                               0,
                                               0,
                                               if Prev == '$undef' -> NewFValue;
                                                  true ->
                                                      merge_msg_message(Prev,
                                                                        NewFValue,
                                                                        TrUserData)
                                               end,
                                               F@_2,
                                               TrUserData).

d_field_message_dropped_request_reason(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_message_dropped_request_reason(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           TrUserData);
d_field_message_dropped_request_reason(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_message_dropped_request(RestF,
                                               0,
                                               0,
                                               F@_1,
                                               NewFValue,
                                               TrUserData).

skip_varint_message_dropped_request(<<1:1, _:7,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_message_dropped_request(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
skip_varint_message_dropped_request(<<0:1, _:7,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_message_dropped_request(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               TrUserData).

skip_length_delimited_message_dropped_request(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_message_dropped_request(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
skip_length_delimited_message_dropped_request(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_message_dropped_request(Rest2,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               TrUserData).

skip_group_message_dropped_request(Bin, FNum, Z2, F@_1,
                                   F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_message_dropped_request(Rest,
                                               0,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               TrUserData).

skip_32_message_dropped_request(<<_:32, Rest/binary>>,
                                Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_message_dropped_request(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               TrUserData).

skip_64_message_dropped_request(<<_:64, Rest/binary>>,
                                Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_message_dropped_request(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               TrUserData).

decode_msg_message_acked_request(Bin, TrUserData) ->
    dfp_read_field_def_message_acked_request(Bin,
                                             0,
                                             0,
                                             id('$undef', TrUserData),
                                             id('$undef', TrUserData),
                                             TrUserData).

dfp_read_field_def_message_acked_request(<<10,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_message_acked_request_clientinfo(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
dfp_read_field_def_message_acked_request(<<18,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_message_acked_request_message(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
dfp_read_field_def_message_acked_request(<<>>, 0, 0,
                                         F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{clientinfo => F@_1}
         end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{message => F@_2}
    end;
dfp_read_field_def_message_acked_request(Other, Z1, Z2,
                                         F@_1, F@_2, TrUserData) ->
    dg_read_field_def_message_acked_request(Other,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            TrUserData).

dg_read_field_def_message_acked_request(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_message_acked_request(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
dg_read_field_def_message_acked_request(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_message_acked_request_clientinfo(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     TrUserData);
        18 ->
            d_field_message_acked_request_message(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_message_acked_request(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData);
                1 ->
                    skip_64_message_acked_request(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
                2 ->
                    skip_length_delimited_message_acked_request(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData);
                3 ->
                    skip_group_message_acked_request(Rest,
                                                     Key bsr 3,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     TrUserData);
                5 ->
                    skip_32_message_acked_request(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData)
            end
    end;
dg_read_field_def_message_acked_request(<<>>, 0, 0,
                                        F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
            true -> S1#{clientinfo => F@_1}
         end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{message => F@_2}
    end.

d_field_message_acked_request_clientinfo(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_message_acked_request_clientinfo(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
d_field_message_acked_request_clientinfo(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_client_info(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_message_acked_request(RestF,
                                             0,
                                             0,
                                             if Prev == '$undef' -> NewFValue;
                                                true ->
                                                    merge_msg_client_info(Prev,
                                                                          NewFValue,
                                                                          TrUserData)
                                             end,
                                             F@_2,
                                             TrUserData).

d_field_message_acked_request_message(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_message_acked_request_message(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
d_field_message_acked_request_message(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_message(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_message_acked_request(RestF,
                                             0,
                                             0,
                                             F@_1,
                                             if Prev == '$undef' -> NewFValue;
                                                true ->
                                                    merge_msg_message(Prev,
                                                                      NewFValue,
                                                                      TrUserData)
                                             end,
                                             TrUserData).

skip_varint_message_acked_request(<<1:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_message_acked_request(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      TrUserData);
skip_varint_message_acked_request(<<0:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_message_acked_request(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData).

skip_length_delimited_message_acked_request(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_message_acked_request(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
skip_length_delimited_message_acked_request(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_message_acked_request(Rest2,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             TrUserData).

skip_group_message_acked_request(Bin, FNum, Z2, F@_1,
                                 F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_message_acked_request(Rest,
                                             0,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData).

skip_32_message_acked_request(<<_:32, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_message_acked_request(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData).

skip_64_message_acked_request(<<_:64, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_message_acked_request(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData).

decode_msg_empty_success(Bin, TrUserData) ->
    dfp_read_field_def_empty_success(Bin, 0, 0, TrUserData).

dfp_read_field_def_empty_success(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_empty_success(Other, Z1, Z2,
                                 TrUserData) ->
    dg_read_field_def_empty_success(Other,
                                    Z1,
                                    Z2,
                                    TrUserData).

dg_read_field_def_empty_success(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_empty_success(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    TrUserData);
dg_read_field_def_empty_success(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_empty_success(Rest, 0, 0, TrUserData);
        1 -> skip_64_empty_success(Rest, 0, 0, TrUserData);
        2 ->
            skip_length_delimited_empty_success(Rest,
                                                0,
                                                0,
                                                TrUserData);
        3 ->
            skip_group_empty_success(Rest,
                                     Key bsr 3,
                                     0,
                                     TrUserData);
        5 -> skip_32_empty_success(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_empty_success(<<>>, 0, 0, _) -> #{}.

skip_varint_empty_success(<<1:1, _:7, Rest/binary>>, Z1,
                          Z2, TrUserData) ->
    skip_varint_empty_success(Rest, Z1, Z2, TrUserData);
skip_varint_empty_success(<<0:1, _:7, Rest/binary>>, Z1,
                          Z2, TrUserData) ->
    dfp_read_field_def_empty_success(Rest,
                                     Z1,
                                     Z2,
                                     TrUserData).

skip_length_delimited_empty_success(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_empty_success(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        TrUserData);
skip_length_delimited_empty_success(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_empty_success(Rest2,
                                     0,
                                     0,
                                     TrUserData).

skip_group_empty_success(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_empty_success(Rest,
                                     0,
                                     Z2,
                                     TrUserData).

skip_32_empty_success(<<_:32, Rest/binary>>, Z1, Z2,
                      TrUserData) ->
    dfp_read_field_def_empty_success(Rest,
                                     Z1,
                                     Z2,
                                     TrUserData).

skip_64_empty_success(<<_:64, Rest/binary>>, Z1, Z2,
                      TrUserData) ->
    dfp_read_field_def_empty_success(Rest,
                                     Z1,
                                     Z2,
                                     TrUserData).

decode_msg_valued_response(Bin, TrUserData) ->
    dfp_read_field_def_valued_response(Bin,
                                       0,
                                       0,
                                       id('IGNORE', TrUserData),
                                       id('$undef', TrUserData),
                                       TrUserData).

dfp_read_field_def_valued_response(<<8, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_valued_response_type(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData);
dfp_read_field_def_valued_response(<<24, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_valued_response_bool_result(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
dfp_read_field_def_valued_response(<<34, Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_valued_response_message(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
dfp_read_field_def_valued_response(<<>>, 0, 0, F@_1,
                                   F@_2, _) ->
    S1 = #{type => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end;
dfp_read_field_def_valued_response(Other, Z1, Z2, F@_1,
                                   F@_2, TrUserData) ->
    dg_read_field_def_valued_response(Other,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      TrUserData).

dg_read_field_def_valued_response(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_valued_response(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      TrUserData);
dg_read_field_def_valued_response(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_valued_response_type(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
        24 ->
            d_field_valued_response_bool_result(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
        34 ->
            d_field_valued_response_message(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_valued_response(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
                1 ->
                    skip_64_valued_response(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
                2 ->
                    skip_length_delimited_valued_response(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          TrUserData);
                3 ->
                    skip_group_valued_response(Rest,
                                               Key bsr 3,
                                               0,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
                5 ->
                    skip_32_valued_response(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData)
            end
    end;
dg_read_field_def_valued_response(<<>>, 0, 0, F@_1,
                                  F@_2, _) ->
    S1 = #{type => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end.

d_field_valued_response_type(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_valued_response_type(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 TrUserData);
d_field_valued_response_type(<<0:1, X:7, Rest/binary>>,
                             N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} =
        {id('d_enum_valued_response.ResponsedType'(begin
                                                       <<Res:32/signed-native>> =
                                                           <<(X bsl N +
                                                                  Acc):32/unsigned-native>>,
                                                       id(Res, TrUserData)
                                                   end),
            TrUserData),
         Rest},
    dfp_read_field_def_valued_response(RestF,
                                       0,
                                       0,
                                       NewFValue,
                                       F@_2,
                                       TrUserData).

d_field_valued_response_bool_result(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_valued_response_bool_result(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
d_field_valued_response_bool_result(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_valued_response(RestF,
                                       0,
                                       0,
                                       F@_1,
                                       id({bool_result, NewFValue}, TrUserData),
                                       TrUserData).

d_field_valued_response_message(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_valued_response_message(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
d_field_valued_response_message(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_message(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_valued_response(RestF,
                                       0,
                                       0,
                                       F@_1,
                                       case Prev of
                                           '$undef' ->
                                               id({message, NewFValue},
                                                  TrUserData);
                                           {message, MVPrev} ->
                                               id({message,
                                                   merge_msg_message(MVPrev,
                                                                     NewFValue,
                                                                     TrUserData)},
                                                  TrUserData);
                                           _ ->
                                               id({message, NewFValue},
                                                  TrUserData)
                                       end,
                                       TrUserData).

skip_varint_valued_response(<<1:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_valued_response(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                TrUserData);
skip_varint_valued_response(<<0:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_valued_response(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_length_delimited_valued_response(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_valued_response(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
skip_length_delimited_valued_response(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_valued_response(Rest2,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_group_valued_response(Bin, FNum, Z2, F@_1, F@_2,
                           TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_valued_response(Rest,
                                       0,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_32_valued_response(<<_:32, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_valued_response(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

skip_64_valued_response(<<_:64, Rest/binary>>, Z1, Z2,
                        F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_valued_response(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData).

decode_msg_broker_info(Bin, TrUserData) ->
    dfp_read_field_def_broker_info(Bin,
                                   0,
                                   0,
                                   id(<<>>, TrUserData),
                                   id(<<>>, TrUserData),
                                   id(<<>>, TrUserData),
                                   id(<<>>, TrUserData),
                                   TrUserData).

dfp_read_field_def_broker_info(<<10, Rest/binary>>, Z1,
                               Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_broker_info_version(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                TrUserData);
dfp_read_field_def_broker_info(<<18, Rest/binary>>, Z1,
                               Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_broker_info_sysdescr(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 TrUserData);
dfp_read_field_def_broker_info(<<26, Rest/binary>>, Z1,
                               Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_broker_info_uptime(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               TrUserData);
dfp_read_field_def_broker_info(<<34, Rest/binary>>, Z1,
                               Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_broker_info_datetime(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 TrUserData);
dfp_read_field_def_broker_info(<<>>, 0, 0, F@_1, F@_2,
                               F@_3, F@_4, _) ->
    #{version => F@_1, sysdescr => F@_2, uptime => F@_3,
      datetime => F@_4};
dfp_read_field_def_broker_info(Other, Z1, Z2, F@_1,
                               F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_broker_info(Other,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  TrUserData).

dg_read_field_def_broker_info(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_broker_info(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  TrUserData);
dg_read_field_def_broker_info(<<0:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_broker_info_version(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        TrUserData);
        18 ->
            d_field_broker_info_sysdescr(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         TrUserData);
        26 ->
            d_field_broker_info_uptime(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       TrUserData);
        34 ->
            d_field_broker_info_datetime(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_broker_info(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            TrUserData);
                1 ->
                    skip_64_broker_info(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        TrUserData);
                2 ->
                    skip_length_delimited_broker_info(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      TrUserData);
                3 ->
                    skip_group_broker_info(Rest,
                                           Key bsr 3,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           TrUserData);
                5 ->
                    skip_32_broker_info(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        TrUserData)
            end
    end;
dg_read_field_def_broker_info(<<>>, 0, 0, F@_1, F@_2,
                              F@_3, F@_4, _) ->
    #{version => F@_1, sysdescr => F@_2, uptime => F@_3,
      datetime => F@_4}.

d_field_broker_info_version(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_broker_info_version(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                TrUserData);
d_field_broker_info_version(<<0:1, X:7, Rest/binary>>,
                            N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_broker_info(RestF,
                                   0,
                                   0,
                                   NewFValue,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   TrUserData).

d_field_broker_info_sysdescr(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_broker_info_sysdescr(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 TrUserData);
d_field_broker_info_sysdescr(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_broker_info(RestF,
                                   0,
                                   0,
                                   F@_1,
                                   NewFValue,
                                   F@_3,
                                   F@_4,
                                   TrUserData).

d_field_broker_info_uptime(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_broker_info_uptime(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               TrUserData);
d_field_broker_info_uptime(<<0:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_broker_info(RestF,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   NewFValue,
                                   F@_4,
                                   TrUserData).

d_field_broker_info_datetime(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_broker_info_datetime(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 TrUserData);
d_field_broker_info_datetime(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_broker_info(RestF,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   NewFValue,
                                   TrUserData).

skip_varint_broker_info(<<1:1, _:7, Rest/binary>>, Z1,
                        Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_broker_info(Rest,
                            Z1,
                            Z2,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            TrUserData);
skip_varint_broker_info(<<0:1, _:7, Rest/binary>>, Z1,
                        Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_broker_info(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   TrUserData).

skip_length_delimited_broker_info(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_broker_info(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      TrUserData);
skip_length_delimited_broker_info(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_broker_info(Rest2,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   TrUserData).

skip_group_broker_info(Bin, FNum, Z2, F@_1, F@_2, F@_3,
                       F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_broker_info(Rest,
                                   0,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   TrUserData).

skip_32_broker_info(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                    F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_broker_info(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   TrUserData).

skip_64_broker_info(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                    F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_broker_info(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   TrUserData).

decode_msg_hook_spec(Bin, TrUserData) ->
    dfp_read_field_def_hook_spec(Bin,
                                 0,
                                 0,
                                 id(<<>>, TrUserData),
                                 id([], TrUserData),
                                 TrUserData).

dfp_read_field_def_hook_spec(<<10, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, TrUserData) ->
    d_field_hook_spec_name(Rest,
                           Z1,
                           Z2,
                           F@_1,
                           F@_2,
                           TrUserData);
dfp_read_field_def_hook_spec(<<18, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, TrUserData) ->
    d_field_hook_spec_topics(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             TrUserData);
dfp_read_field_def_hook_spec(<<>>, 0, 0, F@_1, R1,
                             TrUserData) ->
    #{name => F@_1,
      topics => lists_reverse(R1, TrUserData)};
dfp_read_field_def_hook_spec(Other, Z1, Z2, F@_1, F@_2,
                             TrUserData) ->
    dg_read_field_def_hook_spec(Other,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                TrUserData).

dg_read_field_def_hook_spec(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_hook_spec(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                TrUserData);
dg_read_field_def_hook_spec(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_hook_spec_name(Rest,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   TrUserData);
        18 ->
            d_field_hook_spec_topics(Rest,
                                     0,
                                     0,
                                     F@_1,
                                     F@_2,
                                     TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_hook_spec(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
                1 ->
                    skip_64_hook_spec(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 ->
                    skip_length_delimited_hook_spec(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
                3 ->
                    skip_group_hook_spec(Rest,
                                         Key bsr 3,
                                         0,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
                5 ->
                    skip_32_hook_spec(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_hook_spec(<<>>, 0, 0, F@_1, R1,
                            TrUserData) ->
    #{name => F@_1,
      topics => lists_reverse(R1, TrUserData)}.

d_field_hook_spec_name(<<1:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_hook_spec_name(Rest,
                           N + 7,
                           X bsl N + Acc,
                           F@_1,
                           F@_2,
                           TrUserData);
d_field_hook_spec_name(<<0:1, X:7, Rest/binary>>, N,
                       Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_hook_spec(RestF,
                                 0,
                                 0,
                                 NewFValue,
                                 F@_2,
                                 TrUserData).

d_field_hook_spec_topics(<<1:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_hook_spec_topics(Rest,
                             N + 7,
                             X bsl N + Acc,
                             F@_1,
                             F@_2,
                             TrUserData);
d_field_hook_spec_topics(<<0:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_hook_spec(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 cons(NewFValue, Prev, TrUserData),
                                 TrUserData).

skip_varint_hook_spec(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, TrUserData) ->
    skip_varint_hook_spec(Rest,
                          Z1,
                          Z2,
                          F@_1,
                          F@_2,
                          TrUserData);
skip_varint_hook_spec(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_hook_spec(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData).

skip_length_delimited_hook_spec(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_hook_spec(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
skip_length_delimited_hook_spec(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_hook_spec(Rest2,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 TrUserData).

skip_group_hook_spec(Bin, FNum, Z2, F@_1, F@_2,
                     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_hook_spec(Rest,
                                 0,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData).

skip_32_hook_spec(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                  F@_2, TrUserData) ->
    dfp_read_field_def_hook_spec(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData).

skip_64_hook_spec(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                  F@_2, TrUserData) ->
    dfp_read_field_def_hook_spec(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 TrUserData).

decode_msg_conn_info(Bin, TrUserData) ->
    dfp_read_field_def_conn_info(Bin,
                                 0,
                                 0,
                                 id(<<>>, TrUserData),
                                 id(<<>>, TrUserData),
                                 id(<<>>, TrUserData),
                                 id(<<>>, TrUserData),
                                 id(0, TrUserData),
                                 id(<<>>, TrUserData),
                                 id(<<>>, TrUserData),
                                 id(0, TrUserData),
                                 TrUserData).

dfp_read_field_def_conn_info(<<10, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             TrUserData) ->
    d_field_conn_info_node(Rest,
                           Z1,
                           Z2,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           F@_6,
                           F@_7,
                           F@_8,
                           TrUserData);
dfp_read_field_def_conn_info(<<18, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             TrUserData) ->
    d_field_conn_info_clientid(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               F@_8,
                               TrUserData);
dfp_read_field_def_conn_info(<<26, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             TrUserData) ->
    d_field_conn_info_username(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               F@_8,
                               TrUserData);
dfp_read_field_def_conn_info(<<34, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             TrUserData) ->
    d_field_conn_info_peerhost(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               F@_8,
                               TrUserData);
dfp_read_field_def_conn_info(<<40, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             TrUserData) ->
    d_field_conn_info_sockport(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               F@_8,
                               TrUserData);
dfp_read_field_def_conn_info(<<50, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             TrUserData) ->
    d_field_conn_info_proto_name(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData);
dfp_read_field_def_conn_info(<<58, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             TrUserData) ->
    d_field_conn_info_proto_ver(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                F@_6,
                                F@_7,
                                F@_8,
                                TrUserData);
dfp_read_field_def_conn_info(<<64, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             TrUserData) ->
    d_field_conn_info_keepalive(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                F@_6,
                                F@_7,
                                F@_8,
                                TrUserData);
dfp_read_field_def_conn_info(<<>>, 0, 0, F@_1, F@_2,
                             F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _) ->
    #{node => F@_1, clientid => F@_2, username => F@_3,
      peerhost => F@_4, sockport => F@_5, proto_name => F@_6,
      proto_ver => F@_7, keepalive => F@_8};
dfp_read_field_def_conn_info(Other, Z1, Z2, F@_1, F@_2,
                             F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    dg_read_field_def_conn_info(Other,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                F@_6,
                                F@_7,
                                F@_8,
                                TrUserData).

dg_read_field_def_conn_info(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                            F@_8, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_conn_info(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                F@_6,
                                F@_7,
                                F@_8,
                                TrUserData);
dg_read_field_def_conn_info(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                            F@_8, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_conn_info_node(Rest,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   TrUserData);
        18 ->
            d_field_conn_info_clientid(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       F@_5,
                                       F@_6,
                                       F@_7,
                                       F@_8,
                                       TrUserData);
        26 ->
            d_field_conn_info_username(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       F@_5,
                                       F@_6,
                                       F@_7,
                                       F@_8,
                                       TrUserData);
        34 ->
            d_field_conn_info_peerhost(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       F@_5,
                                       F@_6,
                                       F@_7,
                                       F@_8,
                                       TrUserData);
        40 ->
            d_field_conn_info_sockport(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       F@_5,
                                       F@_6,
                                       F@_7,
                                       F@_8,
                                       TrUserData);
        50 ->
            d_field_conn_info_proto_name(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         F@_8,
                                         TrUserData);
        58 ->
            d_field_conn_info_proto_ver(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        F@_6,
                                        F@_7,
                                        F@_8,
                                        TrUserData);
        64 ->
            d_field_conn_info_keepalive(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        F@_6,
                                        F@_7,
                                        F@_8,
                                        TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_conn_info(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          TrUserData);
                1 ->
                    skip_64_conn_info(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      F@_6,
                                      F@_7,
                                      F@_8,
                                      TrUserData);
                2 ->
                    skip_length_delimited_conn_info(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    TrUserData);
                3 ->
                    skip_group_conn_info(Rest,
                                         Key bsr 3,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         F@_8,
                                         TrUserData);
                5 ->
                    skip_32_conn_info(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      F@_6,
                                      F@_7,
                                      F@_8,
                                      TrUserData)
            end
    end;
dg_read_field_def_conn_info(<<>>, 0, 0, F@_1, F@_2,
                            F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _) ->
    #{node => F@_1, clientid => F@_2, username => F@_3,
      peerhost => F@_4, sockport => F@_5, proto_name => F@_6,
      proto_ver => F@_7, keepalive => F@_8}.

d_field_conn_info_node(<<1:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                       TrUserData)
    when N < 57 ->
    d_field_conn_info_node(Rest,
                           N + 7,
                           X bsl N + Acc,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           F@_6,
                           F@_7,
                           F@_8,
                           TrUserData);
d_field_conn_info_node(<<0:1, X:7, Rest/binary>>, N,
                       Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                       TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_conn_info(RestF,
                                 0,
                                 0,
                                 NewFValue,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

d_field_conn_info_clientid(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                           TrUserData)
    when N < 57 ->
    d_field_conn_info_clientid(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               F@_8,
                               TrUserData);
d_field_conn_info_clientid(<<0:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                           TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_conn_info(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 NewFValue,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

d_field_conn_info_username(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                           TrUserData)
    when N < 57 ->
    d_field_conn_info_username(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               F@_8,
                               TrUserData);
d_field_conn_info_username(<<0:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8,
                           TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_conn_info(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 NewFValue,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

d_field_conn_info_peerhost(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                           TrUserData)
    when N < 57 ->
    d_field_conn_info_peerhost(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               F@_8,
                               TrUserData);
d_field_conn_info_peerhost(<<0:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8,
                           TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_conn_info(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 NewFValue,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

d_field_conn_info_sockport(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                           TrUserData)
    when N < 57 ->
    d_field_conn_info_sockport(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               F@_8,
                               TrUserData);
d_field_conn_info_sockport(<<0:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8,
                           TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_conn_info(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 NewFValue,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

d_field_conn_info_proto_name(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                             F@_8, TrUserData)
    when N < 57 ->
    d_field_conn_info_proto_name(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData);
d_field_conn_info_proto_name(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
                             F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_conn_info(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 NewFValue,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

d_field_conn_info_proto_ver(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                            F@_8, TrUserData)
    when N < 57 ->
    d_field_conn_info_proto_ver(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                F@_6,
                                F@_7,
                                F@_8,
                                TrUserData);
d_field_conn_info_proto_ver(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8,
                            TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_conn_info(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 NewFValue,
                                 F@_8,
                                 TrUserData).

d_field_conn_info_keepalive(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                            F@_8, TrUserData)
    when N < 57 ->
    d_field_conn_info_keepalive(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                F@_6,
                                F@_7,
                                F@_8,
                                TrUserData);
d_field_conn_info_keepalive(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _,
                            TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_conn_info(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 NewFValue,
                                 TrUserData).

skip_varint_conn_info(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                      TrUserData) ->
    skip_varint_conn_info(Rest,
                          Z1,
                          Z2,
                          F@_1,
                          F@_2,
                          F@_3,
                          F@_4,
                          F@_5,
                          F@_6,
                          F@_7,
                          F@_8,
                          TrUserData);
skip_varint_conn_info(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                      TrUserData) ->
    dfp_read_field_def_conn_info(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

skip_length_delimited_conn_info(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                F@_7, F@_8, TrUserData)
    when N < 57 ->
    skip_length_delimited_conn_info(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    F@_6,
                                    F@_7,
                                    F@_8,
                                    TrUserData);
skip_length_delimited_conn_info(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                F@_7, F@_8, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_conn_info(Rest2,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

skip_group_conn_info(Bin, FNum, Z2, F@_1, F@_2, F@_3,
                     F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_conn_info(Rest,
                                 0,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

skip_32_conn_info(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    dfp_read_field_def_conn_info(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

skip_64_conn_info(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    dfp_read_field_def_conn_info(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 TrUserData).

decode_msg_client_info(Bin, TrUserData) ->
    dfp_read_field_def_client_info(Bin,
                                   0,
                                   0,
                                   id(<<>>, TrUserData),
                                   id(<<>>, TrUserData),
                                   id(<<>>, TrUserData),
                                   id(<<>>, TrUserData),
                                   id(<<>>, TrUserData),
                                   id(0, TrUserData),
                                   id(<<>>, TrUserData),
                                   id(<<>>, TrUserData),
                                   id(false, TrUserData),
                                   id(false, TrUserData),
                                   TrUserData).

dfp_read_field_def_client_info(<<10, Rest/binary>>, Z1,
                               Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                               F@_8, F@_9, F@_10, TrUserData) ->
    d_field_client_info_node(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             F@_5,
                             F@_6,
                             F@_7,
                             F@_8,
                             F@_9,
                             F@_10,
                             TrUserData);
dfp_read_field_def_client_info(<<18, Rest/binary>>, Z1,
                               Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                               F@_8, F@_9, F@_10, TrUserData) ->
    d_field_client_info_clientid(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData);
dfp_read_field_def_client_info(<<26, Rest/binary>>, Z1,
                               Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                               F@_8, F@_9, F@_10, TrUserData) ->
    d_field_client_info_username(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData);
dfp_read_field_def_client_info(<<34, Rest/binary>>, Z1,
                               Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                               F@_8, F@_9, F@_10, TrUserData) ->
    d_field_client_info_password(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData);
dfp_read_field_def_client_info(<<42, Rest/binary>>, Z1,
                               Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                               F@_8, F@_9, F@_10, TrUserData) ->
    d_field_client_info_peerhost(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData);
dfp_read_field_def_client_info(<<48, Rest/binary>>, Z1,
                               Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                               F@_8, F@_9, F@_10, TrUserData) ->
    d_field_client_info_sockport(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData);
dfp_read_field_def_client_info(<<58, Rest/binary>>, Z1,
                               Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                               F@_8, F@_9, F@_10, TrUserData) ->
    d_field_client_info_protocol(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData);
dfp_read_field_def_client_info(<<66, Rest/binary>>, Z1,
                               Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                               F@_8, F@_9, F@_10, TrUserData) ->
    d_field_client_info_mountpoint(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   F@_9,
                                   F@_10,
                                   TrUserData);
dfp_read_field_def_client_info(<<72, Rest/binary>>, Z1,
                               Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                               F@_8, F@_9, F@_10, TrUserData) ->
    d_field_client_info_is_superuser(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     F@_5,
                                     F@_6,
                                     F@_7,
                                     F@_8,
                                     F@_9,
                                     F@_10,
                                     TrUserData);
dfp_read_field_def_client_info(<<80, Rest/binary>>, Z1,
                               Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                               F@_8, F@_9, F@_10, TrUserData) ->
    d_field_client_info_anonymous(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  F@_7,
                                  F@_8,
                                  F@_9,
                                  F@_10,
                                  TrUserData);
dfp_read_field_def_client_info(<<>>, 0, 0, F@_1, F@_2,
                               F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
                               _) ->
    #{node => F@_1, clientid => F@_2, username => F@_3,
      password => F@_4, peerhost => F@_5, sockport => F@_6,
      protocol => F@_7, mountpoint => F@_8,
      is_superuser => F@_9, anonymous => F@_10};
dfp_read_field_def_client_info(Other, Z1, Z2, F@_1,
                               F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
                               F@_10, TrUserData) ->
    dg_read_field_def_client_info(Other,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  F@_7,
                                  F@_8,
                                  F@_9,
                                  F@_10,
                                  TrUserData).

dg_read_field_def_client_info(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                              F@_8, F@_9, F@_10, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_client_info(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  F@_7,
                                  F@_8,
                                  F@_9,
                                  F@_10,
                                  TrUserData);
dg_read_field_def_client_info(<<0:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                              F@_8, F@_9, F@_10, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_client_info_node(Rest,
                                     0,
                                     0,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     F@_5,
                                     F@_6,
                                     F@_7,
                                     F@_8,
                                     F@_9,
                                     F@_10,
                                     TrUserData);
        18 ->
            d_field_client_info_clientid(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         F@_8,
                                         F@_9,
                                         F@_10,
                                         TrUserData);
        26 ->
            d_field_client_info_username(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         F@_8,
                                         F@_9,
                                         F@_10,
                                         TrUserData);
        34 ->
            d_field_client_info_password(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         F@_8,
                                         F@_9,
                                         F@_10,
                                         TrUserData);
        42 ->
            d_field_client_info_peerhost(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         F@_8,
                                         F@_9,
                                         F@_10,
                                         TrUserData);
        48 ->
            d_field_client_info_sockport(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         F@_8,
                                         F@_9,
                                         F@_10,
                                         TrUserData);
        58 ->
            d_field_client_info_protocol(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         F@_8,
                                         F@_9,
                                         F@_10,
                                         TrUserData);
        66 ->
            d_field_client_info_mountpoint(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           F@_6,
                                           F@_7,
                                           F@_8,
                                           F@_9,
                                           F@_10,
                                           TrUserData);
        72 ->
            d_field_client_info_is_superuser(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             F@_5,
                                             F@_6,
                                             F@_7,
                                             F@_8,
                                             F@_9,
                                             F@_10,
                                             TrUserData);
        80 ->
            d_field_client_info_anonymous(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_client_info(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            F@_5,
                                            F@_6,
                                            F@_7,
                                            F@_8,
                                            F@_9,
                                            F@_10,
                                            TrUserData);
                1 ->
                    skip_64_client_info(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        F@_6,
                                        F@_7,
                                        F@_8,
                                        F@_9,
                                        F@_10,
                                        TrUserData);
                2 ->
                    skip_length_delimited_client_info(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      TrUserData);
                3 ->
                    skip_group_client_info(Rest,
                                           Key bsr 3,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           F@_6,
                                           F@_7,
                                           F@_8,
                                           F@_9,
                                           F@_10,
                                           TrUserData);
                5 ->
                    skip_32_client_info(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        F@_6,
                                        F@_7,
                                        F@_8,
                                        F@_9,
                                        F@_10,
                                        TrUserData)
            end
    end;
dg_read_field_def_client_info(<<>>, 0, 0, F@_1, F@_2,
                              F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
                              _) ->
    #{node => F@_1, clientid => F@_2, username => F@_3,
      password => F@_4, peerhost => F@_5, sockport => F@_6,
      protocol => F@_7, mountpoint => F@_8,
      is_superuser => F@_9, anonymous => F@_10}.

d_field_client_info_node(<<1:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                         F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_client_info_node(Rest,
                             N + 7,
                             X bsl N + Acc,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             F@_5,
                             F@_6,
                             F@_7,
                             F@_8,
                             F@_9,
                             F@_10,
                             TrUserData);
d_field_client_info_node(<<0:1, X:7, Rest/binary>>, N,
                         Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
                         F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_client_info(RestF,
                                   0,
                                   0,
                                   NewFValue,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   F@_9,
                                   F@_10,
                                   TrUserData).

d_field_client_info_clientid(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                             F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_client_info_clientid(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData);
d_field_client_info_clientid(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
                             F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_client_info(RestF,
                                   0,
                                   0,
                                   F@_1,
                                   NewFValue,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   F@_9,
                                   F@_10,
                                   TrUserData).

d_field_client_info_username(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                             F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_client_info_username(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData);
d_field_client_info_username(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
                             F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_client_info(RestF,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   NewFValue,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   F@_9,
                                   F@_10,
                                   TrUserData).

d_field_client_info_password(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                             F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_client_info_password(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData);
d_field_client_info_password(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
                             F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_client_info(RestF,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   NewFValue,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   F@_9,
                                   F@_10,
                                   TrUserData).

d_field_client_info_peerhost(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                             F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_client_info_peerhost(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData);
d_field_client_info_peerhost(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
                             F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_client_info(RestF,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   NewFValue,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   F@_9,
                                   F@_10,
                                   TrUserData).

d_field_client_info_sockport(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                             F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_client_info_sockport(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData);
d_field_client_info_sockport(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
                             F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_client_info(RestF,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   NewFValue,
                                   F@_7,
                                   F@_8,
                                   F@_9,
                                   F@_10,
                                   TrUserData).

d_field_client_info_protocol(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                             F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_client_info_protocol(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData);
d_field_client_info_protocol(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _,
                             F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_client_info(RestF,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   NewFValue,
                                   F@_8,
                                   F@_9,
                                   F@_10,
                                   TrUserData).

d_field_client_info_mountpoint(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                               F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_client_info_mountpoint(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   F@_9,
                                   F@_10,
                                   TrUserData);
d_field_client_info_mountpoint(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                               _, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_client_info(RestF,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   NewFValue,
                                   F@_9,
                                   F@_10,
                                   TrUserData).

d_field_client_info_is_superuser(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                 F@_7, F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_client_info_is_superuser(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     F@_5,
                                     F@_6,
                                     F@_7,
                                     F@_8,
                                     F@_9,
                                     F@_10,
                                     TrUserData);
d_field_client_info_is_superuser(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                 F@_7, F@_8, _, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_client_info(RestF,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   NewFValue,
                                   F@_10,
                                   TrUserData).

d_field_client_info_anonymous(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                              F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_client_info_anonymous(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  F@_7,
                                  F@_8,
                                  F@_9,
                                  F@_10,
                                  TrUserData);
d_field_client_info_anonymous(<<0:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                              F@_8, F@_9, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_client_info(RestF,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   F@_9,
                                   NewFValue,
                                   TrUserData).

skip_varint_client_info(<<1:1, _:7, Rest/binary>>, Z1,
                        Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                        F@_9, F@_10, TrUserData) ->
    skip_varint_client_info(Rest,
                            Z1,
                            Z2,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            F@_5,
                            F@_6,
                            F@_7,
                            F@_8,
                            F@_9,
                            F@_10,
                            TrUserData);
skip_varint_client_info(<<0:1, _:7, Rest/binary>>, Z1,
                        Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                        F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_client_info(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   F@_9,
                                   F@_10,
                                   TrUserData).

skip_length_delimited_client_info(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                  F@_7, F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    skip_length_delimited_client_info(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      F@_6,
                                      F@_7,
                                      F@_8,
                                      F@_9,
                                      F@_10,
                                      TrUserData);
skip_length_delimited_client_info(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                  F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_client_info(Rest2,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   F@_9,
                                   F@_10,
                                   TrUserData).

skip_group_client_info(Bin, FNum, Z2, F@_1, F@_2, F@_3,
                       F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
                       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_client_info(Rest,
                                   0,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   F@_9,
                                   F@_10,
                                   TrUserData).

skip_32_client_info(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
                    TrUserData) ->
    dfp_read_field_def_client_info(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   F@_9,
                                   F@_10,
                                   TrUserData).

skip_64_client_info(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
                    TrUserData) ->
    dfp_read_field_def_client_info(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   F@_9,
                                   F@_10,
                                   TrUserData).

decode_msg_message(Bin, TrUserData) ->
    dfp_read_field_def_message(Bin,
                               0,
                               0,
                               id(<<>>, TrUserData),
                               id(<<>>, TrUserData),
                               id(0, TrUserData),
                               id(<<>>, TrUserData),
                               id(<<>>, TrUserData),
                               id(<<>>, TrUserData),
                               id(0, TrUserData),
                               TrUserData).

dfp_read_field_def_message(<<10, Rest/binary>>, Z1, Z2,
                           F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                           TrUserData) ->
    d_field_message_node(Rest,
                         Z1,
                         Z2,
                         F@_1,
                         F@_2,
                         F@_3,
                         F@_4,
                         F@_5,
                         F@_6,
                         F@_7,
                         TrUserData);
dfp_read_field_def_message(<<18, Rest/binary>>, Z1, Z2,
                           F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                           TrUserData) ->
    d_field_message_id(Rest,
                       Z1,
                       Z2,
                       F@_1,
                       F@_2,
                       F@_3,
                       F@_4,
                       F@_5,
                       F@_6,
                       F@_7,
                       TrUserData);
dfp_read_field_def_message(<<24, Rest/binary>>, Z1, Z2,
                           F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                           TrUserData) ->
    d_field_message_qos(Rest,
                        Z1,
                        Z2,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData);
dfp_read_field_def_message(<<34, Rest/binary>>, Z1, Z2,
                           F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                           TrUserData) ->
    d_field_message_from(Rest,
                         Z1,
                         Z2,
                         F@_1,
                         F@_2,
                         F@_3,
                         F@_4,
                         F@_5,
                         F@_6,
                         F@_7,
                         TrUserData);
dfp_read_field_def_message(<<42, Rest/binary>>, Z1, Z2,
                           F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                           TrUserData) ->
    d_field_message_topic(Rest,
                          Z1,
                          Z2,
                          F@_1,
                          F@_2,
                          F@_3,
                          F@_4,
                          F@_5,
                          F@_6,
                          F@_7,
                          TrUserData);
dfp_read_field_def_message(<<50, Rest/binary>>, Z1, Z2,
                           F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                           TrUserData) ->
    d_field_message_payload(Rest,
                            Z1,
                            Z2,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            F@_5,
                            F@_6,
                            F@_7,
                            TrUserData);
dfp_read_field_def_message(<<56, Rest/binary>>, Z1, Z2,
                           F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                           TrUserData) ->
    d_field_message_timestamp(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              F@_5,
                              F@_6,
                              F@_7,
                              TrUserData);
dfp_read_field_def_message(<<>>, 0, 0, F@_1, F@_2, F@_3,
                           F@_4, F@_5, F@_6, F@_7, _) ->
    #{node => F@_1, id => F@_2, qos => F@_3, from => F@_4,
      topic => F@_5, payload => F@_6, timestamp => F@_7};
dfp_read_field_def_message(Other, Z1, Z2, F@_1, F@_2,
                           F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dg_read_field_def_message(Other,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              F@_5,
                              F@_6,
                              F@_7,
                              TrUserData).

dg_read_field_def_message(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                          TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_message(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              F@_5,
                              F@_6,
                              F@_7,
                              TrUserData);
dg_read_field_def_message(<<0:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                          TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_message_node(Rest,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 TrUserData);
        18 ->
            d_field_message_id(Rest,
                               0,
                               0,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               TrUserData);
        24 ->
            d_field_message_qos(Rest,
                                0,
                                0,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                F@_6,
                                F@_7,
                                TrUserData);
        34 ->
            d_field_message_from(Rest,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 TrUserData);
        42 ->
            d_field_message_topic(Rest,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  F@_7,
                                  TrUserData);
        50 ->
            d_field_message_payload(Rest,
                                    0,
                                    0,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    F@_6,
                                    F@_7,
                                    TrUserData);
        56 ->
            d_field_message_timestamp(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      F@_6,
                                      F@_7,
                                      TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_message(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        F@_6,
                                        F@_7,
                                        TrUserData);
                1 ->
                    skip_64_message(Rest,
                                    0,
                                    0,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    F@_6,
                                    F@_7,
                                    TrUserData);
                2 ->
                    skip_length_delimited_message(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  TrUserData);
                3 ->
                    skip_group_message(Rest,
                                       Key bsr 3,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       F@_5,
                                       F@_6,
                                       F@_7,
                                       TrUserData);
                5 ->
                    skip_32_message(Rest,
                                    0,
                                    0,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    F@_6,
                                    F@_7,
                                    TrUserData)
            end
    end;
dg_read_field_def_message(<<>>, 0, 0, F@_1, F@_2, F@_3,
                          F@_4, F@_5, F@_6, F@_7, _) ->
    #{node => F@_1, id => F@_2, qos => F@_3, from => F@_4,
      topic => F@_5, payload => F@_6, timestamp => F@_7}.

d_field_message_node(<<1:1, X:7, Rest/binary>>, N, Acc,
                     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_message_node(Rest,
                         N + 7,
                         X bsl N + Acc,
                         F@_1,
                         F@_2,
                         F@_3,
                         F@_4,
                         F@_5,
                         F@_6,
                         F@_7,
                         TrUserData);
d_field_message_node(<<0:1, X:7, Rest/binary>>, N, Acc,
                     _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_message(RestF,
                               0,
                               0,
                               NewFValue,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               TrUserData).

d_field_message_id(<<1:1, X:7, Rest/binary>>, N, Acc,
                   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_message_id(Rest,
                       N + 7,
                       X bsl N + Acc,
                       F@_1,
                       F@_2,
                       F@_3,
                       F@_4,
                       F@_5,
                       F@_6,
                       F@_7,
                       TrUserData);
d_field_message_id(<<0:1, X:7, Rest/binary>>, N, Acc,
                   F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_message(RestF,
                               0,
                               0,
                               F@_1,
                               NewFValue,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               TrUserData).

d_field_message_qos(<<1:1, X:7, Rest/binary>>, N, Acc,
                    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_message_qos(Rest,
                        N + 7,
                        X bsl N + Acc,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData);
d_field_message_qos(<<0:1, X:7, Rest/binary>>, N, Acc,
                    F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_message(RestF,
                               0,
                               0,
                               F@_1,
                               F@_2,
                               NewFValue,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               TrUserData).

d_field_message_from(<<1:1, X:7, Rest/binary>>, N, Acc,
                     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_message_from(Rest,
                         N + 7,
                         X bsl N + Acc,
                         F@_1,
                         F@_2,
                         F@_3,
                         F@_4,
                         F@_5,
                         F@_6,
                         F@_7,
                         TrUserData);
d_field_message_from(<<0:1, X:7, Rest/binary>>, N, Acc,
                     F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_message(RestF,
                               0,
                               0,
                               F@_1,
                               F@_2,
                               F@_3,
                               NewFValue,
                               F@_5,
                               F@_6,
                               F@_7,
                               TrUserData).

d_field_message_topic(<<1:1, X:7, Rest/binary>>, N, Acc,
                      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_message_topic(Rest,
                          N + 7,
                          X bsl N + Acc,
                          F@_1,
                          F@_2,
                          F@_3,
                          F@_4,
                          F@_5,
                          F@_6,
                          F@_7,
                          TrUserData);
d_field_message_topic(<<0:1, X:7, Rest/binary>>, N, Acc,
                      F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_message(RestF,
                               0,
                               0,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               NewFValue,
                               F@_6,
                               F@_7,
                               TrUserData).

d_field_message_payload(<<1:1, X:7, Rest/binary>>, N,
                        Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                        TrUserData)
    when N < 57 ->
    d_field_message_payload(Rest,
                            N + 7,
                            X bsl N + Acc,
                            F@_1,
                            F@_2,
                            F@_3,
                            F@_4,
                            F@_5,
                            F@_6,
                            F@_7,
                            TrUserData);
d_field_message_payload(<<0:1, X:7, Rest/binary>>, N,
                        Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
                        TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_message(RestF,
                               0,
                               0,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               NewFValue,
                               F@_7,
                               TrUserData).

d_field_message_timestamp(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                          TrUserData)
    when N < 57 ->
    d_field_message_timestamp(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              F@_5,
                              F@_6,
                              F@_7,
                              TrUserData);
d_field_message_timestamp(<<0:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _,
                          TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_message(RestF,
                               0,
                               0,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               NewFValue,
                               TrUserData).

skip_varint_message(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    skip_varint_message(Rest,
                        Z1,
                        Z2,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData);
skip_varint_message(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_message(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               TrUserData).

skip_length_delimited_message(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                              TrUserData)
    when N < 57 ->
    skip_length_delimited_message(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  F@_7,
                                  TrUserData);
skip_length_delimited_message(<<0:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                              TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_message(Rest2,
                               0,
                               0,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               TrUserData).

skip_group_message(Bin, FNum, Z2, F@_1, F@_2, F@_3,
                   F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_message(Rest,
                               0,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               TrUserData).

skip_32_message(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_message(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               TrUserData).

skip_64_message(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_message(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               TrUserData).

decode_msg_property(Bin, TrUserData) ->
    dfp_read_field_def_property(Bin,
                                0,
                                0,
                                id(<<>>, TrUserData),
                                id(<<>>, TrUserData),
                                TrUserData).

dfp_read_field_def_property(<<10, Rest/binary>>, Z1, Z2,
                            F@_1, F@_2, TrUserData) ->
    d_field_property_name(Rest,
                          Z1,
                          Z2,
                          F@_1,
                          F@_2,
                          TrUserData);
dfp_read_field_def_property(<<18, Rest/binary>>, Z1, Z2,
                            F@_1, F@_2, TrUserData) ->
    d_field_property_value(Rest,
                           Z1,
                           Z2,
                           F@_1,
                           F@_2,
                           TrUserData);
dfp_read_field_def_property(<<>>, 0, 0, F@_1, F@_2,
                            _) ->
    #{name => F@_1, value => F@_2};
dfp_read_field_def_property(Other, Z1, Z2, F@_1, F@_2,
                            TrUserData) ->
    dg_read_field_def_property(Other,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               TrUserData).

dg_read_field_def_property(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_property(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               F@_2,
                               TrUserData);
dg_read_field_def_property(<<0:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_property_name(Rest,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  TrUserData);
        18 ->
            d_field_property_value(Rest,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_property(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
                1 ->
                    skip_64_property(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 ->
                    skip_length_delimited_property(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData);
                3 ->
                    skip_group_property(Rest,
                                        Key bsr 3,
                                        0,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
                5 ->
                    skip_32_property(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_property(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{name => F@_1, value => F@_2}.

d_field_property_name(<<1:1, X:7, Rest/binary>>, N, Acc,
                      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_property_name(Rest,
                          N + 7,
                          X bsl N + Acc,
                          F@_1,
                          F@_2,
                          TrUserData);
d_field_property_name(<<0:1, X:7, Rest/binary>>, N, Acc,
                      _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_property(RestF,
                                0,
                                0,
                                NewFValue,
                                F@_2,
                                TrUserData).

d_field_property_value(<<1:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_property_value(Rest,
                           N + 7,
                           X bsl N + Acc,
                           F@_1,
                           F@_2,
                           TrUserData);
d_field_property_value(<<0:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_property(RestF,
                                0,
                                0,
                                F@_1,
                                NewFValue,
                                TrUserData).

skip_varint_property(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                     F@_1, F@_2, TrUserData) ->
    skip_varint_property(Rest,
                         Z1,
                         Z2,
                         F@_1,
                         F@_2,
                         TrUserData);
skip_varint_property(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_property(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                TrUserData).

skip_length_delimited_property(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_property(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   TrUserData);
skip_length_delimited_property(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_property(Rest2,
                                0,
                                0,
                                F@_1,
                                F@_2,
                                TrUserData).

skip_group_property(Bin, FNum, Z2, F@_1, F@_2,
                    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_property(Rest,
                                0,
                                Z2,
                                F@_1,
                                F@_2,
                                TrUserData).

skip_32_property(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                 F@_2, TrUserData) ->
    dfp_read_field_def_property(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                TrUserData).

skip_64_property(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                 F@_2, TrUserData) ->
    dfp_read_field_def_property(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                TrUserData).

decode_msg_topic_filter(Bin, TrUserData) ->
    dfp_read_field_def_topic_filter(Bin,
                                    0,
                                    0,
                                    id(<<>>, TrUserData),
                                    id(0, TrUserData),
                                    TrUserData).

dfp_read_field_def_topic_filter(<<10, Rest/binary>>, Z1,
                                Z2, F@_1, F@_2, TrUserData) ->
    d_field_topic_filter_name(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              TrUserData);
dfp_read_field_def_topic_filter(<<16, Rest/binary>>, Z1,
                                Z2, F@_1, F@_2, TrUserData) ->
    d_field_topic_filter_qos(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             TrUserData);
dfp_read_field_def_topic_filter(<<>>, 0, 0, F@_1, F@_2,
                                _) ->
    #{name => F@_1, qos => F@_2};
dfp_read_field_def_topic_filter(Other, Z1, Z2, F@_1,
                                F@_2, TrUserData) ->
    dg_read_field_def_topic_filter(Other,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   TrUserData).

dg_read_field_def_topic_filter(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_topic_filter(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   TrUserData);
dg_read_field_def_topic_filter(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_topic_filter_name(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      TrUserData);
        16 ->
            d_field_topic_filter_qos(Rest,
                                     0,
                                     0,
                                     F@_1,
                                     F@_2,
                                     TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_topic_filter(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
                1 ->
                    skip_64_topic_filter(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
                2 ->
                    skip_length_delimited_topic_filter(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData);
                3 ->
                    skip_group_topic_filter(Rest,
                                            Key bsr 3,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
                5 ->
                    skip_32_topic_filter(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_topic_filter(<<>>, 0, 0, F@_1, F@_2,
                               _) ->
    #{name => F@_1, qos => F@_2}.

d_field_topic_filter_name(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_topic_filter_name(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F@_1,
                              F@_2,
                              TrUserData);
d_field_topic_filter_name(<<0:1, X:7, Rest/binary>>, N,
                          Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_topic_filter(RestF,
                                    0,
                                    0,
                                    NewFValue,
                                    F@_2,
                                    TrUserData).

d_field_topic_filter_qos(<<1:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_topic_filter_qos(Rest,
                             N + 7,
                             X bsl N + Acc,
                             F@_1,
                             F@_2,
                             TrUserData);
d_field_topic_filter_qos(<<0:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_topic_filter(RestF,
                                    0,
                                    0,
                                    F@_1,
                                    NewFValue,
                                    TrUserData).

skip_varint_topic_filter(<<1:1, _:7, Rest/binary>>, Z1,
                         Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_topic_filter(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             TrUserData);
skip_varint_topic_filter(<<0:1, _:7, Rest/binary>>, Z1,
                         Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_topic_filter(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

skip_length_delimited_topic_filter(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_topic_filter(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       F@_2,
                                       TrUserData);
skip_length_delimited_topic_filter(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_topic_filter(Rest2,
                                    0,
                                    0,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

skip_group_topic_filter(Bin, FNum, Z2, F@_1, F@_2,
                        TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_topic_filter(Rest,
                                    0,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

skip_32_topic_filter(<<_:32, Rest/binary>>, Z1, Z2,
                     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_topic_filter(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

skip_64_topic_filter(<<_:64, Rest/binary>>, Z1, Z2,
                     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_topic_filter(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData).

decode_msg_sub_opts(Bin, TrUserData) ->
    dfp_read_field_def_sub_opts(Bin,
                                0,
                                0,
                                id(0, TrUserData),
                                id(<<>>, TrUserData),
                                id(0, TrUserData),
                                id(0, TrUserData),
                                id(0, TrUserData),
                                TrUserData).

dfp_read_field_def_sub_opts(<<8, Rest/binary>>, Z1, Z2,
                            F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_sub_opts_qos(Rest,
                         Z1,
                         Z2,
                         F@_1,
                         F@_2,
                         F@_3,
                         F@_4,
                         F@_5,
                         TrUserData);
dfp_read_field_def_sub_opts(<<18, Rest/binary>>, Z1, Z2,
                            F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_sub_opts_share(Rest,
                           Z1,
                           Z2,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           TrUserData);
dfp_read_field_def_sub_opts(<<24, Rest/binary>>, Z1, Z2,
                            F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_sub_opts_rh(Rest,
                        Z1,
                        Z2,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData);
dfp_read_field_def_sub_opts(<<32, Rest/binary>>, Z1, Z2,
                            F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_sub_opts_rap(Rest,
                         Z1,
                         Z2,
                         F@_1,
                         F@_2,
                         F@_3,
                         F@_4,
                         F@_5,
                         TrUserData);
dfp_read_field_def_sub_opts(<<40, Rest/binary>>, Z1, Z2,
                            F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_sub_opts_nl(Rest,
                        Z1,
                        Z2,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData);
dfp_read_field_def_sub_opts(<<>>, 0, 0, F@_1, F@_2,
                            F@_3, F@_4, F@_5, _) ->
    #{qos => F@_1, share => F@_2, rh => F@_3, rap => F@_4,
      nl => F@_5};
dfp_read_field_def_sub_opts(Other, Z1, Z2, F@_1, F@_2,
                            F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_sub_opts(Other,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               TrUserData).

dg_read_field_def_sub_opts(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sub_opts(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               TrUserData);
dg_read_field_def_sub_opts(<<0:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_sub_opts_qos(Rest,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 TrUserData);
        18 ->
            d_field_sub_opts_share(Rest,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   TrUserData);
        24 ->
            d_field_sub_opts_rh(Rest,
                                0,
                                0,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                TrUserData);
        32 ->
            d_field_sub_opts_rap(Rest,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 TrUserData);
        40 ->
            d_field_sub_opts_nl(Rest,
                                0,
                                0,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_sub_opts(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         TrUserData);
                1 ->
                    skip_64_sub_opts(Rest,
                                     0,
                                     0,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     F@_5,
                                     TrUserData);
                2 ->
                    skip_length_delimited_sub_opts(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   TrUserData);
                3 ->
                    skip_group_sub_opts(Rest,
                                        Key bsr 3,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        TrUserData);
                5 ->
                    skip_32_sub_opts(Rest,
                                     0,
                                     0,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     F@_5,
                                     TrUserData)
            end
    end;
dg_read_field_def_sub_opts(<<>>, 0, 0, F@_1, F@_2, F@_3,
                           F@_4, F@_5, _) ->
    #{qos => F@_1, share => F@_2, rh => F@_3, rap => F@_4,
      nl => F@_5}.

d_field_sub_opts_qos(<<1:1, X:7, Rest/binary>>, N, Acc,
                     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_sub_opts_qos(Rest,
                         N + 7,
                         X bsl N + Acc,
                         F@_1,
                         F@_2,
                         F@_3,
                         F@_4,
                         F@_5,
                         TrUserData);
d_field_sub_opts_qos(<<0:1, X:7, Rest/binary>>, N, Acc,
                     _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_sub_opts(RestF,
                                0,
                                0,
                                NewFValue,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                TrUserData).

d_field_sub_opts_share(<<1:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_sub_opts_share(Rest,
                           N + 7,
                           X bsl N + Acc,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           TrUserData);
d_field_sub_opts_share(<<0:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_sub_opts(RestF,
                                0,
                                0,
                                F@_1,
                                NewFValue,
                                F@_3,
                                F@_4,
                                F@_5,
                                TrUserData).

d_field_sub_opts_rh(<<1:1, X:7, Rest/binary>>, N, Acc,
                    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_sub_opts_rh(Rest,
                        N + 7,
                        X bsl N + Acc,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData);
d_field_sub_opts_rh(<<0:1, X:7, Rest/binary>>, N, Acc,
                    F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_sub_opts(RestF,
                                0,
                                0,
                                F@_1,
                                F@_2,
                                NewFValue,
                                F@_4,
                                F@_5,
                                TrUserData).

d_field_sub_opts_rap(<<1:1, X:7, Rest/binary>>, N, Acc,
                     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_sub_opts_rap(Rest,
                         N + 7,
                         X bsl N + Acc,
                         F@_1,
                         F@_2,
                         F@_3,
                         F@_4,
                         F@_5,
                         TrUserData);
d_field_sub_opts_rap(<<0:1, X:7, Rest/binary>>, N, Acc,
                     F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_sub_opts(RestF,
                                0,
                                0,
                                F@_1,
                                F@_2,
                                F@_3,
                                NewFValue,
                                F@_5,
                                TrUserData).

d_field_sub_opts_nl(<<1:1, X:7, Rest/binary>>, N, Acc,
                    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_sub_opts_nl(Rest,
                        N + 7,
                        X bsl N + Acc,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData);
d_field_sub_opts_nl(<<0:1, X:7, Rest/binary>>, N, Acc,
                    F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_sub_opts(RestF,
                                0,
                                0,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                NewFValue,
                                TrUserData).

skip_varint_sub_opts(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_sub_opts(Rest,
                         Z1,
                         Z2,
                         F@_1,
                         F@_2,
                         F@_3,
                         F@_4,
                         F@_5,
                         TrUserData);
skip_varint_sub_opts(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_sub_opts(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                TrUserData).

skip_length_delimited_sub_opts(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_sub_opts(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   TrUserData);
skip_length_delimited_sub_opts(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                               TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sub_opts(Rest2,
                                0,
                                0,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                TrUserData).

skip_group_sub_opts(Bin, FNum, Z2, F@_1, F@_2, F@_3,
                    F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sub_opts(Rest,
                                0,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                TrUserData).

skip_32_sub_opts(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_sub_opts(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                TrUserData).

skip_64_sub_opts(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_sub_opts(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                TrUserData).

'd_enum_client_check_acl_request.AclReqType'(0) ->
    'PUBLISH';
'd_enum_client_check_acl_request.AclReqType'(1) ->
    'SUBSCRIBE';
'd_enum_client_check_acl_request.AclReqType'(V) -> V.

'd_enum_valued_response.ResponsedType'(0) -> 'IGNORE';
'd_enum_valued_response.ResponsedType'(1) -> 'CONTINUE';
'd_enum_valued_response.ResponsedType'(2) ->
    'STOP_AND_RETURN';
'd_enum_valued_response.ResponsedType'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        provider_loaded_request ->
            merge_msg_provider_loaded_request(Prev,
                                              New,
                                              TrUserData);
        loaded_response ->
            merge_msg_loaded_response(Prev, New, TrUserData);
        provider_unloaded_request ->
            merge_msg_provider_unloaded_request(Prev,
                                                New,
                                                TrUserData);
        client_connect_request ->
            merge_msg_client_connect_request(Prev, New, TrUserData);
        client_connack_request ->
            merge_msg_client_connack_request(Prev, New, TrUserData);
        client_connected_request ->
            merge_msg_client_connected_request(Prev,
                                               New,
                                               TrUserData);
        client_disconnected_request ->
            merge_msg_client_disconnected_request(Prev,
                                                  New,
                                                  TrUserData);
        client_authenticate_request ->
            merge_msg_client_authenticate_request(Prev,
                                                  New,
                                                  TrUserData);
        client_check_acl_request ->
            merge_msg_client_check_acl_request(Prev,
                                               New,
                                               TrUserData);
        client_subscribe_request ->
            merge_msg_client_subscribe_request(Prev,
                                               New,
                                               TrUserData);
        client_unsubscribe_request ->
            merge_msg_client_unsubscribe_request(Prev,
                                                 New,
                                                 TrUserData);
        session_created_request ->
            merge_msg_session_created_request(Prev,
                                              New,
                                              TrUserData);
        session_subscribed_request ->
            merge_msg_session_subscribed_request(Prev,
                                                 New,
                                                 TrUserData);
        session_unsubscribed_request ->
            merge_msg_session_unsubscribed_request(Prev,
                                                   New,
                                                   TrUserData);
        session_resumed_request ->
            merge_msg_session_resumed_request(Prev,
                                              New,
                                              TrUserData);
        session_discarded_request ->
            merge_msg_session_discarded_request(Prev,
                                                New,
                                                TrUserData);
        session_takeovered_request ->
            merge_msg_session_takeovered_request(Prev,
                                                 New,
                                                 TrUserData);
        session_terminated_request ->
            merge_msg_session_terminated_request(Prev,
                                                 New,
                                                 TrUserData);
        message_publish_request ->
            merge_msg_message_publish_request(Prev,
                                              New,
                                              TrUserData);
        message_delivered_request ->
            merge_msg_message_delivered_request(Prev,
                                                New,
                                                TrUserData);
        message_dropped_request ->
            merge_msg_message_dropped_request(Prev,
                                              New,
                                              TrUserData);
        message_acked_request ->
            merge_msg_message_acked_request(Prev, New, TrUserData);
        empty_success ->
            merge_msg_empty_success(Prev, New, TrUserData);
        valued_response ->
            merge_msg_valued_response(Prev, New, TrUserData);
        broker_info ->
            merge_msg_broker_info(Prev, New, TrUserData);
        hook_spec -> merge_msg_hook_spec(Prev, New, TrUserData);
        conn_info -> merge_msg_conn_info(Prev, New, TrUserData);
        client_info ->
            merge_msg_client_info(Prev, New, TrUserData);
        message -> merge_msg_message(Prev, New, TrUserData);
        property -> merge_msg_property(Prev, New, TrUserData);
        topic_filter ->
            merge_msg_topic_filter(Prev, New, TrUserData);
        sub_opts -> merge_msg_sub_opts(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_provider_loaded_request/3}).
merge_msg_provider_loaded_request(PMsg, NMsg,
                                  TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{broker := PFbroker}, #{broker := NFbroker}} ->
            S1#{broker =>
                    merge_msg_broker_info(PFbroker, NFbroker, TrUserData)};
        {_, #{broker := NFbroker}} -> S1#{broker => NFbroker};
        {#{broker := PFbroker}, _} -> S1#{broker => PFbroker};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_loaded_response/3}).
merge_msg_loaded_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{hooks := PFhooks}, #{hooks := NFhooks}} ->
            S1#{hooks => 'erlang_++'(PFhooks, NFhooks, TrUserData)};
        {_, #{hooks := NFhooks}} -> S1#{hooks => NFhooks};
        {#{hooks := PFhooks}, _} -> S1#{hooks => PFhooks};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_provider_unloaded_request/3}).
merge_msg_provider_unloaded_request(_Prev, New,
                                    _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_client_connect_request/3}).
merge_msg_client_connect_request(PMsg, NMsg,
                                 TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{conninfo := PFconninfo},
              #{conninfo := NFconninfo}} ->
                 S1#{conninfo =>
                         merge_msg_conn_info(PFconninfo,
                                             NFconninfo,
                                             TrUserData)};
             {_, #{conninfo := NFconninfo}} ->
                 S1#{conninfo => NFconninfo};
             {#{conninfo := PFconninfo}, _} ->
                 S1#{conninfo => PFconninfo};
             {_, _} -> S1
         end,
    case {PMsg, NMsg} of
        {#{props := PFprops}, #{props := NFprops}} ->
            S2#{props => 'erlang_++'(PFprops, NFprops, TrUserData)};
        {_, #{props := NFprops}} -> S2#{props => NFprops};
        {#{props := PFprops}, _} -> S2#{props => PFprops};
        {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_client_connack_request/3}).
merge_msg_client_connack_request(PMsg, NMsg,
                                 TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{conninfo := PFconninfo},
              #{conninfo := NFconninfo}} ->
                 S1#{conninfo =>
                         merge_msg_conn_info(PFconninfo,
                                             NFconninfo,
                                             TrUserData)};
             {_, #{conninfo := NFconninfo}} ->
                 S1#{conninfo => NFconninfo};
             {#{conninfo := PFconninfo}, _} ->
                 S1#{conninfo => PFconninfo};
             {_, _} -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{result_code := NFresult_code}} ->
                 S2#{result_code => NFresult_code};
             {#{result_code := PFresult_code}, _} ->
                 S2#{result_code => PFresult_code};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {#{props := PFprops}, #{props := NFprops}} ->
            S3#{props => 'erlang_++'(PFprops, NFprops, TrUserData)};
        {_, #{props := NFprops}} -> S3#{props => NFprops};
        {#{props := PFprops}, _} -> S3#{props => PFprops};
        {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_client_connected_request/3}).
merge_msg_client_connected_request(PMsg, NMsg,
                                   TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{clientinfo := PFclientinfo},
         #{clientinfo := NFclientinfo}} ->
            S1#{clientinfo =>
                    merge_msg_client_info(PFclientinfo,
                                          NFclientinfo,
                                          TrUserData)};
        {_, #{clientinfo := NFclientinfo}} ->
            S1#{clientinfo => NFclientinfo};
        {#{clientinfo := PFclientinfo}, _} ->
            S1#{clientinfo => PFclientinfo};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_client_disconnected_request/3}).
merge_msg_client_disconnected_request(PMsg, NMsg,
                                      TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{clientinfo := PFclientinfo},
              #{clientinfo := NFclientinfo}} ->
                 S1#{clientinfo =>
                         merge_msg_client_info(PFclientinfo,
                                               NFclientinfo,
                                               TrUserData)};
             {_, #{clientinfo := NFclientinfo}} ->
                 S1#{clientinfo => NFclientinfo};
             {#{clientinfo := PFclientinfo}, _} ->
                 S1#{clientinfo => PFclientinfo};
             {_, _} -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{reason := NFreason}} -> S2#{reason => NFreason};
        {#{reason := PFreason}, _} -> S2#{reason => PFreason};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_client_authenticate_request/3}).
merge_msg_client_authenticate_request(PMsg, NMsg,
                                      TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{clientinfo := PFclientinfo},
              #{clientinfo := NFclientinfo}} ->
                 S1#{clientinfo =>
                         merge_msg_client_info(PFclientinfo,
                                               NFclientinfo,
                                               TrUserData)};
             {_, #{clientinfo := NFclientinfo}} ->
                 S1#{clientinfo => NFclientinfo};
             {#{clientinfo := PFclientinfo}, _} ->
                 S1#{clientinfo => PFclientinfo};
             {_, _} -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{result := NFresult}} -> S2#{result => NFresult};
        {#{result := PFresult}, _} -> S2#{result => PFresult};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_client_check_acl_request/3}).
merge_msg_client_check_acl_request(PMsg, NMsg,
                                   TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{clientinfo := PFclientinfo},
              #{clientinfo := NFclientinfo}} ->
                 S1#{clientinfo =>
                         merge_msg_client_info(PFclientinfo,
                                               NFclientinfo,
                                               TrUserData)};
             {_, #{clientinfo := NFclientinfo}} ->
                 S1#{clientinfo => NFclientinfo};
             {#{clientinfo := PFclientinfo}, _} ->
                 S1#{clientinfo => PFclientinfo};
             {_, _} -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{type := NFtype}} -> S2#{type => NFtype};
             {#{type := PFtype}, _} -> S2#{type => PFtype};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{topic := NFtopic}} -> S3#{topic => NFtopic};
             {#{topic := PFtopic}, _} -> S3#{topic => PFtopic};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{result := NFresult}} -> S4#{result => NFresult};
        {#{result := PFresult}, _} -> S4#{result => PFresult};
        _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_client_subscribe_request/3}).
merge_msg_client_subscribe_request(PMsg, NMsg,
                                   TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{clientinfo := PFclientinfo},
              #{clientinfo := NFclientinfo}} ->
                 S1#{clientinfo =>
                         merge_msg_client_info(PFclientinfo,
                                               NFclientinfo,
                                               TrUserData)};
             {_, #{clientinfo := NFclientinfo}} ->
                 S1#{clientinfo => NFclientinfo};
             {#{clientinfo := PFclientinfo}, _} ->
                 S1#{clientinfo => PFclientinfo};
             {_, _} -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {#{props := PFprops}, #{props := NFprops}} ->
                 S2#{props => 'erlang_++'(PFprops, NFprops, TrUserData)};
             {_, #{props := NFprops}} -> S2#{props => NFprops};
             {#{props := PFprops}, _} -> S2#{props => PFprops};
             {_, _} -> S2
         end,
    case {PMsg, NMsg} of
        {#{topic_filters := PFtopic_filters},
         #{topic_filters := NFtopic_filters}} ->
            S3#{topic_filters =>
                    'erlang_++'(PFtopic_filters,
                                NFtopic_filters,
                                TrUserData)};
        {_, #{topic_filters := NFtopic_filters}} ->
            S3#{topic_filters => NFtopic_filters};
        {#{topic_filters := PFtopic_filters}, _} ->
            S3#{topic_filters => PFtopic_filters};
        {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_client_unsubscribe_request/3}).
merge_msg_client_unsubscribe_request(PMsg, NMsg,
                                     TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{clientinfo := PFclientinfo},
              #{clientinfo := NFclientinfo}} ->
                 S1#{clientinfo =>
                         merge_msg_client_info(PFclientinfo,
                                               NFclientinfo,
                                               TrUserData)};
             {_, #{clientinfo := NFclientinfo}} ->
                 S1#{clientinfo => NFclientinfo};
             {#{clientinfo := PFclientinfo}, _} ->
                 S1#{clientinfo => PFclientinfo};
             {_, _} -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {#{props := PFprops}, #{props := NFprops}} ->
                 S2#{props => 'erlang_++'(PFprops, NFprops, TrUserData)};
             {_, #{props := NFprops}} -> S2#{props => NFprops};
             {#{props := PFprops}, _} -> S2#{props => PFprops};
             {_, _} -> S2
         end,
    case {PMsg, NMsg} of
        {#{topic_filters := PFtopic_filters},
         #{topic_filters := NFtopic_filters}} ->
            S3#{topic_filters =>
                    'erlang_++'(PFtopic_filters,
                                NFtopic_filters,
                                TrUserData)};
        {_, #{topic_filters := NFtopic_filters}} ->
            S3#{topic_filters => NFtopic_filters};
        {#{topic_filters := PFtopic_filters}, _} ->
            S3#{topic_filters => PFtopic_filters};
        {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_session_created_request/3}).
merge_msg_session_created_request(PMsg, NMsg,
                                  TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{clientinfo := PFclientinfo},
         #{clientinfo := NFclientinfo}} ->
            S1#{clientinfo =>
                    merge_msg_client_info(PFclientinfo,
                                          NFclientinfo,
                                          TrUserData)};
        {_, #{clientinfo := NFclientinfo}} ->
            S1#{clientinfo => NFclientinfo};
        {#{clientinfo := PFclientinfo}, _} ->
            S1#{clientinfo => PFclientinfo};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_session_subscribed_request/3}).
merge_msg_session_subscribed_request(PMsg, NMsg,
                                     TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{clientinfo := PFclientinfo},
              #{clientinfo := NFclientinfo}} ->
                 S1#{clientinfo =>
                         merge_msg_client_info(PFclientinfo,
                                               NFclientinfo,
                                               TrUserData)};
             {_, #{clientinfo := NFclientinfo}} ->
                 S1#{clientinfo => NFclientinfo};
             {#{clientinfo := PFclientinfo}, _} ->
                 S1#{clientinfo => PFclientinfo};
             {_, _} -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{topic := NFtopic}} -> S2#{topic => NFtopic};
             {#{topic := PFtopic}, _} -> S2#{topic => PFtopic};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {#{subopts := PFsubopts}, #{subopts := NFsubopts}} ->
            S3#{subopts =>
                    merge_msg_sub_opts(PFsubopts, NFsubopts, TrUserData)};
        {_, #{subopts := NFsubopts}} ->
            S3#{subopts => NFsubopts};
        {#{subopts := PFsubopts}, _} ->
            S3#{subopts => PFsubopts};
        {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_session_unsubscribed_request/3}).
merge_msg_session_unsubscribed_request(PMsg, NMsg,
                                       TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{clientinfo := PFclientinfo},
              #{clientinfo := NFclientinfo}} ->
                 S1#{clientinfo =>
                         merge_msg_client_info(PFclientinfo,
                                               NFclientinfo,
                                               TrUserData)};
             {_, #{clientinfo := NFclientinfo}} ->
                 S1#{clientinfo => NFclientinfo};
             {#{clientinfo := PFclientinfo}, _} ->
                 S1#{clientinfo => PFclientinfo};
             {_, _} -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{topic := NFtopic}} -> S2#{topic => NFtopic};
        {#{topic := PFtopic}, _} -> S2#{topic => PFtopic};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_session_resumed_request/3}).
merge_msg_session_resumed_request(PMsg, NMsg,
                                  TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{clientinfo := PFclientinfo},
         #{clientinfo := NFclientinfo}} ->
            S1#{clientinfo =>
                    merge_msg_client_info(PFclientinfo,
                                          NFclientinfo,
                                          TrUserData)};
        {_, #{clientinfo := NFclientinfo}} ->
            S1#{clientinfo => NFclientinfo};
        {#{clientinfo := PFclientinfo}, _} ->
            S1#{clientinfo => PFclientinfo};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_session_discarded_request/3}).
merge_msg_session_discarded_request(PMsg, NMsg,
                                    TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{clientinfo := PFclientinfo},
         #{clientinfo := NFclientinfo}} ->
            S1#{clientinfo =>
                    merge_msg_client_info(PFclientinfo,
                                          NFclientinfo,
                                          TrUserData)};
        {_, #{clientinfo := NFclientinfo}} ->
            S1#{clientinfo => NFclientinfo};
        {#{clientinfo := PFclientinfo}, _} ->
            S1#{clientinfo => PFclientinfo};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_session_takeovered_request/3}).
merge_msg_session_takeovered_request(PMsg, NMsg,
                                     TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{clientinfo := PFclientinfo},
         #{clientinfo := NFclientinfo}} ->
            S1#{clientinfo =>
                    merge_msg_client_info(PFclientinfo,
                                          NFclientinfo,
                                          TrUserData)};
        {_, #{clientinfo := NFclientinfo}} ->
            S1#{clientinfo => NFclientinfo};
        {#{clientinfo := PFclientinfo}, _} ->
            S1#{clientinfo => PFclientinfo};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_session_terminated_request/3}).
merge_msg_session_terminated_request(PMsg, NMsg,
                                     TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{clientinfo := PFclientinfo},
              #{clientinfo := NFclientinfo}} ->
                 S1#{clientinfo =>
                         merge_msg_client_info(PFclientinfo,
                                               NFclientinfo,
                                               TrUserData)};
             {_, #{clientinfo := NFclientinfo}} ->
                 S1#{clientinfo => NFclientinfo};
             {#{clientinfo := PFclientinfo}, _} ->
                 S1#{clientinfo => PFclientinfo};
             {_, _} -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{reason := NFreason}} -> S2#{reason => NFreason};
        {#{reason := PFreason}, _} -> S2#{reason => PFreason};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_message_publish_request/3}).
merge_msg_message_publish_request(PMsg, NMsg,
                                  TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{message := PFmessage}, #{message := NFmessage}} ->
            S1#{message =>
                    merge_msg_message(PFmessage, NFmessage, TrUserData)};
        {_, #{message := NFmessage}} ->
            S1#{message => NFmessage};
        {#{message := PFmessage}, _} ->
            S1#{message => PFmessage};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_message_delivered_request/3}).
merge_msg_message_delivered_request(PMsg, NMsg,
                                    TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{clientinfo := PFclientinfo},
              #{clientinfo := NFclientinfo}} ->
                 S1#{clientinfo =>
                         merge_msg_client_info(PFclientinfo,
                                               NFclientinfo,
                                               TrUserData)};
             {_, #{clientinfo := NFclientinfo}} ->
                 S1#{clientinfo => NFclientinfo};
             {#{clientinfo := PFclientinfo}, _} ->
                 S1#{clientinfo => PFclientinfo};
             {_, _} -> S1
         end,
    case {PMsg, NMsg} of
        {#{message := PFmessage}, #{message := NFmessage}} ->
            S2#{message =>
                    merge_msg_message(PFmessage, NFmessage, TrUserData)};
        {_, #{message := NFmessage}} ->
            S2#{message => NFmessage};
        {#{message := PFmessage}, _} ->
            S2#{message => PFmessage};
        {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_message_dropped_request/3}).
merge_msg_message_dropped_request(PMsg, NMsg,
                                  TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{message := PFmessage}, #{message := NFmessage}} ->
                 S1#{message =>
                         merge_msg_message(PFmessage, NFmessage, TrUserData)};
             {_, #{message := NFmessage}} ->
                 S1#{message => NFmessage};
             {#{message := PFmessage}, _} ->
                 S1#{message => PFmessage};
             {_, _} -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{reason := NFreason}} -> S2#{reason => NFreason};
        {#{reason := PFreason}, _} -> S2#{reason => PFreason};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_message_acked_request/3}).
merge_msg_message_acked_request(PMsg, NMsg,
                                TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {#{clientinfo := PFclientinfo},
              #{clientinfo := NFclientinfo}} ->
                 S1#{clientinfo =>
                         merge_msg_client_info(PFclientinfo,
                                               NFclientinfo,
                                               TrUserData)};
             {_, #{clientinfo := NFclientinfo}} ->
                 S1#{clientinfo => NFclientinfo};
             {#{clientinfo := PFclientinfo}, _} ->
                 S1#{clientinfo => PFclientinfo};
             {_, _} -> S1
         end,
    case {PMsg, NMsg} of
        {#{message := PFmessage}, #{message := NFmessage}} ->
            S2#{message =>
                    merge_msg_message(PFmessage, NFmessage, TrUserData)};
        {_, #{message := NFmessage}} ->
            S2#{message => NFmessage};
        {#{message := PFmessage}, _} ->
            S2#{message => PFmessage};
        {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_empty_success/3}).
merge_msg_empty_success(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_valued_response/3}).
merge_msg_valued_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{type := NFtype}} -> S1#{type => NFtype};
             {#{type := PFtype}, _} -> S1#{type => PFtype};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {#{value := {message, OPFvalue}},
         #{value := {message, ONFvalue}}} ->
            S2#{value =>
                    {message,
                     merge_msg_message(OPFvalue, ONFvalue, TrUserData)}};
        {_, #{value := NFvalue}} -> S2#{value => NFvalue};
        {#{value := PFvalue}, _} -> S2#{value => PFvalue};
        {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_broker_info/3}).
merge_msg_broker_info(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{version := NFversion}} ->
                 S1#{version => NFversion};
             {#{version := PFversion}, _} ->
                 S1#{version => PFversion};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{sysdescr := NFsysdescr}} ->
                 S2#{sysdescr => NFsysdescr};
             {#{sysdescr := PFsysdescr}, _} ->
                 S2#{sysdescr => PFsysdescr};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{uptime := NFuptime}} -> S3#{uptime => NFuptime};
             {#{uptime := PFuptime}, _} -> S3#{uptime => PFuptime};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{datetime := NFdatetime}} ->
            S4#{datetime => NFdatetime};
        {#{datetime := PFdatetime}, _} ->
            S4#{datetime => PFdatetime};
        _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_hook_spec/3}).
merge_msg_hook_spec(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{name := NFname}} -> S1#{name => NFname};
             {#{name := PFname}, _} -> S1#{name => PFname};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {#{topics := PFtopics}, #{topics := NFtopics}} ->
            S2#{topics =>
                    'erlang_++'(PFtopics, NFtopics, TrUserData)};
        {_, #{topics := NFtopics}} -> S2#{topics => NFtopics};
        {#{topics := PFtopics}, _} -> S2#{topics => PFtopics};
        {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_conn_info/3}).
merge_msg_conn_info(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{node := NFnode}} -> S1#{node => NFnode};
             {#{node := PFnode}, _} -> S1#{node => PFnode};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{clientid := NFclientid}} ->
                 S2#{clientid => NFclientid};
             {#{clientid := PFclientid}, _} ->
                 S2#{clientid => PFclientid};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{username := NFusername}} ->
                 S3#{username => NFusername};
             {#{username := PFusername}, _} ->
                 S3#{username => PFusername};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{peerhost := NFpeerhost}} ->
                 S4#{peerhost => NFpeerhost};
             {#{peerhost := PFpeerhost}, _} ->
                 S4#{peerhost => PFpeerhost};
             _ -> S4
         end,
    S6 = case {PMsg, NMsg} of
             {_, #{sockport := NFsockport}} ->
                 S5#{sockport => NFsockport};
             {#{sockport := PFsockport}, _} ->
                 S5#{sockport => PFsockport};
             _ -> S5
         end,
    S7 = case {PMsg, NMsg} of
             {_, #{proto_name := NFproto_name}} ->
                 S6#{proto_name => NFproto_name};
             {#{proto_name := PFproto_name}, _} ->
                 S6#{proto_name => PFproto_name};
             _ -> S6
         end,
    S8 = case {PMsg, NMsg} of
             {_, #{proto_ver := NFproto_ver}} ->
                 S7#{proto_ver => NFproto_ver};
             {#{proto_ver := PFproto_ver}, _} ->
                 S7#{proto_ver => PFproto_ver};
             _ -> S7
         end,
    case {PMsg, NMsg} of
        {_, #{keepalive := NFkeepalive}} ->
            S8#{keepalive => NFkeepalive};
        {#{keepalive := PFkeepalive}, _} ->
            S8#{keepalive => PFkeepalive};
        _ -> S8
    end.

-compile({nowarn_unused_function,merge_msg_client_info/3}).
merge_msg_client_info(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{node := NFnode}} -> S1#{node => NFnode};
             {#{node := PFnode}, _} -> S1#{node => PFnode};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{clientid := NFclientid}} ->
                 S2#{clientid => NFclientid};
             {#{clientid := PFclientid}, _} ->
                 S2#{clientid => PFclientid};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{username := NFusername}} ->
                 S3#{username => NFusername};
             {#{username := PFusername}, _} ->
                 S3#{username => PFusername};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{password := NFpassword}} ->
                 S4#{password => NFpassword};
             {#{password := PFpassword}, _} ->
                 S4#{password => PFpassword};
             _ -> S4
         end,
    S6 = case {PMsg, NMsg} of
             {_, #{peerhost := NFpeerhost}} ->
                 S5#{peerhost => NFpeerhost};
             {#{peerhost := PFpeerhost}, _} ->
                 S5#{peerhost => PFpeerhost};
             _ -> S5
         end,
    S7 = case {PMsg, NMsg} of
             {_, #{sockport := NFsockport}} ->
                 S6#{sockport => NFsockport};
             {#{sockport := PFsockport}, _} ->
                 S6#{sockport => PFsockport};
             _ -> S6
         end,
    S8 = case {PMsg, NMsg} of
             {_, #{protocol := NFprotocol}} ->
                 S7#{protocol => NFprotocol};
             {#{protocol := PFprotocol}, _} ->
                 S7#{protocol => PFprotocol};
             _ -> S7
         end,
    S9 = case {PMsg, NMsg} of
             {_, #{mountpoint := NFmountpoint}} ->
                 S8#{mountpoint => NFmountpoint};
             {#{mountpoint := PFmountpoint}, _} ->
                 S8#{mountpoint => PFmountpoint};
             _ -> S8
         end,
    S10 = case {PMsg, NMsg} of
              {_, #{is_superuser := NFis_superuser}} ->
                  S9#{is_superuser => NFis_superuser};
              {#{is_superuser := PFis_superuser}, _} ->
                  S9#{is_superuser => PFis_superuser};
              _ -> S9
          end,
    case {PMsg, NMsg} of
        {_, #{anonymous := NFanonymous}} ->
            S10#{anonymous => NFanonymous};
        {#{anonymous := PFanonymous}, _} ->
            S10#{anonymous => PFanonymous};
        _ -> S10
    end.

-compile({nowarn_unused_function,merge_msg_message/3}).
merge_msg_message(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{node := NFnode}} -> S1#{node => NFnode};
             {#{node := PFnode}, _} -> S1#{node => PFnode};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{id := NFid}} -> S2#{id => NFid};
             {#{id := PFid}, _} -> S2#{id => PFid};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{qos := NFqos}} -> S3#{qos => NFqos};
             {#{qos := PFqos}, _} -> S3#{qos => PFqos};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{from := NFfrom}} -> S4#{from => NFfrom};
             {#{from := PFfrom}, _} -> S4#{from => PFfrom};
             _ -> S4
         end,
    S6 = case {PMsg, NMsg} of
             {_, #{topic := NFtopic}} -> S5#{topic => NFtopic};
             {#{topic := PFtopic}, _} -> S5#{topic => PFtopic};
             _ -> S5
         end,
    S7 = case {PMsg, NMsg} of
             {_, #{payload := NFpayload}} ->
                 S6#{payload => NFpayload};
             {#{payload := PFpayload}, _} ->
                 S6#{payload => PFpayload};
             _ -> S6
         end,
    case {PMsg, NMsg} of
        {_, #{timestamp := NFtimestamp}} ->
            S7#{timestamp => NFtimestamp};
        {#{timestamp := PFtimestamp}, _} ->
            S7#{timestamp => PFtimestamp};
        _ -> S7
    end.

-compile({nowarn_unused_function,merge_msg_property/3}).
merge_msg_property(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{name := NFname}} -> S1#{name => NFname};
             {#{name := PFname}, _} -> S1#{name => PFname};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{value := NFvalue}} -> S2#{value => NFvalue};
        {#{value := PFvalue}, _} -> S2#{value => PFvalue};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_topic_filter/3}).
merge_msg_topic_filter(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{name := NFname}} -> S1#{name => NFname};
             {#{name := PFname}, _} -> S1#{name => PFname};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{qos := NFqos}} -> S2#{qos => NFqos};
        {#{qos := PFqos}, _} -> S2#{qos => PFqos};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_sub_opts/3}).
merge_msg_sub_opts(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{qos := NFqos}} -> S1#{qos => NFqos};
             {#{qos := PFqos}, _} -> S1#{qos => PFqos};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{share := NFshare}} -> S2#{share => NFshare};
             {#{share := PFshare}, _} -> S2#{share => PFshare};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{rh := NFrh}} -> S3#{rh => NFrh};
             {#{rh := PFrh}, _} -> S3#{rh => PFrh};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{rap := NFrap}} -> S4#{rap => NFrap};
             {#{rap := PFrap}, _} -> S4#{rap => PFrap};
             _ -> S4
         end,
    case {PMsg, NMsg} of
        {_, #{nl := NFnl}} -> S5#{nl => NFnl};
        {#{nl := PFnl}, _} -> S5#{nl => PFnl};
        _ -> S5
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        provider_loaded_request ->
            v_msg_provider_loaded_request(Msg,
                                          [MsgName],
                                          TrUserData);
        loaded_response ->
            v_msg_loaded_response(Msg, [MsgName], TrUserData);
        provider_unloaded_request ->
            v_msg_provider_unloaded_request(Msg,
                                            [MsgName],
                                            TrUserData);
        client_connect_request ->
            v_msg_client_connect_request(Msg,
                                         [MsgName],
                                         TrUserData);
        client_connack_request ->
            v_msg_client_connack_request(Msg,
                                         [MsgName],
                                         TrUserData);
        client_connected_request ->
            v_msg_client_connected_request(Msg,
                                           [MsgName],
                                           TrUserData);
        client_disconnected_request ->
            v_msg_client_disconnected_request(Msg,
                                              [MsgName],
                                              TrUserData);
        client_authenticate_request ->
            v_msg_client_authenticate_request(Msg,
                                              [MsgName],
                                              TrUserData);
        client_check_acl_request ->
            v_msg_client_check_acl_request(Msg,
                                           [MsgName],
                                           TrUserData);
        client_subscribe_request ->
            v_msg_client_subscribe_request(Msg,
                                           [MsgName],
                                           TrUserData);
        client_unsubscribe_request ->
            v_msg_client_unsubscribe_request(Msg,
                                             [MsgName],
                                             TrUserData);
        session_created_request ->
            v_msg_session_created_request(Msg,
                                          [MsgName],
                                          TrUserData);
        session_subscribed_request ->
            v_msg_session_subscribed_request(Msg,
                                             [MsgName],
                                             TrUserData);
        session_unsubscribed_request ->
            v_msg_session_unsubscribed_request(Msg,
                                               [MsgName],
                                               TrUserData);
        session_resumed_request ->
            v_msg_session_resumed_request(Msg,
                                          [MsgName],
                                          TrUserData);
        session_discarded_request ->
            v_msg_session_discarded_request(Msg,
                                            [MsgName],
                                            TrUserData);
        session_takeovered_request ->
            v_msg_session_takeovered_request(Msg,
                                             [MsgName],
                                             TrUserData);
        session_terminated_request ->
            v_msg_session_terminated_request(Msg,
                                             [MsgName],
                                             TrUserData);
        message_publish_request ->
            v_msg_message_publish_request(Msg,
                                          [MsgName],
                                          TrUserData);
        message_delivered_request ->
            v_msg_message_delivered_request(Msg,
                                            [MsgName],
                                            TrUserData);
        message_dropped_request ->
            v_msg_message_dropped_request(Msg,
                                          [MsgName],
                                          TrUserData);
        message_acked_request ->
            v_msg_message_acked_request(Msg, [MsgName], TrUserData);
        empty_success ->
            v_msg_empty_success(Msg, [MsgName], TrUserData);
        valued_response ->
            v_msg_valued_response(Msg, [MsgName], TrUserData);
        broker_info ->
            v_msg_broker_info(Msg, [MsgName], TrUserData);
        hook_spec ->
            v_msg_hook_spec(Msg, [MsgName], TrUserData);
        conn_info ->
            v_msg_conn_info(Msg, [MsgName], TrUserData);
        client_info ->
            v_msg_client_info(Msg, [MsgName], TrUserData);
        message -> v_msg_message(Msg, [MsgName], TrUserData);
        property -> v_msg_property(Msg, [MsgName], TrUserData);
        topic_filter ->
            v_msg_topic_filter(Msg, [MsgName], TrUserData);
        sub_opts -> v_msg_sub_opts(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_provider_loaded_request/3}).
-dialyzer({nowarn_function,v_msg_provider_loaded_request/3}).
v_msg_provider_loaded_request(#{} = M, Path,
                              TrUserData) ->
    case M of
        #{broker := F1} ->
            v_msg_broker_info(F1, [broker | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (broker) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_provider_loaded_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   provider_loaded_request},
                  M,
                  Path);
v_msg_provider_loaded_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, provider_loaded_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_loaded_response/3}).
-dialyzer({nowarn_function,v_msg_loaded_response/3}).
v_msg_loaded_response(#{} = M, Path, TrUserData) ->
    case M of
        #{hooks := F1} ->
            if is_list(F1) ->
                   _ = [v_msg_hook_spec(Elem, [hooks | Path], TrUserData)
                        || Elem <- F1],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, hook_spec}},
                                 F1,
                                 [hooks | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (hooks) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_loaded_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   loaded_response},
                  M,
                  Path);
v_msg_loaded_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, loaded_response}, X, Path).

-compile({nowarn_unused_function,v_msg_provider_unloaded_request/3}).
-dialyzer({nowarn_function,v_msg_provider_unloaded_request/3}).
v_msg_provider_unloaded_request(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_provider_unloaded_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   provider_unloaded_request},
                  M,
                  Path);
v_msg_provider_unloaded_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, provider_unloaded_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_client_connect_request/3}).
-dialyzer({nowarn_function,v_msg_client_connect_request/3}).
v_msg_client_connect_request(#{} = M, Path,
                             TrUserData) ->
    case M of
        #{conninfo := F1} ->
            v_msg_conn_info(F1, [conninfo | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{props := F2} ->
            if is_list(F2) ->
                   _ = [v_msg_property(Elem, [props | Path], TrUserData)
                        || Elem <- F2],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, property}},
                                 F2,
                                 [props | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (conninfo) -> ok;
                      (props) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_client_connect_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   client_connect_request},
                  M,
                  Path);
v_msg_client_connect_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, client_connect_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_client_connack_request/3}).
-dialyzer({nowarn_function,v_msg_client_connack_request/3}).
v_msg_client_connack_request(#{} = M, Path,
                             TrUserData) ->
    case M of
        #{conninfo := F1} ->
            v_msg_conn_info(F1, [conninfo | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{result_code := F2} ->
            v_type_string(F2, [result_code | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{props := F3} ->
            if is_list(F3) ->
                   _ = [v_msg_property(Elem, [props | Path], TrUserData)
                        || Elem <- F3],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, property}},
                                 F3,
                                 [props | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (conninfo) -> ok;
                      (result_code) -> ok;
                      (props) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_client_connack_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   client_connack_request},
                  M,
                  Path);
v_msg_client_connack_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, client_connack_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_client_connected_request/3}).
-dialyzer({nowarn_function,v_msg_client_connected_request/3}).
v_msg_client_connected_request(#{} = M, Path,
                               TrUserData) ->
    case M of
        #{clientinfo := F1} ->
            v_msg_client_info(F1, [clientinfo | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (clientinfo) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_client_connected_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   client_connected_request},
                  M,
                  Path);
v_msg_client_connected_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, client_connected_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_client_disconnected_request/3}).
-dialyzer({nowarn_function,v_msg_client_disconnected_request/3}).
v_msg_client_disconnected_request(#{} = M, Path,
                                  TrUserData) ->
    case M of
        #{clientinfo := F1} ->
            v_msg_client_info(F1, [clientinfo | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{reason := F2} ->
            v_type_string(F2, [reason | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (clientinfo) -> ok;
                      (reason) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_client_disconnected_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   client_disconnected_request},
                  M,
                  Path);
v_msg_client_disconnected_request(X, Path,
                                  _TrUserData) ->
    mk_type_error({expected_msg,
                   client_disconnected_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_client_authenticate_request/3}).
-dialyzer({nowarn_function,v_msg_client_authenticate_request/3}).
v_msg_client_authenticate_request(#{} = M, Path,
                                  TrUserData) ->
    case M of
        #{clientinfo := F1} ->
            v_msg_client_info(F1, [clientinfo | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{result := F2} ->
            v_type_bool(F2, [result | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (clientinfo) -> ok;
                      (result) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_client_authenticate_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   client_authenticate_request},
                  M,
                  Path);
v_msg_client_authenticate_request(X, Path,
                                  _TrUserData) ->
    mk_type_error({expected_msg,
                   client_authenticate_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_client_check_acl_request/3}).
-dialyzer({nowarn_function,v_msg_client_check_acl_request/3}).
v_msg_client_check_acl_request(#{} = M, Path,
                               TrUserData) ->
    case M of
        #{clientinfo := F1} ->
            v_msg_client_info(F1, [clientinfo | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{type := F2} ->
            'v_enum_client_check_acl_request.AclReqType'(F2,
                                                         [type | Path],
                                                         TrUserData);
        _ -> ok
    end,
    case M of
        #{topic := F3} ->
            v_type_string(F3, [topic | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{result := F4} ->
            v_type_bool(F4, [result | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (clientinfo) -> ok;
                      (type) -> ok;
                      (topic) -> ok;
                      (result) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_client_check_acl_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   client_check_acl_request},
                  M,
                  Path);
v_msg_client_check_acl_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, client_check_acl_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_client_subscribe_request/3}).
-dialyzer({nowarn_function,v_msg_client_subscribe_request/3}).
v_msg_client_subscribe_request(#{} = M, Path,
                               TrUserData) ->
    case M of
        #{clientinfo := F1} ->
            v_msg_client_info(F1, [clientinfo | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{props := F2} ->
            if is_list(F2) ->
                   _ = [v_msg_property(Elem, [props | Path], TrUserData)
                        || Elem <- F2],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, property}},
                                 F2,
                                 [props | Path])
            end;
        _ -> ok
    end,
    case M of
        #{topic_filters := F3} ->
            if is_list(F3) ->
                   _ = [v_msg_topic_filter(Elem,
                                           [topic_filters | Path],
                                           TrUserData)
                        || Elem <- F3],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, topic_filter}},
                                 F3,
                                 [topic_filters | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (clientinfo) -> ok;
                      (props) -> ok;
                      (topic_filters) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_client_subscribe_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   client_subscribe_request},
                  M,
                  Path);
v_msg_client_subscribe_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, client_subscribe_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_client_unsubscribe_request/3}).
-dialyzer({nowarn_function,v_msg_client_unsubscribe_request/3}).
v_msg_client_unsubscribe_request(#{} = M, Path,
                                 TrUserData) ->
    case M of
        #{clientinfo := F1} ->
            v_msg_client_info(F1, [clientinfo | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{props := F2} ->
            if is_list(F2) ->
                   _ = [v_msg_property(Elem, [props | Path], TrUserData)
                        || Elem <- F2],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, property}},
                                 F2,
                                 [props | Path])
            end;
        _ -> ok
    end,
    case M of
        #{topic_filters := F3} ->
            if is_list(F3) ->
                   _ = [v_msg_topic_filter(Elem,
                                           [topic_filters | Path],
                                           TrUserData)
                        || Elem <- F3],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, {msg, topic_filter}},
                                 F3,
                                 [topic_filters | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (clientinfo) -> ok;
                      (props) -> ok;
                      (topic_filters) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_client_unsubscribe_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   client_unsubscribe_request},
                  M,
                  Path);
v_msg_client_unsubscribe_request(X, Path,
                                 _TrUserData) ->
    mk_type_error({expected_msg,
                   client_unsubscribe_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_session_created_request/3}).
-dialyzer({nowarn_function,v_msg_session_created_request/3}).
v_msg_session_created_request(#{} = M, Path,
                              TrUserData) ->
    case M of
        #{clientinfo := F1} ->
            v_msg_client_info(F1, [clientinfo | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (clientinfo) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_session_created_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   session_created_request},
                  M,
                  Path);
v_msg_session_created_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, session_created_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_session_subscribed_request/3}).
-dialyzer({nowarn_function,v_msg_session_subscribed_request/3}).
v_msg_session_subscribed_request(#{} = M, Path,
                                 TrUserData) ->
    case M of
        #{clientinfo := F1} ->
            v_msg_client_info(F1, [clientinfo | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{topic := F2} ->
            v_type_string(F2, [topic | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{subopts := F3} ->
            v_msg_sub_opts(F3, [subopts | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (clientinfo) -> ok;
                      (topic) -> ok;
                      (subopts) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_session_subscribed_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   session_subscribed_request},
                  M,
                  Path);
v_msg_session_subscribed_request(X, Path,
                                 _TrUserData) ->
    mk_type_error({expected_msg,
                   session_subscribed_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_session_unsubscribed_request/3}).
-dialyzer({nowarn_function,v_msg_session_unsubscribed_request/3}).
v_msg_session_unsubscribed_request(#{} = M, Path,
                                   TrUserData) ->
    case M of
        #{clientinfo := F1} ->
            v_msg_client_info(F1, [clientinfo | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{topic := F2} ->
            v_type_string(F2, [topic | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (clientinfo) -> ok;
                      (topic) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_session_unsubscribed_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   session_unsubscribed_request},
                  M,
                  Path);
v_msg_session_unsubscribed_request(X, Path,
                                   _TrUserData) ->
    mk_type_error({expected_msg,
                   session_unsubscribed_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_session_resumed_request/3}).
-dialyzer({nowarn_function,v_msg_session_resumed_request/3}).
v_msg_session_resumed_request(#{} = M, Path,
                              TrUserData) ->
    case M of
        #{clientinfo := F1} ->
            v_msg_client_info(F1, [clientinfo | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (clientinfo) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_session_resumed_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   session_resumed_request},
                  M,
                  Path);
v_msg_session_resumed_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, session_resumed_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_session_discarded_request/3}).
-dialyzer({nowarn_function,v_msg_session_discarded_request/3}).
v_msg_session_discarded_request(#{} = M, Path,
                                TrUserData) ->
    case M of
        #{clientinfo := F1} ->
            v_msg_client_info(F1, [clientinfo | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (clientinfo) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_session_discarded_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   session_discarded_request},
                  M,
                  Path);
v_msg_session_discarded_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, session_discarded_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_session_takeovered_request/3}).
-dialyzer({nowarn_function,v_msg_session_takeovered_request/3}).
v_msg_session_takeovered_request(#{} = M, Path,
                                 TrUserData) ->
    case M of
        #{clientinfo := F1} ->
            v_msg_client_info(F1, [clientinfo | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (clientinfo) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_session_takeovered_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   session_takeovered_request},
                  M,
                  Path);
v_msg_session_takeovered_request(X, Path,
                                 _TrUserData) ->
    mk_type_error({expected_msg,
                   session_takeovered_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_session_terminated_request/3}).
-dialyzer({nowarn_function,v_msg_session_terminated_request/3}).
v_msg_session_terminated_request(#{} = M, Path,
                                 TrUserData) ->
    case M of
        #{clientinfo := F1} ->
            v_msg_client_info(F1, [clientinfo | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{reason := F2} ->
            v_type_string(F2, [reason | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (clientinfo) -> ok;
                      (reason) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_session_terminated_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   session_terminated_request},
                  M,
                  Path);
v_msg_session_terminated_request(X, Path,
                                 _TrUserData) ->
    mk_type_error({expected_msg,
                   session_terminated_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_message_publish_request/3}).
-dialyzer({nowarn_function,v_msg_message_publish_request/3}).
v_msg_message_publish_request(#{} = M, Path,
                              TrUserData) ->
    case M of
        #{message := F1} ->
            v_msg_message(F1, [message | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (message) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_message_publish_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   message_publish_request},
                  M,
                  Path);
v_msg_message_publish_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, message_publish_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_message_delivered_request/3}).
-dialyzer({nowarn_function,v_msg_message_delivered_request/3}).
v_msg_message_delivered_request(#{} = M, Path,
                                TrUserData) ->
    case M of
        #{clientinfo := F1} ->
            v_msg_client_info(F1, [clientinfo | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{message := F2} ->
            v_msg_message(F2, [message | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (clientinfo) -> ok;
                      (message) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_message_delivered_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   message_delivered_request},
                  M,
                  Path);
v_msg_message_delivered_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, message_delivered_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_message_dropped_request/3}).
-dialyzer({nowarn_function,v_msg_message_dropped_request/3}).
v_msg_message_dropped_request(#{} = M, Path,
                              TrUserData) ->
    case M of
        #{message := F1} ->
            v_msg_message(F1, [message | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{reason := F2} ->
            v_type_string(F2, [reason | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (message) -> ok;
                      (reason) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_message_dropped_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   message_dropped_request},
                  M,
                  Path);
v_msg_message_dropped_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, message_dropped_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_message_acked_request/3}).
-dialyzer({nowarn_function,v_msg_message_acked_request/3}).
v_msg_message_acked_request(#{} = M, Path,
                            TrUserData) ->
    case M of
        #{clientinfo := F1} ->
            v_msg_client_info(F1, [clientinfo | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{message := F2} ->
            v_msg_message(F2, [message | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (clientinfo) -> ok;
                      (message) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_message_acked_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   message_acked_request},
                  M,
                  Path);
v_msg_message_acked_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, message_acked_request},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_empty_success/3}).
-dialyzer({nowarn_function,v_msg_empty_success/3}).
v_msg_empty_success(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_empty_success(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   empty_success},
                  M,
                  Path);
v_msg_empty_success(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, empty_success}, X, Path).

-compile({nowarn_unused_function,v_msg_valued_response/3}).
-dialyzer({nowarn_function,v_msg_valued_response/3}).
v_msg_valued_response(#{} = M, Path, TrUserData) ->
    case M of
        #{type := F1} ->
            'v_enum_valued_response.ResponsedType'(F1,
                                                   [type | Path],
                                                   TrUserData);
        _ -> ok
    end,
    case M of
        #{value := {bool_result, OF2}} ->
            v_type_bool(OF2,
                        [bool_result, value | Path],
                        TrUserData);
        #{value := {message, OF2}} ->
            v_msg_message(OF2, [message, value | Path], TrUserData);
        #{value := F2} ->
            mk_type_error(invalid_oneof, F2, [value | Path]);
        _ -> ok
    end,
    lists:foreach(fun (type) -> ok;
                      (value) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_valued_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   valued_response},
                  M,
                  Path);
v_msg_valued_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, valued_response}, X, Path).

-compile({nowarn_unused_function,v_msg_broker_info/3}).
-dialyzer({nowarn_function,v_msg_broker_info/3}).
v_msg_broker_info(#{} = M, Path, TrUserData) ->
    case M of
        #{version := F1} ->
            v_type_string(F1, [version | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{sysdescr := F2} ->
            v_type_string(F2, [sysdescr | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{uptime := F3} ->
            v_type_string(F3, [uptime | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{datetime := F4} ->
            v_type_string(F4, [datetime | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (version) -> ok;
                      (sysdescr) -> ok;
                      (uptime) -> ok;
                      (datetime) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_broker_info(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   broker_info},
                  M,
                  Path);
v_msg_broker_info(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, broker_info}, X, Path).

-compile({nowarn_unused_function,v_msg_hook_spec/3}).
-dialyzer({nowarn_function,v_msg_hook_spec/3}).
v_msg_hook_spec(#{} = M, Path, TrUserData) ->
    case M of
        #{name := F1} ->
            v_type_string(F1, [name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{topics := F2} ->
            if is_list(F2) ->
                   _ = [v_type_string(Elem, [topics | Path], TrUserData)
                        || Elem <- F2],
                   ok;
               true ->
                   mk_type_error({invalid_list_of, string},
                                 F2,
                                 [topics | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
                      (topics) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_hook_spec(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   hook_spec},
                  M,
                  Path);
v_msg_hook_spec(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, hook_spec}, X, Path).

-compile({nowarn_unused_function,v_msg_conn_info/3}).
-dialyzer({nowarn_function,v_msg_conn_info/3}).
v_msg_conn_info(#{} = M, Path, TrUserData) ->
    case M of
        #{node := F1} ->
            v_type_string(F1, [node | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{clientid := F2} ->
            v_type_string(F2, [clientid | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{username := F3} ->
            v_type_string(F3, [username | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{peerhost := F4} ->
            v_type_string(F4, [peerhost | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{sockport := F5} ->
            v_type_uint32(F5, [sockport | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{proto_name := F6} ->
            v_type_string(F6, [proto_name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{proto_ver := F7} ->
            v_type_string(F7, [proto_ver | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{keepalive := F8} ->
            v_type_uint32(F8, [keepalive | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (node) -> ok;
                      (clientid) -> ok;
                      (username) -> ok;
                      (peerhost) -> ok;
                      (sockport) -> ok;
                      (proto_name) -> ok;
                      (proto_ver) -> ok;
                      (keepalive) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_conn_info(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   conn_info},
                  M,
                  Path);
v_msg_conn_info(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, conn_info}, X, Path).

-compile({nowarn_unused_function,v_msg_client_info/3}).
-dialyzer({nowarn_function,v_msg_client_info/3}).
v_msg_client_info(#{} = M, Path, TrUserData) ->
    case M of
        #{node := F1} ->
            v_type_string(F1, [node | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{clientid := F2} ->
            v_type_string(F2, [clientid | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{username := F3} ->
            v_type_string(F3, [username | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{password := F4} ->
            v_type_string(F4, [password | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{peerhost := F5} ->
            v_type_string(F5, [peerhost | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{sockport := F6} ->
            v_type_uint32(F6, [sockport | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{protocol := F7} ->
            v_type_string(F7, [protocol | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{mountpoint := F8} ->
            v_type_string(F8, [mountpoint | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{is_superuser := F9} ->
            v_type_bool(F9, [is_superuser | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{anonymous := F10} ->
            v_type_bool(F10, [anonymous | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (node) -> ok;
                      (clientid) -> ok;
                      (username) -> ok;
                      (password) -> ok;
                      (peerhost) -> ok;
                      (sockport) -> ok;
                      (protocol) -> ok;
                      (mountpoint) -> ok;
                      (is_superuser) -> ok;
                      (anonymous) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_client_info(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   client_info},
                  M,
                  Path);
v_msg_client_info(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, client_info}, X, Path).

-compile({nowarn_unused_function,v_msg_message/3}).
-dialyzer({nowarn_function,v_msg_message/3}).
v_msg_message(#{} = M, Path, TrUserData) ->
    case M of
        #{node := F1} ->
            v_type_string(F1, [node | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{id := F2} ->
            v_type_string(F2, [id | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{qos := F3} ->
            v_type_uint32(F3, [qos | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{from := F4} ->
            v_type_string(F4, [from | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{topic := F5} ->
            v_type_string(F5, [topic | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{payload := F6} ->
            v_type_bytes(F6, [payload | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{timestamp := F7} ->
            v_type_uint64(F7, [timestamp | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (node) -> ok;
                      (id) -> ok;
                      (qos) -> ok;
                      (from) -> ok;
                      (topic) -> ok;
                      (payload) -> ok;
                      (timestamp) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_message(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   message},
                  M,
                  Path);
v_msg_message(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, message}, X, Path).

-compile({nowarn_unused_function,v_msg_property/3}).
-dialyzer({nowarn_function,v_msg_property/3}).
v_msg_property(#{} = M, Path, TrUserData) ->
    case M of
        #{name := F1} ->
            v_type_string(F1, [name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{value := F2} ->
            v_type_string(F2, [value | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
                      (value) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_property(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   property},
                  M,
                  Path);
v_msg_property(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, property}, X, Path).

-compile({nowarn_unused_function,v_msg_topic_filter/3}).
-dialyzer({nowarn_function,v_msg_topic_filter/3}).
v_msg_topic_filter(#{} = M, Path, TrUserData) ->
    case M of
        #{name := F1} ->
            v_type_string(F1, [name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{qos := F2} ->
            v_type_uint32(F2, [qos | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
                      (qos) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_topic_filter(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   topic_filter},
                  M,
                  Path);
v_msg_topic_filter(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, topic_filter}, X, Path).

-compile({nowarn_unused_function,v_msg_sub_opts/3}).
-dialyzer({nowarn_function,v_msg_sub_opts/3}).
v_msg_sub_opts(#{} = M, Path, TrUserData) ->
    case M of
        #{qos := F1} ->
            v_type_uint32(F1, [qos | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{share := F2} ->
            v_type_string(F2, [share | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{rh := F3} ->
            v_type_uint32(F3, [rh | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{rap := F4} ->
            v_type_uint32(F4, [rap | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{nl := F5} ->
            v_type_uint32(F5, [nl | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (qos) -> ok;
                      (share) -> ok;
                      (rh) -> ok;
                      (rap) -> ok;
                      (nl) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_sub_opts(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   sub_opts},
                  M,
                  Path);
v_msg_sub_opts(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, sub_opts}, X, Path).

-compile({nowarn_unused_function,'v_enum_client_check_acl_request.AclReqType'/3}).
-dialyzer({nowarn_function,'v_enum_client_check_acl_request.AclReqType'/3}).
'v_enum_client_check_acl_request.AclReqType'('PUBLISH',
                                             _Path, _TrUserData) ->
    ok;
'v_enum_client_check_acl_request.AclReqType'('SUBSCRIBE',
                                             _Path, _TrUserData) ->
    ok;
'v_enum_client_check_acl_request.AclReqType'(V, Path,
                                             TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_client_check_acl_request.AclReqType'(X, Path,
                                             _TrUserData) ->
    mk_type_error({invalid_enum,
                   'client_check_acl_request.AclReqType'},
                  X,
                  Path).

-compile({nowarn_unused_function,'v_enum_valued_response.ResponsedType'/3}).
-dialyzer({nowarn_function,'v_enum_valued_response.ResponsedType'/3}).
'v_enum_valued_response.ResponsedType'('IGNORE', _Path,
                                       _TrUserData) ->
    ok;
'v_enum_valued_response.ResponsedType'('CONTINUE',
                                       _Path, _TrUserData) ->
    ok;
'v_enum_valued_response.ResponsedType'('STOP_AND_RETURN',
                                       _Path, _TrUserData) ->
    ok;
'v_enum_valued_response.ResponsedType'(V, Path,
                                       TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_valued_response.ResponsedType'(X, Path,
                                       _TrUserData) ->
    mk_type_error({invalid_enum,
                   'valued_response.ResponsedType'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
                  N,
                  Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range,
                   uint32,
                   unsigned,
                   32},
                  N,
                  Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range,
                   uint64,
                   unsigned,
                   64},
                  N,
                  Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} ->
            mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg ->
            mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
                  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
                                         lists:map(fun atom_to_list/1,
                                                   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'client_check_acl_request.AclReqType'},
      [{'PUBLISH', 0}, {'SUBSCRIBE', 1}]},
     {{enum, 'valued_response.ResponsedType'},
      [{'IGNORE', 0},
       {'CONTINUE', 1},
       {'STOP_AND_RETURN', 2}]},
     {{msg, provider_loaded_request},
      [#{name => broker, fnum => 1, rnum => 2,
         type => {msg, broker_info}, occurrence => optional,
         opts => []}]},
     {{msg, loaded_response},
      [#{name => hooks, fnum => 1, rnum => 2,
         type => {msg, hook_spec}, occurrence => repeated,
         opts => []}]},
     {{msg, provider_unloaded_request}, []},
     {{msg, client_connect_request},
      [#{name => conninfo, fnum => 1, rnum => 2,
         type => {msg, conn_info}, occurrence => optional,
         opts => []},
       #{name => props, fnum => 2, rnum => 3,
         type => {msg, property}, occurrence => repeated,
         opts => []}]},
     {{msg, client_connack_request},
      [#{name => conninfo, fnum => 1, rnum => 2,
         type => {msg, conn_info}, occurrence => optional,
         opts => []},
       #{name => result_code, fnum => 2, rnum => 3,
         type => string, occurrence => optional, opts => []},
       #{name => props, fnum => 3, rnum => 4,
         type => {msg, property}, occurrence => repeated,
         opts => []}]},
     {{msg, client_connected_request},
      [#{name => clientinfo, fnum => 1, rnum => 2,
         type => {msg, client_info}, occurrence => optional,
         opts => []}]},
     {{msg, client_disconnected_request},
      [#{name => clientinfo, fnum => 1, rnum => 2,
         type => {msg, client_info}, occurrence => optional,
         opts => []},
       #{name => reason, fnum => 2, rnum => 3, type => string,
         occurrence => optional, opts => []}]},
     {{msg, client_authenticate_request},
      [#{name => clientinfo, fnum => 1, rnum => 2,
         type => {msg, client_info}, occurrence => optional,
         opts => []},
       #{name => result, fnum => 2, rnum => 3, type => bool,
         occurrence => optional, opts => []}]},
     {{msg, client_check_acl_request},
      [#{name => clientinfo, fnum => 1, rnum => 2,
         type => {msg, client_info}, occurrence => optional,
         opts => []},
       #{name => type, fnum => 2, rnum => 3,
         type => {enum, 'client_check_acl_request.AclReqType'},
         occurrence => optional, opts => []},
       #{name => topic, fnum => 3, rnum => 4, type => string,
         occurrence => optional, opts => []},
       #{name => result, fnum => 4, rnum => 5, type => bool,
         occurrence => optional, opts => []}]},
     {{msg, client_subscribe_request},
      [#{name => clientinfo, fnum => 1, rnum => 2,
         type => {msg, client_info}, occurrence => optional,
         opts => []},
       #{name => props, fnum => 2, rnum => 3,
         type => {msg, property}, occurrence => repeated,
         opts => []},
       #{name => topic_filters, fnum => 3, rnum => 4,
         type => {msg, topic_filter}, occurrence => repeated,
         opts => []}]},
     {{msg, client_unsubscribe_request},
      [#{name => clientinfo, fnum => 1, rnum => 2,
         type => {msg, client_info}, occurrence => optional,
         opts => []},
       #{name => props, fnum => 2, rnum => 3,
         type => {msg, property}, occurrence => repeated,
         opts => []},
       #{name => topic_filters, fnum => 3, rnum => 4,
         type => {msg, topic_filter}, occurrence => repeated,
         opts => []}]},
     {{msg, session_created_request},
      [#{name => clientinfo, fnum => 1, rnum => 2,
         type => {msg, client_info}, occurrence => optional,
         opts => []}]},
     {{msg, session_subscribed_request},
      [#{name => clientinfo, fnum => 1, rnum => 2,
         type => {msg, client_info}, occurrence => optional,
         opts => []},
       #{name => topic, fnum => 2, rnum => 3, type => string,
         occurrence => optional, opts => []},
       #{name => subopts, fnum => 3, rnum => 4,
         type => {msg, sub_opts}, occurrence => optional,
         opts => []}]},
     {{msg, session_unsubscribed_request},
      [#{name => clientinfo, fnum => 1, rnum => 2,
         type => {msg, client_info}, occurrence => optional,
         opts => []},
       #{name => topic, fnum => 2, rnum => 3, type => string,
         occurrence => optional, opts => []}]},
     {{msg, session_resumed_request},
      [#{name => clientinfo, fnum => 1, rnum => 2,
         type => {msg, client_info}, occurrence => optional,
         opts => []}]},
     {{msg, session_discarded_request},
      [#{name => clientinfo, fnum => 1, rnum => 2,
         type => {msg, client_info}, occurrence => optional,
         opts => []}]},
     {{msg, session_takeovered_request},
      [#{name => clientinfo, fnum => 1, rnum => 2,
         type => {msg, client_info}, occurrence => optional,
         opts => []}]},
     {{msg, session_terminated_request},
      [#{name => clientinfo, fnum => 1, rnum => 2,
         type => {msg, client_info}, occurrence => optional,
         opts => []},
       #{name => reason, fnum => 2, rnum => 3, type => string,
         occurrence => optional, opts => []}]},
     {{msg, message_publish_request},
      [#{name => message, fnum => 1, rnum => 2,
         type => {msg, message}, occurrence => optional,
         opts => []}]},
     {{msg, message_delivered_request},
      [#{name => clientinfo, fnum => 1, rnum => 2,
         type => {msg, client_info}, occurrence => optional,
         opts => []},
       #{name => message, fnum => 2, rnum => 3,
         type => {msg, message}, occurrence => optional,
         opts => []}]},
     {{msg, message_dropped_request},
      [#{name => message, fnum => 1, rnum => 2,
         type => {msg, message}, occurrence => optional,
         opts => []},
       #{name => reason, fnum => 2, rnum => 3, type => string,
         occurrence => optional, opts => []}]},
     {{msg, message_acked_request},
      [#{name => clientinfo, fnum => 1, rnum => 2,
         type => {msg, client_info}, occurrence => optional,
         opts => []},
       #{name => message, fnum => 2, rnum => 3,
         type => {msg, message}, occurrence => optional,
         opts => []}]},
     {{msg, empty_success}, []},
     {{msg, valued_response},
      [#{name => type, fnum => 1, rnum => 2,
         type => {enum, 'valued_response.ResponsedType'},
         occurrence => optional, opts => []},
       #{name => value, rnum => 3,
         fields =>
             [#{name => bool_result, fnum => 3, rnum => 3,
                type => bool, occurrence => optional, opts => []},
              #{name => message, fnum => 4, rnum => 3,
                type => {msg, message}, occurrence => optional,
                opts => []}]}]},
     {{msg, broker_info},
      [#{name => version, fnum => 1, rnum => 2,
         type => string, occurrence => optional, opts => []},
       #{name => sysdescr, fnum => 2, rnum => 3,
         type => string, occurrence => optional, opts => []},
       #{name => uptime, fnum => 3, rnum => 4, type => string,
         occurrence => optional, opts => []},
       #{name => datetime, fnum => 4, rnum => 5,
         type => string, occurrence => optional, opts => []}]},
     {{msg, hook_spec},
      [#{name => name, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []},
       #{name => topics, fnum => 2, rnum => 3, type => string,
         occurrence => repeated, opts => []}]},
     {{msg, conn_info},
      [#{name => node, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []},
       #{name => clientid, fnum => 2, rnum => 3,
         type => string, occurrence => optional, opts => []},
       #{name => username, fnum => 3, rnum => 4,
         type => string, occurrence => optional, opts => []},
       #{name => peerhost, fnum => 4, rnum => 5,
         type => string, occurrence => optional, opts => []},
       #{name => sockport, fnum => 5, rnum => 6,
         type => uint32, occurrence => optional, opts => []},
       #{name => proto_name, fnum => 6, rnum => 7,
         type => string, occurrence => optional, opts => []},
       #{name => proto_ver, fnum => 7, rnum => 8,
         type => string, occurrence => optional, opts => []},
       #{name => keepalive, fnum => 8, rnum => 9,
         type => uint32, occurrence => optional, opts => []}]},
     {{msg, client_info},
      [#{name => node, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []},
       #{name => clientid, fnum => 2, rnum => 3,
         type => string, occurrence => optional, opts => []},
       #{name => username, fnum => 3, rnum => 4,
         type => string, occurrence => optional, opts => []},
       #{name => password, fnum => 4, rnum => 5,
         type => string, occurrence => optional, opts => []},
       #{name => peerhost, fnum => 5, rnum => 6,
         type => string, occurrence => optional, opts => []},
       #{name => sockport, fnum => 6, rnum => 7,
         type => uint32, occurrence => optional, opts => []},
       #{name => protocol, fnum => 7, rnum => 8,
         type => string, occurrence => optional, opts => []},
       #{name => mountpoint, fnum => 8, rnum => 9,
         type => string, occurrence => optional, opts => []},
       #{name => is_superuser, fnum => 9, rnum => 10,
         type => bool, occurrence => optional, opts => []},
       #{name => anonymous, fnum => 10, rnum => 11,
         type => bool, occurrence => optional, opts => []}]},
     {{msg, message},
      [#{name => node, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []},
       #{name => id, fnum => 2, rnum => 3, type => string,
         occurrence => optional, opts => []},
       #{name => qos, fnum => 3, rnum => 4, type => uint32,
         occurrence => optional, opts => []},
       #{name => from, fnum => 4, rnum => 5, type => string,
         occurrence => optional, opts => []},
       #{name => topic, fnum => 5, rnum => 6, type => string,
         occurrence => optional, opts => []},
       #{name => payload, fnum => 6, rnum => 7, type => bytes,
         occurrence => optional, opts => []},
       #{name => timestamp, fnum => 7, rnum => 8,
         type => uint64, occurrence => optional, opts => []}]},
     {{msg, property},
      [#{name => name, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []},
       #{name => value, fnum => 2, rnum => 3, type => string,
         occurrence => optional, opts => []}]},
     {{msg, topic_filter},
      [#{name => name, fnum => 1, rnum => 2, type => string,
         occurrence => optional, opts => []},
       #{name => qos, fnum => 2, rnum => 3, type => uint32,
         occurrence => optional, opts => []}]},
     {{msg, sub_opts},
      [#{name => qos, fnum => 1, rnum => 2, type => uint32,
         occurrence => optional, opts => []},
       #{name => share, fnum => 2, rnum => 3, type => string,
         occurrence => optional, opts => []},
       #{name => rh, fnum => 3, rnum => 4, type => uint32,
         occurrence => optional, opts => []},
       #{name => rap, fnum => 4, rnum => 5, type => uint32,
         occurrence => optional, opts => []},
       #{name => nl, fnum => 5, rnum => 6, type => uint32,
         occurrence => optional, opts => []}]}].


get_msg_names() ->
    [provider_loaded_request,
     loaded_response,
     provider_unloaded_request,
     client_connect_request,
     client_connack_request,
     client_connected_request,
     client_disconnected_request,
     client_authenticate_request,
     client_check_acl_request,
     client_subscribe_request,
     client_unsubscribe_request,
     session_created_request,
     session_subscribed_request,
     session_unsubscribed_request,
     session_resumed_request,
     session_discarded_request,
     session_takeovered_request,
     session_terminated_request,
     message_publish_request,
     message_delivered_request,
     message_dropped_request,
     message_acked_request,
     empty_success,
     valued_response,
     broker_info,
     hook_spec,
     conn_info,
     client_info,
     message,
     property,
     topic_filter,
     sub_opts].


get_group_names() -> [].


get_msg_or_group_names() ->
    [provider_loaded_request,
     loaded_response,
     provider_unloaded_request,
     client_connect_request,
     client_connack_request,
     client_connected_request,
     client_disconnected_request,
     client_authenticate_request,
     client_check_acl_request,
     client_subscribe_request,
     client_unsubscribe_request,
     session_created_request,
     session_subscribed_request,
     session_unsubscribed_request,
     session_resumed_request,
     session_discarded_request,
     session_takeovered_request,
     session_terminated_request,
     message_publish_request,
     message_delivered_request,
     message_dropped_request,
     message_acked_request,
     empty_success,
     valued_response,
     broker_info,
     hook_spec,
     conn_info,
     client_info,
     message,
     property,
     topic_filter,
     sub_opts].


get_enum_names() ->
    ['client_check_acl_request.AclReqType',
     'valued_response.ResponsedType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(provider_loaded_request) ->
    [#{name => broker, fnum => 1, rnum => 2,
       type => {msg, broker_info}, occurrence => optional,
       opts => []}];
find_msg_def(loaded_response) ->
    [#{name => hooks, fnum => 1, rnum => 2,
       type => {msg, hook_spec}, occurrence => repeated,
       opts => []}];
find_msg_def(provider_unloaded_request) -> [];
find_msg_def(client_connect_request) ->
    [#{name => conninfo, fnum => 1, rnum => 2,
       type => {msg, conn_info}, occurrence => optional,
       opts => []},
     #{name => props, fnum => 2, rnum => 3,
       type => {msg, property}, occurrence => repeated,
       opts => []}];
find_msg_def(client_connack_request) ->
    [#{name => conninfo, fnum => 1, rnum => 2,
       type => {msg, conn_info}, occurrence => optional,
       opts => []},
     #{name => result_code, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => props, fnum => 3, rnum => 4,
       type => {msg, property}, occurrence => repeated,
       opts => []}];
find_msg_def(client_connected_request) ->
    [#{name => clientinfo, fnum => 1, rnum => 2,
       type => {msg, client_info}, occurrence => optional,
       opts => []}];
find_msg_def(client_disconnected_request) ->
    [#{name => clientinfo, fnum => 1, rnum => 2,
       type => {msg, client_info}, occurrence => optional,
       opts => []},
     #{name => reason, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(client_authenticate_request) ->
    [#{name => clientinfo, fnum => 1, rnum => 2,
       type => {msg, client_info}, occurrence => optional,
       opts => []},
     #{name => result, fnum => 2, rnum => 3, type => bool,
       occurrence => optional, opts => []}];
find_msg_def(client_check_acl_request) ->
    [#{name => clientinfo, fnum => 1, rnum => 2,
       type => {msg, client_info}, occurrence => optional,
       opts => []},
     #{name => type, fnum => 2, rnum => 3,
       type => {enum, 'client_check_acl_request.AclReqType'},
       occurrence => optional, opts => []},
     #{name => topic, fnum => 3, rnum => 4, type => string,
       occurrence => optional, opts => []},
     #{name => result, fnum => 4, rnum => 5, type => bool,
       occurrence => optional, opts => []}];
find_msg_def(client_subscribe_request) ->
    [#{name => clientinfo, fnum => 1, rnum => 2,
       type => {msg, client_info}, occurrence => optional,
       opts => []},
     #{name => props, fnum => 2, rnum => 3,
       type => {msg, property}, occurrence => repeated,
       opts => []},
     #{name => topic_filters, fnum => 3, rnum => 4,
       type => {msg, topic_filter}, occurrence => repeated,
       opts => []}];
find_msg_def(client_unsubscribe_request) ->
    [#{name => clientinfo, fnum => 1, rnum => 2,
       type => {msg, client_info}, occurrence => optional,
       opts => []},
     #{name => props, fnum => 2, rnum => 3,
       type => {msg, property}, occurrence => repeated,
       opts => []},
     #{name => topic_filters, fnum => 3, rnum => 4,
       type => {msg, topic_filter}, occurrence => repeated,
       opts => []}];
find_msg_def(session_created_request) ->
    [#{name => clientinfo, fnum => 1, rnum => 2,
       type => {msg, client_info}, occurrence => optional,
       opts => []}];
find_msg_def(session_subscribed_request) ->
    [#{name => clientinfo, fnum => 1, rnum => 2,
       type => {msg, client_info}, occurrence => optional,
       opts => []},
     #{name => topic, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => subopts, fnum => 3, rnum => 4,
       type => {msg, sub_opts}, occurrence => optional,
       opts => []}];
find_msg_def(session_unsubscribed_request) ->
    [#{name => clientinfo, fnum => 1, rnum => 2,
       type => {msg, client_info}, occurrence => optional,
       opts => []},
     #{name => topic, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(session_resumed_request) ->
    [#{name => clientinfo, fnum => 1, rnum => 2,
       type => {msg, client_info}, occurrence => optional,
       opts => []}];
find_msg_def(session_discarded_request) ->
    [#{name => clientinfo, fnum => 1, rnum => 2,
       type => {msg, client_info}, occurrence => optional,
       opts => []}];
find_msg_def(session_takeovered_request) ->
    [#{name => clientinfo, fnum => 1, rnum => 2,
       type => {msg, client_info}, occurrence => optional,
       opts => []}];
find_msg_def(session_terminated_request) ->
    [#{name => clientinfo, fnum => 1, rnum => 2,
       type => {msg, client_info}, occurrence => optional,
       opts => []},
     #{name => reason, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(message_publish_request) ->
    [#{name => message, fnum => 1, rnum => 2,
       type => {msg, message}, occurrence => optional,
       opts => []}];
find_msg_def(message_delivered_request) ->
    [#{name => clientinfo, fnum => 1, rnum => 2,
       type => {msg, client_info}, occurrence => optional,
       opts => []},
     #{name => message, fnum => 2, rnum => 3,
       type => {msg, message}, occurrence => optional,
       opts => []}];
find_msg_def(message_dropped_request) ->
    [#{name => message, fnum => 1, rnum => 2,
       type => {msg, message}, occurrence => optional,
       opts => []},
     #{name => reason, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(message_acked_request) ->
    [#{name => clientinfo, fnum => 1, rnum => 2,
       type => {msg, client_info}, occurrence => optional,
       opts => []},
     #{name => message, fnum => 2, rnum => 3,
       type => {msg, message}, occurrence => optional,
       opts => []}];
find_msg_def(empty_success) -> [];
find_msg_def(valued_response) ->
    [#{name => type, fnum => 1, rnum => 2,
       type => {enum, 'valued_response.ResponsedType'},
       occurrence => optional, opts => []},
     #{name => value, rnum => 3,
       fields =>
           [#{name => bool_result, fnum => 3, rnum => 3,
              type => bool, occurrence => optional, opts => []},
            #{name => message, fnum => 4, rnum => 3,
              type => {msg, message}, occurrence => optional,
              opts => []}]}];
find_msg_def(broker_info) ->
    [#{name => version, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => sysdescr, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => uptime, fnum => 3, rnum => 4, type => string,
       occurrence => optional, opts => []},
     #{name => datetime, fnum => 4, rnum => 5,
       type => string, occurrence => optional, opts => []}];
find_msg_def(hook_spec) ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => topics, fnum => 2, rnum => 3, type => string,
       occurrence => repeated, opts => []}];
find_msg_def(conn_info) ->
    [#{name => node, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => clientid, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => username, fnum => 3, rnum => 4,
       type => string, occurrence => optional, opts => []},
     #{name => peerhost, fnum => 4, rnum => 5,
       type => string, occurrence => optional, opts => []},
     #{name => sockport, fnum => 5, rnum => 6,
       type => uint32, occurrence => optional, opts => []},
     #{name => proto_name, fnum => 6, rnum => 7,
       type => string, occurrence => optional, opts => []},
     #{name => proto_ver, fnum => 7, rnum => 8,
       type => string, occurrence => optional, opts => []},
     #{name => keepalive, fnum => 8, rnum => 9,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def(client_info) ->
    [#{name => node, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => clientid, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => username, fnum => 3, rnum => 4,
       type => string, occurrence => optional, opts => []},
     #{name => password, fnum => 4, rnum => 5,
       type => string, occurrence => optional, opts => []},
     #{name => peerhost, fnum => 5, rnum => 6,
       type => string, occurrence => optional, opts => []},
     #{name => sockport, fnum => 6, rnum => 7,
       type => uint32, occurrence => optional, opts => []},
     #{name => protocol, fnum => 7, rnum => 8,
       type => string, occurrence => optional, opts => []},
     #{name => mountpoint, fnum => 8, rnum => 9,
       type => string, occurrence => optional, opts => []},
     #{name => is_superuser, fnum => 9, rnum => 10,
       type => bool, occurrence => optional, opts => []},
     #{name => anonymous, fnum => 10, rnum => 11,
       type => bool, occurrence => optional, opts => []}];
find_msg_def(message) ->
    [#{name => node, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => id, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => qos, fnum => 3, rnum => 4, type => uint32,
       occurrence => optional, opts => []},
     #{name => from, fnum => 4, rnum => 5, type => string,
       occurrence => optional, opts => []},
     #{name => topic, fnum => 5, rnum => 6, type => string,
       occurrence => optional, opts => []},
     #{name => payload, fnum => 6, rnum => 7, type => bytes,
       occurrence => optional, opts => []},
     #{name => timestamp, fnum => 7, rnum => 8,
       type => uint64, occurrence => optional, opts => []}];
find_msg_def(property) ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => value, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(topic_filter) ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => qos, fnum => 2, rnum => 3, type => uint32,
       occurrence => optional, opts => []}];
find_msg_def(sub_opts) ->
    [#{name => qos, fnum => 1, rnum => 2, type => uint32,
       occurrence => optional, opts => []},
     #{name => share, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => rh, fnum => 3, rnum => 4, type => uint32,
       occurrence => optional, opts => []},
     #{name => rap, fnum => 4, rnum => 5, type => uint32,
       occurrence => optional, opts => []},
     #{name => nl, fnum => 5, rnum => 6, type => uint32,
       occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def('client_check_acl_request.AclReqType') ->
    [{'PUBLISH', 0}, {'SUBSCRIBE', 1}];
find_enum_def('valued_response.ResponsedType') ->
    [{'IGNORE', 0},
     {'CONTINUE', 1},
     {'STOP_AND_RETURN', 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('client_check_acl_request.AclReqType',
                     Value) ->
    'enum_symbol_by_value_client_check_acl_request.AclReqType'(Value);
enum_symbol_by_value('valued_response.ResponsedType',
                     Value) ->
    'enum_symbol_by_value_valued_response.ResponsedType'(Value).


enum_value_by_symbol('client_check_acl_request.AclReqType',
                     Sym) ->
    'enum_value_by_symbol_client_check_acl_request.AclReqType'(Sym);
enum_value_by_symbol('valued_response.ResponsedType',
                     Sym) ->
    'enum_value_by_symbol_valued_response.ResponsedType'(Sym).


'enum_symbol_by_value_client_check_acl_request.AclReqType'(0) ->
    'PUBLISH';
'enum_symbol_by_value_client_check_acl_request.AclReqType'(1) ->
    'SUBSCRIBE'.


'enum_value_by_symbol_client_check_acl_request.AclReqType'('PUBLISH') ->
    0;
'enum_value_by_symbol_client_check_acl_request.AclReqType'('SUBSCRIBE') ->
    1.

'enum_symbol_by_value_valued_response.ResponsedType'(0) ->
    'IGNORE';
'enum_symbol_by_value_valued_response.ResponsedType'(1) ->
    'CONTINUE';
'enum_symbol_by_value_valued_response.ResponsedType'(2) ->
    'STOP_AND_RETURN'.


'enum_value_by_symbol_valued_response.ResponsedType'('IGNORE') ->
    0;
'enum_value_by_symbol_valued_response.ResponsedType'('CONTINUE') ->
    1;
'enum_value_by_symbol_valued_response.ResponsedType'('STOP_AND_RETURN') ->
    2.


get_service_names() -> ['emqx.exhook.v1.HookProvider'].


get_service_def('emqx.exhook.v1.HookProvider') ->
    {{service, 'emqx.exhook.v1.HookProvider'},
     [#{name => 'OnProviderLoaded',
        input => provider_loaded_request,
        output => loaded_response, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'OnProviderUnloaded',
        input => provider_unloaded_request,
        output => empty_success, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'OnClientConnect',
        input => client_connect_request,
        output => empty_success, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'OnClientConnack',
        input => client_connack_request,
        output => empty_success, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'OnClientConnected',
        input => client_connected_request,
        output => empty_success, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'OnClientDisconnected',
        input => client_disconnected_request,
        output => empty_success, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'OnClientAuthenticate',
        input => client_authenticate_request,
        output => valued_response, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'OnClientCheckAcl',
        input => client_check_acl_request,
        output => valued_response, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'OnClientSubscribe',
        input => client_subscribe_request,
        output => empty_success, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'OnClientUnsubscribe',
        input => client_unsubscribe_request,
        output => empty_success, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'OnSessionCreated',
        input => session_created_request,
        output => empty_success, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'OnSessionSubscribed',
        input => session_subscribed_request,
        output => empty_success, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'OnSessionUnsubscribed',
        input => session_unsubscribed_request,
        output => empty_success, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'OnSessionResumed',
        input => session_resumed_request,
        output => empty_success, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'OnSessionDiscarded',
        input => session_discarded_request,
        output => empty_success, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'OnSessionTakeovered',
        input => session_takeovered_request,
        output => empty_success, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'OnSessionTerminated',
        input => session_terminated_request,
        output => empty_success, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'OnMessagePublish',
        input => message_publish_request,
        output => valued_response, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'OnMessageDelivered',
        input => message_delivered_request,
        output => empty_success, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'OnMessageDropped',
        input => message_dropped_request,
        output => empty_success, input_stream => false,
        output_stream => false, opts => []},
      #{name => 'OnMessageAcked',
        input => message_acked_request, output => empty_success,
        input_stream => false, output_stream => false,
        opts => []}]};
get_service_def(_) -> error.


get_rpc_names('emqx.exhook.v1.HookProvider') ->
    ['OnProviderLoaded',
     'OnProviderUnloaded',
     'OnClientConnect',
     'OnClientConnack',
     'OnClientConnected',
     'OnClientDisconnected',
     'OnClientAuthenticate',
     'OnClientCheckAcl',
     'OnClientSubscribe',
     'OnClientUnsubscribe',
     'OnSessionCreated',
     'OnSessionSubscribed',
     'OnSessionUnsubscribed',
     'OnSessionResumed',
     'OnSessionDiscarded',
     'OnSessionTakeovered',
     'OnSessionTerminated',
     'OnMessagePublish',
     'OnMessageDelivered',
     'OnMessageDropped',
     'OnMessageAcked'];
get_rpc_names(_) -> error.


find_rpc_def('emqx.exhook.v1.HookProvider', RpcName) ->
    'find_rpc_def_emqx.exhook.v1.HookProvider'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_emqx.exhook.v1.HookProvider'('OnProviderLoaded') ->
    #{name => 'OnProviderLoaded',
      input => provider_loaded_request,
      output => loaded_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx.exhook.v1.HookProvider'('OnProviderUnloaded') ->
    #{name => 'OnProviderUnloaded',
      input => provider_unloaded_request,
      output => empty_success, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx.exhook.v1.HookProvider'('OnClientConnect') ->
    #{name => 'OnClientConnect',
      input => client_connect_request,
      output => empty_success, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx.exhook.v1.HookProvider'('OnClientConnack') ->
    #{name => 'OnClientConnack',
      input => client_connack_request,
      output => empty_success, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx.exhook.v1.HookProvider'('OnClientConnected') ->
    #{name => 'OnClientConnected',
      input => client_connected_request,
      output => empty_success, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx.exhook.v1.HookProvider'('OnClientDisconnected') ->
    #{name => 'OnClientDisconnected',
      input => client_disconnected_request,
      output => empty_success, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx.exhook.v1.HookProvider'('OnClientAuthenticate') ->
    #{name => 'OnClientAuthenticate',
      input => client_authenticate_request,
      output => valued_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx.exhook.v1.HookProvider'('OnClientCheckAcl') ->
    #{name => 'OnClientCheckAcl',
      input => client_check_acl_request,
      output => valued_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx.exhook.v1.HookProvider'('OnClientSubscribe') ->
    #{name => 'OnClientSubscribe',
      input => client_subscribe_request,
      output => empty_success, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx.exhook.v1.HookProvider'('OnClientUnsubscribe') ->
    #{name => 'OnClientUnsubscribe',
      input => client_unsubscribe_request,
      output => empty_success, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx.exhook.v1.HookProvider'('OnSessionCreated') ->
    #{name => 'OnSessionCreated',
      input => session_created_request,
      output => empty_success, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx.exhook.v1.HookProvider'('OnSessionSubscribed') ->
    #{name => 'OnSessionSubscribed',
      input => session_subscribed_request,
      output => empty_success, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx.exhook.v1.HookProvider'('OnSessionUnsubscribed') ->
    #{name => 'OnSessionUnsubscribed',
      input => session_unsubscribed_request,
      output => empty_success, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx.exhook.v1.HookProvider'('OnSessionResumed') ->
    #{name => 'OnSessionResumed',
      input => session_resumed_request,
      output => empty_success, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx.exhook.v1.HookProvider'('OnSessionDiscarded') ->
    #{name => 'OnSessionDiscarded',
      input => session_discarded_request,
      output => empty_success, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx.exhook.v1.HookProvider'('OnSessionTakeovered') ->
    #{name => 'OnSessionTakeovered',
      input => session_takeovered_request,
      output => empty_success, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx.exhook.v1.HookProvider'('OnSessionTerminated') ->
    #{name => 'OnSessionTerminated',
      input => session_terminated_request,
      output => empty_success, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx.exhook.v1.HookProvider'('OnMessagePublish') ->
    #{name => 'OnMessagePublish',
      input => message_publish_request,
      output => valued_response, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx.exhook.v1.HookProvider'('OnMessageDelivered') ->
    #{name => 'OnMessageDelivered',
      input => message_delivered_request,
      output => empty_success, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx.exhook.v1.HookProvider'('OnMessageDropped') ->
    #{name => 'OnMessageDropped',
      input => message_dropped_request,
      output => empty_success, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_emqx.exhook.v1.HookProvider'('OnMessageAcked') ->
    #{name => 'OnMessageAcked',
      input => message_acked_request, output => empty_success,
      input_stream => false, output_stream => false,
      opts => []};
'find_rpc_def_emqx.exhook.v1.HookProvider'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_map(Def) -> Def;
        error ->
            erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"emqx.exhook.v1.HookProvider">>) ->
    'emqx.exhook.v1.HookProvider';
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('emqx.exhook.v1.HookProvider') ->
    <<"emqx.exhook.v1.HookProvider">>;
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"emqx.exhook.v1.HookProvider">>, <<"OnProviderLoaded">>) ->
    {'emqx.exhook.v1.HookProvider', 'OnProviderLoaded'};
fqbins_to_service_and_rpc_name(<<"emqx.exhook.v1.HookProvider">>, <<"OnProviderUnloaded">>) ->
    {'emqx.exhook.v1.HookProvider', 'OnProviderUnloaded'};
fqbins_to_service_and_rpc_name(<<"emqx.exhook.v1.HookProvider">>, <<"OnClientConnect">>) ->
    {'emqx.exhook.v1.HookProvider', 'OnClientConnect'};
fqbins_to_service_and_rpc_name(<<"emqx.exhook.v1.HookProvider">>, <<"OnClientConnack">>) ->
    {'emqx.exhook.v1.HookProvider', 'OnClientConnack'};
fqbins_to_service_and_rpc_name(<<"emqx.exhook.v1.HookProvider">>, <<"OnClientConnected">>) ->
    {'emqx.exhook.v1.HookProvider', 'OnClientConnected'};
fqbins_to_service_and_rpc_name(<<"emqx.exhook.v1.HookProvider">>, <<"OnClientDisconnected">>) ->
    {'emqx.exhook.v1.HookProvider', 'OnClientDisconnected'};
fqbins_to_service_and_rpc_name(<<"emqx.exhook.v1.HookProvider">>, <<"OnClientAuthenticate">>) ->
    {'emqx.exhook.v1.HookProvider', 'OnClientAuthenticate'};
fqbins_to_service_and_rpc_name(<<"emqx.exhook.v1.HookProvider">>, <<"OnClientCheckAcl">>) ->
    {'emqx.exhook.v1.HookProvider', 'OnClientCheckAcl'};
fqbins_to_service_and_rpc_name(<<"emqx.exhook.v1.HookProvider">>, <<"OnClientSubscribe">>) ->
    {'emqx.exhook.v1.HookProvider', 'OnClientSubscribe'};
fqbins_to_service_and_rpc_name(<<"emqx.exhook.v1.HookProvider">>, <<"OnClientUnsubscribe">>) ->
    {'emqx.exhook.v1.HookProvider', 'OnClientUnsubscribe'};
fqbins_to_service_and_rpc_name(<<"emqx.exhook.v1.HookProvider">>, <<"OnSessionCreated">>) ->
    {'emqx.exhook.v1.HookProvider', 'OnSessionCreated'};
fqbins_to_service_and_rpc_name(<<"emqx.exhook.v1.HookProvider">>, <<"OnSessionSubscribed">>) ->
    {'emqx.exhook.v1.HookProvider', 'OnSessionSubscribed'};
fqbins_to_service_and_rpc_name(<<"emqx.exhook.v1.HookProvider">>, <<"OnSessionUnsubscribed">>) ->
    {'emqx.exhook.v1.HookProvider',
     'OnSessionUnsubscribed'};
fqbins_to_service_and_rpc_name(<<"emqx.exhook.v1.HookProvider">>, <<"OnSessionResumed">>) ->
    {'emqx.exhook.v1.HookProvider', 'OnSessionResumed'};
fqbins_to_service_and_rpc_name(<<"emqx.exhook.v1.HookProvider">>, <<"OnSessionDiscarded">>) ->
    {'emqx.exhook.v1.HookProvider', 'OnSessionDiscarded'};
fqbins_to_service_and_rpc_name(<<"emqx.exhook.v1.HookProvider">>, <<"OnSessionTakeovered">>) ->
    {'emqx.exhook.v1.HookProvider', 'OnSessionTakeovered'};
fqbins_to_service_and_rpc_name(<<"emqx.exhook.v1.HookProvider">>, <<"OnSessionTerminated">>) ->
    {'emqx.exhook.v1.HookProvider', 'OnSessionTerminated'};
fqbins_to_service_and_rpc_name(<<"emqx.exhook.v1.HookProvider">>, <<"OnMessagePublish">>) ->
    {'emqx.exhook.v1.HookProvider', 'OnMessagePublish'};
fqbins_to_service_and_rpc_name(<<"emqx.exhook.v1.HookProvider">>, <<"OnMessageDelivered">>) ->
    {'emqx.exhook.v1.HookProvider', 'OnMessageDelivered'};
fqbins_to_service_and_rpc_name(<<"emqx.exhook.v1.HookProvider">>, <<"OnMessageDropped">>) ->
    {'emqx.exhook.v1.HookProvider', 'OnMessageDropped'};
fqbins_to_service_and_rpc_name(<<"emqx.exhook.v1.HookProvider">>, <<"OnMessageAcked">>) ->
    {'emqx.exhook.v1.HookProvider', 'OnMessageAcked'};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('emqx.exhook.v1.HookProvider',
                               'OnProviderLoaded') ->
    {<<"emqx.exhook.v1.HookProvider">>, <<"OnProviderLoaded">>};
service_and_rpc_name_to_fqbins('emqx.exhook.v1.HookProvider',
                               'OnProviderUnloaded') ->
    {<<"emqx.exhook.v1.HookProvider">>, <<"OnProviderUnloaded">>};
service_and_rpc_name_to_fqbins('emqx.exhook.v1.HookProvider',
                               'OnClientConnect') ->
    {<<"emqx.exhook.v1.HookProvider">>, <<"OnClientConnect">>};
service_and_rpc_name_to_fqbins('emqx.exhook.v1.HookProvider',
                               'OnClientConnack') ->
    {<<"emqx.exhook.v1.HookProvider">>, <<"OnClientConnack">>};
service_and_rpc_name_to_fqbins('emqx.exhook.v1.HookProvider',
                               'OnClientConnected') ->
    {<<"emqx.exhook.v1.HookProvider">>, <<"OnClientConnected">>};
service_and_rpc_name_to_fqbins('emqx.exhook.v1.HookProvider',
                               'OnClientDisconnected') ->
    {<<"emqx.exhook.v1.HookProvider">>, <<"OnClientDisconnected">>};
service_and_rpc_name_to_fqbins('emqx.exhook.v1.HookProvider',
                               'OnClientAuthenticate') ->
    {<<"emqx.exhook.v1.HookProvider">>, <<"OnClientAuthenticate">>};
service_and_rpc_name_to_fqbins('emqx.exhook.v1.HookProvider',
                               'OnClientCheckAcl') ->
    {<<"emqx.exhook.v1.HookProvider">>, <<"OnClientCheckAcl">>};
service_and_rpc_name_to_fqbins('emqx.exhook.v1.HookProvider',
                               'OnClientSubscribe') ->
    {<<"emqx.exhook.v1.HookProvider">>, <<"OnClientSubscribe">>};
service_and_rpc_name_to_fqbins('emqx.exhook.v1.HookProvider',
                               'OnClientUnsubscribe') ->
    {<<"emqx.exhook.v1.HookProvider">>, <<"OnClientUnsubscribe">>};
service_and_rpc_name_to_fqbins('emqx.exhook.v1.HookProvider',
                               'OnSessionCreated') ->
    {<<"emqx.exhook.v1.HookProvider">>, <<"OnSessionCreated">>};
service_and_rpc_name_to_fqbins('emqx.exhook.v1.HookProvider',
                               'OnSessionSubscribed') ->
    {<<"emqx.exhook.v1.HookProvider">>, <<"OnSessionSubscribed">>};
service_and_rpc_name_to_fqbins('emqx.exhook.v1.HookProvider',
                               'OnSessionUnsubscribed') ->
    {<<"emqx.exhook.v1.HookProvider">>, <<"OnSessionUnsubscribed">>};
service_and_rpc_name_to_fqbins('emqx.exhook.v1.HookProvider',
                               'OnSessionResumed') ->
    {<<"emqx.exhook.v1.HookProvider">>, <<"OnSessionResumed">>};
service_and_rpc_name_to_fqbins('emqx.exhook.v1.HookProvider',
                               'OnSessionDiscarded') ->
    {<<"emqx.exhook.v1.HookProvider">>, <<"OnSessionDiscarded">>};
service_and_rpc_name_to_fqbins('emqx.exhook.v1.HookProvider',
                               'OnSessionTakeovered') ->
    {<<"emqx.exhook.v1.HookProvider">>, <<"OnSessionTakeovered">>};
service_and_rpc_name_to_fqbins('emqx.exhook.v1.HookProvider',
                               'OnSessionTerminated') ->
    {<<"emqx.exhook.v1.HookProvider">>, <<"OnSessionTerminated">>};
service_and_rpc_name_to_fqbins('emqx.exhook.v1.HookProvider',
                               'OnMessagePublish') ->
    {<<"emqx.exhook.v1.HookProvider">>, <<"OnMessagePublish">>};
service_and_rpc_name_to_fqbins('emqx.exhook.v1.HookProvider',
                               'OnMessageDelivered') ->
    {<<"emqx.exhook.v1.HookProvider">>, <<"OnMessageDelivered">>};
service_and_rpc_name_to_fqbins('emqx.exhook.v1.HookProvider',
                               'OnMessageDropped') ->
    {<<"emqx.exhook.v1.HookProvider">>, <<"OnMessageDropped">>};
service_and_rpc_name_to_fqbins('emqx.exhook.v1.HookProvider',
                               'OnMessageAcked') ->
    {<<"emqx.exhook.v1.HookProvider">>, <<"OnMessageAcked">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"emqx.exhook.v1.ProviderLoadedRequest">>) -> provider_loaded_request;
fqbin_to_msg_name(<<"emqx.exhook.v1.LoadedResponse">>) -> loaded_response;
fqbin_to_msg_name(<<"emqx.exhook.v1.ProviderUnloadedRequest">>) -> provider_unloaded_request;
fqbin_to_msg_name(<<"emqx.exhook.v1.ClientConnectRequest">>) -> client_connect_request;
fqbin_to_msg_name(<<"emqx.exhook.v1.ClientConnackRequest">>) -> client_connack_request;
fqbin_to_msg_name(<<"emqx.exhook.v1.ClientConnectedRequest">>) -> client_connected_request;
fqbin_to_msg_name(<<"emqx.exhook.v1.ClientDisconnectedRequest">>) ->
    client_disconnected_request;
fqbin_to_msg_name(<<"emqx.exhook.v1.ClientAuthenticateRequest">>) ->
    client_authenticate_request;
fqbin_to_msg_name(<<"emqx.exhook.v1.ClientCheckAclRequest">>) -> client_check_acl_request;
fqbin_to_msg_name(<<"emqx.exhook.v1.ClientSubscribeRequest">>) -> client_subscribe_request;
fqbin_to_msg_name(<<"emqx.exhook.v1.ClientUnsubscribeRequest">>) ->
    client_unsubscribe_request;
fqbin_to_msg_name(<<"emqx.exhook.v1.SessionCreatedRequest">>) -> session_created_request;
fqbin_to_msg_name(<<"emqx.exhook.v1.SessionSubscribedRequest">>) ->
    session_subscribed_request;
fqbin_to_msg_name(<<"emqx.exhook.v1.SessionUnsubscribedRequest">>) ->
    session_unsubscribed_request;
fqbin_to_msg_name(<<"emqx.exhook.v1.SessionResumedRequest">>) -> session_resumed_request;
fqbin_to_msg_name(<<"emqx.exhook.v1.SessionDiscardedRequest">>) -> session_discarded_request;
fqbin_to_msg_name(<<"emqx.exhook.v1.SessionTakeoveredRequest">>) ->
    session_takeovered_request;
fqbin_to_msg_name(<<"emqx.exhook.v1.SessionTerminatedRequest">>) ->
    session_terminated_request;
fqbin_to_msg_name(<<"emqx.exhook.v1.MessagePublishRequest">>) -> message_publish_request;
fqbin_to_msg_name(<<"emqx.exhook.v1.MessageDeliveredRequest">>) -> message_delivered_request;
fqbin_to_msg_name(<<"emqx.exhook.v1.MessageDroppedRequest">>) -> message_dropped_request;
fqbin_to_msg_name(<<"emqx.exhook.v1.MessageAckedRequest">>) -> message_acked_request;
fqbin_to_msg_name(<<"emqx.exhook.v1.EmptySuccess">>) -> empty_success;
fqbin_to_msg_name(<<"emqx.exhook.v1.ValuedResponse">>) -> valued_response;
fqbin_to_msg_name(<<"emqx.exhook.v1.BrokerInfo">>) -> broker_info;
fqbin_to_msg_name(<<"emqx.exhook.v1.HookSpec">>) -> hook_spec;
fqbin_to_msg_name(<<"emqx.exhook.v1.ConnInfo">>) -> conn_info;
fqbin_to_msg_name(<<"emqx.exhook.v1.ClientInfo">>) -> client_info;
fqbin_to_msg_name(<<"emqx.exhook.v1.Message">>) -> message;
fqbin_to_msg_name(<<"emqx.exhook.v1.Property">>) -> property;
fqbin_to_msg_name(<<"emqx.exhook.v1.TopicFilter">>) -> topic_filter;
fqbin_to_msg_name(<<"emqx.exhook.v1.SubOpts">>) -> sub_opts;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(provider_loaded_request) -> <<"emqx.exhook.v1.ProviderLoadedRequest">>;
msg_name_to_fqbin(loaded_response) -> <<"emqx.exhook.v1.LoadedResponse">>;
msg_name_to_fqbin(provider_unloaded_request) -> <<"emqx.exhook.v1.ProviderUnloadedRequest">>;
msg_name_to_fqbin(client_connect_request) -> <<"emqx.exhook.v1.ClientConnectRequest">>;
msg_name_to_fqbin(client_connack_request) -> <<"emqx.exhook.v1.ClientConnackRequest">>;
msg_name_to_fqbin(client_connected_request) -> <<"emqx.exhook.v1.ClientConnectedRequest">>;
msg_name_to_fqbin(client_disconnected_request) ->
    <<"emqx.exhook.v1.ClientDisconnectedRequest">>;
msg_name_to_fqbin(client_authenticate_request) ->
    <<"emqx.exhook.v1.ClientAuthenticateRequest">>;
msg_name_to_fqbin(client_check_acl_request) -> <<"emqx.exhook.v1.ClientCheckAclRequest">>;
msg_name_to_fqbin(client_subscribe_request) -> <<"emqx.exhook.v1.ClientSubscribeRequest">>;
msg_name_to_fqbin(client_unsubscribe_request) ->
    <<"emqx.exhook.v1.ClientUnsubscribeRequest">>;
msg_name_to_fqbin(session_created_request) -> <<"emqx.exhook.v1.SessionCreatedRequest">>;
msg_name_to_fqbin(session_subscribed_request) ->
    <<"emqx.exhook.v1.SessionSubscribedRequest">>;
msg_name_to_fqbin(session_unsubscribed_request) ->
    <<"emqx.exhook.v1.SessionUnsubscribedRequest">>;
msg_name_to_fqbin(session_resumed_request) -> <<"emqx.exhook.v1.SessionResumedRequest">>;
msg_name_to_fqbin(session_discarded_request) -> <<"emqx.exhook.v1.SessionDiscardedRequest">>;
msg_name_to_fqbin(session_takeovered_request) ->
    <<"emqx.exhook.v1.SessionTakeoveredRequest">>;
msg_name_to_fqbin(session_terminated_request) ->
    <<"emqx.exhook.v1.SessionTerminatedRequest">>;
msg_name_to_fqbin(message_publish_request) -> <<"emqx.exhook.v1.MessagePublishRequest">>;
msg_name_to_fqbin(message_delivered_request) -> <<"emqx.exhook.v1.MessageDeliveredRequest">>;
msg_name_to_fqbin(message_dropped_request) -> <<"emqx.exhook.v1.MessageDroppedRequest">>;
msg_name_to_fqbin(message_acked_request) -> <<"emqx.exhook.v1.MessageAckedRequest">>;
msg_name_to_fqbin(empty_success) -> <<"emqx.exhook.v1.EmptySuccess">>;
msg_name_to_fqbin(valued_response) -> <<"emqx.exhook.v1.ValuedResponse">>;
msg_name_to_fqbin(broker_info) -> <<"emqx.exhook.v1.BrokerInfo">>;
msg_name_to_fqbin(hook_spec) -> <<"emqx.exhook.v1.HookSpec">>;
msg_name_to_fqbin(conn_info) -> <<"emqx.exhook.v1.ConnInfo">>;
msg_name_to_fqbin(client_info) -> <<"emqx.exhook.v1.ClientInfo">>;
msg_name_to_fqbin(message) -> <<"emqx.exhook.v1.Message">>;
msg_name_to_fqbin(property) -> <<"emqx.exhook.v1.Property">>;
msg_name_to_fqbin(topic_filter) -> <<"emqx.exhook.v1.TopicFilter">>;
msg_name_to_fqbin(sub_opts) -> <<"emqx.exhook.v1.SubOpts">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"emqx.exhook.v1.ClientCheckAclRequest.AclReqType">>) ->
    'client_check_acl_request.AclReqType';
fqbin_to_enum_name(<<"emqx.exhook.v1.ValuedResponse.ResponsedType">>) ->
    'valued_response.ResponsedType';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('client_check_acl_request.AclReqType') ->
    <<"emqx.exhook.v1.ClientCheckAclRequest.AclReqType">>;
enum_name_to_fqbin('valued_response.ResponsedType') ->
    <<"emqx.exhook.v1.ValuedResponse.ResponsedType">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> 'emqx.exhook.v1'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "exhook.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["exhook.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["exhook"].


get_msg_containment("exhook") ->
    [broker_info,
     client_authenticate_request,
     client_check_acl_request,
     client_connack_request,
     client_connect_request,
     client_connected_request,
     client_disconnected_request,
     client_info,
     client_subscribe_request,
     client_unsubscribe_request,
     conn_info,
     empty_success,
     hook_spec,
     loaded_response,
     message,
     message_acked_request,
     message_delivered_request,
     message_dropped_request,
     message_publish_request,
     property,
     provider_loaded_request,
     provider_unloaded_request,
     session_created_request,
     session_discarded_request,
     session_resumed_request,
     session_subscribed_request,
     session_takeovered_request,
     session_terminated_request,
     session_unsubscribed_request,
     sub_opts,
     topic_filter,
     valued_response];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("exhook") -> 'emqx.exhook.v1';
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("exhook") ->
    ['emqx.exhook.v1.HookProvider'];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("exhook") ->
    [{'emqx.exhook.v1.HookProvider', 'OnProviderLoaded'},
     {'emqx.exhook.v1.HookProvider', 'OnProviderUnloaded'},
     {'emqx.exhook.v1.HookProvider', 'OnClientConnect'},
     {'emqx.exhook.v1.HookProvider', 'OnClientConnack'},
     {'emqx.exhook.v1.HookProvider', 'OnClientConnected'},
     {'emqx.exhook.v1.HookProvider', 'OnClientDisconnected'},
     {'emqx.exhook.v1.HookProvider', 'OnClientAuthenticate'},
     {'emqx.exhook.v1.HookProvider', 'OnClientCheckAcl'},
     {'emqx.exhook.v1.HookProvider', 'OnClientSubscribe'},
     {'emqx.exhook.v1.HookProvider', 'OnClientUnsubscribe'},
     {'emqx.exhook.v1.HookProvider', 'OnSessionCreated'},
     {'emqx.exhook.v1.HookProvider', 'OnSessionSubscribed'},
     {'emqx.exhook.v1.HookProvider',
      'OnSessionUnsubscribed'},
     {'emqx.exhook.v1.HookProvider', 'OnSessionResumed'},
     {'emqx.exhook.v1.HookProvider', 'OnSessionDiscarded'},
     {'emqx.exhook.v1.HookProvider', 'OnSessionTakeovered'},
     {'emqx.exhook.v1.HookProvider', 'OnSessionTerminated'},
     {'emqx.exhook.v1.HookProvider', 'OnMessagePublish'},
     {'emqx.exhook.v1.HookProvider', 'OnMessageDelivered'},
     {'emqx.exhook.v1.HookProvider', 'OnMessageDropped'},
     {'emqx.exhook.v1.HookProvider', 'OnMessageAcked'}];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("exhook") ->
    ['client_check_acl_request.AclReqType',
     'valued_response.ResponsedType'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.TopicFilter">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.SubOpts">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.HookSpec">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.EmptySuccess">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.SessionUnsubscribedRequest">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.SessionTerminatedRequest">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.SessionTakeoveredRequest">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.SessionSubscribedRequest">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.SessionResumedRequest">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.SessionDiscardedRequest">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.SessionCreatedRequest">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.ProviderUnloadedRequest">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.ProviderLoadedRequest">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.MessagePublishRequest">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.MessageDroppedRequest">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.MessageDeliveredRequest">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.MessageAckedRequest">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.ClientUnsubscribeRequest">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.ClientSubscribeRequest">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.ClientDisconnectedRequest">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.ClientConnectedRequest">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.ClientConnectRequest">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.ClientConnackRequest">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.ClientCheckAclRequest">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.ClientAuthenticateRequest">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.ValuedResponse">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.Message">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.LoadedResponse">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.Property">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.ConnInfo">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.ClientInfo">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(<<"emqx.exhook.v1.BrokerInfo">>) -> "exhook";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"emqx.exhook.v1.HookProvider">>) -> "exhook";
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"emqx.exhook.v1.ValuedResponse.ResponsedType">>) -> "exhook";
get_proto_by_enum_name_as_fqbin(<<"emqx.exhook.v1.ClientCheckAclRequest.AclReqType">>) -> "exhook";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"emqx.exhook.v1">>) -> ["exhook"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.11.2".

gpb_version_as_list() ->
    [4,11,2].
